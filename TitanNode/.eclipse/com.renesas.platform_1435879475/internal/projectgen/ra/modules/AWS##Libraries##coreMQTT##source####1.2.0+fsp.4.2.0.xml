<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.aws.coreMqtt" path="aws/core_mqtt_config.h" version="0">
        <property default="" description="Add a path to your custom core_mqtt_config.h file. It can be used to override some or all of the configurations defined here, and to define additional configurations." display="Custom core_mqtt_config.h" id="config.aws.coreMqtt.custom_mqtt_config">
            <export>eval('' +
'var input = "${config.aws.coreMqtt.custom_mqtt_config}";' +
'if (input != "")' +
'{' +
'    input = \'#include "\' + input + \'"\';' +
'}' +
'    input' +
                '')</export>
        </property>
        <property display="Retry count for reading CONNACK from network" id="config.aws.coreMqtt.max_connack_recieve_retry_count" default="2" description="MQTT_Connect() can be using retries. If timeout passed as 0 to MQTT_Connect(), retries are used to attempt to read from network. The maximum retry count is specified by this config." />
        <property display="State Array Max Count" id="config.aws.coreMqtt.state_array_max_count" default="10U" description="Determines the maximum number of MQTT PUBLISH messages, pending acknowledgment at a time, that are supported for incoming and outgoing direction of messages, separately. QoS 1 and 2 MQTT PUBLISHes require acknowledgment from the server before they can be completed. While they are awaiting the acknowledgment, the client must maintain information about their state. The value of this macro sets the limit on how many simultaneous PUBLISH states an MQTT context maintains, separately, for both incoming and outgoing direction of PUBLISHes." />
        <property display="Ping Response Timeout (ms)" id="config.aws.coreMqtt.ping_resp_timeout" default="500U" description="Number of milliseconds to wait for a ping response to a ping request as part of the keep-alive mechanism. If a ping response is not received before this timeout, then MQTT_ProcessLoop will return MQTTKeepAliveTimeout." />
        <property display="Recieve Polling Timeout (ms)" id="config.aws.coreMqtt.recv_polling_timeout" default="10U" description="The maximum duration between non-empty network reads while receiving an MQTT packet via the MQTT_ProcessLoop or MQTT_ReceiveLoop API functions. When an incoming MQTT packet is detected, the transport receive function may be called multiple times until all of the expected number of bytes of the packet are received. This timeout represents the maximum polling duration that is allowed without any data reception from the network for the incoming packet. If the timeout expires, the MQTT_ProcessLoop and MQTT_ReceiveLoop functions return MQTTRecvFailed." />
        <property display="Send Retry Timeout (ms)" id="config.aws.coreMqtt.send_retry_timeout" default="10U" description="The maximum duration between non-empty network transmissions while sending an MQTT packet via the MQTT_ProcessLoop or MQTT_ReceiveLoop API functions. When sending an MQTT packet, the transport send function may be called multiple times until all of the required number of bytes are sent. This timeout represents the maximum duration that is allowed for no data transmission over the network through the transport send function. If the timeout expires, the MQTT_ProcessLoop and MQTT_ReceiveLoop functions return MQTTSendFailed." />
        <content>
${config.aws.coreMqtt.custom_mqtt_config}

#ifdef __cplusplus
extern "C" {
#endif

#ifndef MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT
#define MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT            ${config.aws.coreMqtt.max_connack_recieve_retry_count}
#endif

#ifndef MQTT_STATE_ARRAY_MAX_COUNT
#define MQTT_STATE_ARRAY_MAX_COUNT                      ${config.aws.coreMqtt.state_array_max_count}
#endif

#ifndef MQTT_PINGRESP_TIMEOUT_MS
#define MQTT_PINGRESP_TIMEOUT_MS                        ${config.aws.coreMqtt.ping_resp_timeout}
#endif

#ifndef MQTT_RECV_POLLING_TIMEOUT_MS
#define MQTT_RECV_POLLING_TIMEOUT_MS                    ${config.aws.coreMqtt.recv_polling_timeout}
#endif

#ifndef MQTT_SEND_RETRY_TIMEOUT_MS
#define MQTT_SEND_RETRY_TIMEOUT_MS                      ${config.aws.coreMqtt.send_retry_timeout}
#endif

#ifdef __cplusplus
}
#endif
        </content>
    </config>
    <module id="module.aws.coreMqtt" display="Networking|AWS Core MQTT" config="config.aws.coreMqtt" common="1" visible="false" version="1" url="_f_r_e_e_r_t_o_s__m_i_g_r_a_t_i_o_n.html">
        <constraint display="This stack is no longer supported. Please add a new AWS Core MQTT stack, migrate settings, and remove this stack."/>
        <requires id="module.aws.coreMqtt.requires.awsfreertos" interface="interface.rtos.awsfreertos" visible="false" display="Requires FreeRTOS"/>
        <requires id="module.aws.coreMqtt.requires.transport_interface" interface="interface.aws.transport_interface" display="Add Transport Interface" find="true"/>
        <provides interface="interface.aws.coreMqtt" />
        <includes>
#include "core_mqtt.h"
        </includes>
    </module>
    <module id="module.aws.coreMqttLib" display="Networking|AWS Core MQTT" config="config.aws.coreMqtt" common="1" visible="true" version="1" url="https://docs.aws.amazon.com/freertos/latest/userguide/coremqtt.html">
        <requires id="module.aws.coreMqttLib.requires.awsfreertos" interface="interface.rtos.awsfreertos" visible="false" display="Requires FreeRTOS"/>
        <requires id="module.aws.coreMqttLib.requires.transport_interface" interface="interface.aws.transportInterface" display="Add Transport Interface" find="true"/>
        <provides interface="interface.aws.coreMqtt" />
        <includes>
#include "core_mqtt.h"
        </includes>
    </module>
</raModuleDescription>
