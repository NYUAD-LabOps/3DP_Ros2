<?xml version="1.0" encoding="UTF-8"?>
<raModuleDescription>
    <config id="config.driver.psa_crypto" path="arm/mbedtls/config.h" version="0">
        <property default="config.driver.psa_crypto.mbedtls_entropy_hardware_alt.enabled" description="Defines MBEDTLS_ENTROPY_HARDWARE_ALT." display="Hardware Acceleration|TRNG" id="config.driver.psa_crypto.mbedtls_entropy_hardware_alt">
            <option display="Enabled" id="config.driver.psa_crypto.mbedtls_entropy_hardware_alt.enabled" value="1" />
        </property>
        <property default="" description="Select AES key formats used" display="Hardware Acceleration|Key Format|AES" id="config.driver.psa_crypto.aes_format">
            <select enum="enum.mcu.psa_crypto.aes_format" />
        </property>
        <property default="" description="Select ECC key formats used" display="Hardware Acceleration|Key Format|ECC" id="config.driver.psa_crypto.ecc_format">
            <select enum="enum.mcu.psa_crypto.ecc_format" />
        </property>
        <property default="" description="Select RSA key formats used" display="Hardware Acceleration|Key Format|RSA" id="config.driver.psa_crypto.rsa_format">
            <select enum="enum.mcu.psa_crypto.rsa_format" />
        </property>
        <property default="" description="Defines MBEDTLS_SHA256_ALT and MBEDTLS_SHA256_PROCESS_ALT." display="Hardware Acceleration|Hash|SHA256/224" id="config.driver.psa_crypto.sha256_alt">
            <select enum="enum.mcu.psa_crypto.sha256_alt" />
        </property>
        <property default="" description="Defines MBEDTLS_AES_ALT, MBEDTLS_AES_SETKEY_ENC_ALT, MBEDTLS_AES_SETKEY_DEC_ALT, MBEDTLS_AES_ENCRYPT_ALT and MBEDTLS_AES_DECRYPT_ALT" display="Hardware Acceleration|Cipher|AES" id="config.driver.psa_crypto.aes_alt">
            <select enum="enum.mcu.psa_crypto.aes_alt" />
        </property>
        <property default="" description="Defines MBEDTLS_ECP_ALT" display="Hardware Acceleration|Public Key Cryptography (PKC)|ECC" id="config.driver.psa_crypto.mbedtls_ecp_alt">
            <select enum="enum.mcu.psa_crypto.ecp_alt" />
        </property>
        <property default="" description="Defines MBEDTLS_ECDSA_SIGN_ALT and MBEDTLS_ECDSA_VERIFY_ALT" display="Hardware Acceleration|Public Key Cryptography (PKC)|ECDSA " id="config.driver.psa_crypto.mbedtls_ecdsa_alt">
            <select enum="enum.mcu.psa_crypto.ecdsa_alt" />
        </property>
        <property default="" description="Defines MBEDTLS_ECDH_ALT" display="Hardware Acceleration|Public Key Cryptography (PKC)|ECDH " id="config.driver.psa_crypto.mbedtls_ecdh_alt">
            <select enum="enum.mcu.psa_crypto.ecdh_alt" />
        </property>
        <property default="" description="Defines MBEDTLS_RSA_ALT." display="Hardware Acceleration|Public Key Cryptography (PKC)|RSA" id="config.driver.psa_crypto.mbedtls_rsa_alt">
            <select enum="enum.mcu.psa_crypto.rsa_alt" />
        </property>
        <property default="" description="Enables RSA 3072 Verify." display="Hardware Acceleration|Public Key Cryptography (PKC)|RSA 3072 Verify" id="config.driver.psa_crypto.mbedtls_rsa_3072">
            <select enum="enum.mcu.psa_crypto.rsa_3072" />
        </property>
        <property default="" description="Enables RSA 4096 Verify." display="Hardware Acceleration|Public Key Cryptography (PKC)|RSA 4096 Verify" id="config.driver.psa_crypto.mbedtls_rsa_4096">
            <select enum="enum.mcu.psa_crypto.rsa_4096" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_setup_teardown_alt.enabled" description="MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT" display="Hardware Acceleration|Secure Crypto Engine Initialization" id="config.driver.psa_crypto.mbedtls_platform_setup_teardown_alt">
            <option display="Enabled" id="config.driver.psa_crypto.mbedtls_platform_setup_teardown_alt.enabled" value="1" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_have_asm.disabled" description="MBEDTLS_HAVE_ASM" display="Platform|MBEDTLS_HAVE_ASM" id="config.driver.psa_crypto.mbedtls_have_asm">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_have_asm.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_have_asm.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_no_udbl_division.disabled" description="MBEDTLS_NO_UDBL_DIVISION" display="Platform|MBEDTLS_NO_UDBL_DIVISION" id="config.driver.psa_crypto.mbedtls_no_udbl_division">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_no_udbl_division.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_no_udbl_division.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_no_64bit_multiplication.disabled" description="MBEDTLS_NO_64BIT_MULTIPLICATION" display="Platform|MBEDTLS_NO_64BIT_MULTIPLICATION" id="config.driver.psa_crypto.mbedtls_no_64bit_multiplication">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_no_64bit_multiplication.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_no_64bit_multiplication.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_have_sse2.disabled" description="MBEDTLS_HAVE_SSE2" display="Platform|MBEDTLS_HAVE_SSE2" id="config.driver.psa_crypto.mbedtls_have_sse2">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_have_sse2.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_have_sse2.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_have_time.disabled" description="MBEDTLS_HAVE_TIME" display="Platform|MBEDTLS_HAVE_TIME" id="config.driver.psa_crypto.mbedtls_have_time">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_have_time.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_have_time.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_have_time_date.disabled" description="MBEDTLS_HAVE_TIME_DATE" display="Platform|MBEDTLS_HAVE_TIME_DATE" id="config.driver.psa_crypto.mbedtls_have_time_date">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_have_time_date.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_have_time_date.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_memory.enabled" description="MBEDTLS_PLATFORM_MEMORY" display="Platform|MBEDTLS_PLATFORM_MEMORY" id="config.driver.psa_crypto.mbedtls_platform_memory">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_memory.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_memory.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_no_std_functions.disabled" description="MBEDTLS_PLATFORM_NO_STD_FUNCTIONS" display="Platform|MBEDTLS_PLATFORM_NO_STD_FUNCTIONS" id="config.driver.psa_crypto.mbedtls_platform_no_std_functions">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_no_std_functions.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_no_std_functions.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_setbuf_alt.disabled" description="MBEDTLS_PLATFORM_SETBUF_ALT" display="Platform|Alternate|MBEDTLS_PLATFORM_SETBUF_ALT" id="config.driver.psa_crypto.mbedtls_platform_setbuf_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_setbuf_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_setbuf_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_exit_alt.disabled" description="MBEDTLS_PLATFORM_EXIT_ALT" display="Platform|Alternate|MBEDTLS_PLATFORM_EXIT_ALT" id="config.driver.psa_crypto.mbedtls_platform_exit_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_exit_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_exit_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_time_alt.disabled" description="MBEDTLS_PLATFORM_TIME_ALT" display="Platform|Alternate|MBEDTLS_PLATFORM_TIME_ALT" id="config.driver.psa_crypto.mbedtls_platform_time_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_time_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_time_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_fprintf_alt.disabled" description="MBEDTLS_PLATFORM_FPRINTF_ALT" display="Platform|Alternate|MBEDTLS_PLATFORM_FPRINTF_ALT" id="config.driver.psa_crypto.mbedtls_platform_fprintf_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_fprintf_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_fprintf_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_printf_alt.disabled" description="MBEDTLS_PLATFORM_PRINTF_ALT" display="Platform|Alternate|MBEDTLS_PLATFORM_PRINTF_ALT" id="config.driver.psa_crypto.mbedtls_platform_printf_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_printf_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_printf_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_snprintf_alt.disabled" description="MBEDTLS_PLATFORM_SNPRINTF_ALT" display="Platform|Alternate|MBEDTLS_PLATFORM_SNPRINTF_ALT" id="config.driver.psa_crypto.mbedtls_platform_snprintf_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_snprintf_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_snprintf_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_vsnprintf_alt.disabled" description="MBEDTLS_PLATFORM_VSNPRINTF_ALT" display="Platform|Alternate|MBEDTLS_PLATFORM_VSNPRINTF_ALT" id="config.driver.psa_crypto.mbedtls_platform_vsnprintf_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_vsnprintf_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_vsnprintf_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_nv_seed_alt.disabled" description="MBEDTLS_PLATFORM_NV_SEED_ALT" display="Platform|Alternate|MBEDTLS_PLATFORM_NV_SEED_ALT" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.psa_crypto_secure.disabled" description="PSA_CRYPTO_SECURE" display="General|PSA_CRYPTO_SECURE" id="config.driver.psa_crypto.psa_crypto_secure">
            <option display="Define" id="config.driver.psa_crypto.psa_crypto_secure.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.psa_crypto_secure.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_deprecated_warning.disabled" description="MBEDTLS_DEPRECATED_WARNING" display="General|MBEDTLS_DEPRECATED_WARNING" id="config.driver.psa_crypto.mbedtls_deprecated_warning">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_deprecated_warning.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_deprecated_warning.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_deprecated_removed.enabled" description="MBEDTLS_DEPRECATED_REMOVED" display="General|MBEDTLS_DEPRECATED_REMOVED" id="config.driver.psa_crypto.mbedtls_deprecated_removed">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_deprecated_removed.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_deprecated_removed.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_timing_alt.disabled" description="MBEDTLS_TIMING_ALT" display="Platform|MBEDTLS_TIMING_ALT" id="config.driver.psa_crypto.mbedtls_timing_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_timing_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_timing_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_aria_alt.disabled" description="MBEDTLS_ARIA_ALT" display="Cipher|Alternate|MBEDTLS_ARIA_ALT" id="config.driver.psa_crypto.mbedtls_aria_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_aria_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_aria_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_camellia_alt.disabled" description="MBEDTLS_CAMELLIA_ALT" display="Cipher|Alternate|MBEDTLS_CAMELLIA_ALT" id="config.driver.psa_crypto.mbedtls_camellia_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_camellia_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_camellia_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ccm_alt.disabled" description="MBEDTLS_CCM_ALT" display="Cipher|Alternate|MBEDTLS_CCM_ALT" id="config.driver.psa_crypto.mbedtls_ccm_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ccm_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ccm_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_chacha20_alt.disabled" description="MBEDTLS_CHACHA20_ALT" display="Cipher|Alternate|MBEDTLS_CHACHA20_ALT" id="config.driver.psa_crypto.mbedtls_chacha20_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_chacha20_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_chacha20_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_chachapoly_alt.disabled" description="MBEDTLS_CHACHAPOLY_ALT" display="Cipher|Alternate|MBEDTLS_CHACHAPOLY_ALT" id="config.driver.psa_crypto.mbedtls_chachapoly_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_chachapoly_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_chachapoly_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cmac_alt.disabled" description="MBEDTLS_CMAC_ALT" display="Cipher|Alternate|MBEDTLS_CMAC_ALT" id="config.driver.psa_crypto.mbedtls_cmac_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cmac_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cmac_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_des_alt.disabled" description="MBEDTLS_DES_ALT" display="Cipher|Alternate|MBEDTLS_DES_ALT" id="config.driver.psa_crypto.mbedtls_des_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_des_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_des_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_dhm_alt.disabled" description="MBEDTLS_DHM_ALT" display="Public Key Cryptography (PKC)|DHM|Alternate|MBEDTLS_DHM_ALT" id="config.driver.psa_crypto.mbedtls_dhm_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_dhm_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_dhm_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecjpake_alt.disabled" description="MBEDTLS_ECJPAKE_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECJPAKE_ALT" id="config.driver.psa_crypto.mbedtls_ecjpake_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecjpake_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecjpake_alt.disabled" value="0" />
        </property>
        <property default="" description="MBEDTLS_GCM_ALT" display="Cipher|Alternate|MBEDTLS_GCM_ALT" id="config.driver.psa_crypto.mbedtls_gcm_alt">
            <select enum="enum.mcu.psa_crypto.aes_gcm_alt" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_nist_kw_alt.disabled" description="MBEDTLS_NIST_KW_ALT" display="Cipher|Alternate|MBEDTLS_NIST_KW_ALT" id="config.driver.psa_crypto.mbedtls_nist_kw_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_nist_kw_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_nist_kw_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_md5_alt.disabled" description="MBEDTLS_MD5_ALT" display="Hash|Alternate|MBEDTLS_MD5_ALT" id="config.driver.psa_crypto.mbedtls_md5_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_md5_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_md5_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_poly1305_alt.disabled" description="MBEDTLS_POLY1305_ALT" display="Message Authentication Code (MAC)|Alternate|MBEDTLS_POLY1305_ALT" id="config.driver.psa_crypto.mbedtls_poly1305_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_poly1305_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_poly1305_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ripemd160_alt.disabled" description="MBEDTLS_RIPEMD160_ALT" display="Hash|Alternate|MBEDTLS_RIPEMD160_ALT" id="config.driver.psa_crypto.mbedtls_ripemd160_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ripemd160_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ripemd160_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha1_alt.disabled" description="MBEDTLS_SHA1_ALT" display="Hash|Alternate|MBEDTLS_SHA1_ALT" id="config.driver.psa_crypto.mbedtls_sha1_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha1_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha1_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha512_alt.disabled" description="MBEDTLS_SHA512_ALT" display="Hash|Alternate|MBEDTLS_SHA512_ALT" id="config.driver.psa_crypto.mbedtls_sha512_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha512_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha512_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_md5_process_alt.disabled" description="MBEDTLS_MD5_PROCESS_ALT" display="Hash|Alternate|MBEDTLS_MD5_PROCESS_ALT" id="config.driver.psa_crypto.mbedtls_md5_process_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_md5_process_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_md5_process_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ripemd160_process_alt.disabled" description="MBEDTLS_RIPEMD160_PROCESS_ALT" display="Hash|Alternate|MBEDTLS_RIPEMD160_PROCESS_ALT" id="config.driver.psa_crypto.mbedtls_ripemd160_process_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ripemd160_process_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ripemd160_process_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha1_process_alt.disabled" description="MBEDTLS_SHA1_PROCESS_ALT" display="Hash|Alternate|MBEDTLS_SHA1_PROCESS_ALT" id="config.driver.psa_crypto.mbedtls_sha1_process_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha1_process_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha1_process_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha512_process_alt.disabled" description="MBEDTLS_SHA512_PROCESS_ALT" display="Hash|Alternate|MBEDTLS_SHA512_PROCESS_ALT" id="config.driver.psa_crypto.mbedtls_sha512_process_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha512_process_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha512_process_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_des_setkey_alt.disabled" description="MBEDTLS_DES_SETKEY_ALT" display="Cipher|Alternate|MBEDTLS_DES_SETKEY_ALT" id="config.driver.psa_crypto.mbedtls_des_setkey_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_des_setkey_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_des_setkey_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_des_crypt_ecb_alt.disabled" description="MBEDTLS_DES_CRYPT_ECB_ALT" display="Cipher|Alternate|MBEDTLS_DES_CRYPT_ECB_ALT" id="config.driver.psa_crypto.mbedtls_des_crypt_ecb_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_des_crypt_ecb_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_des_crypt_ecb_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_des3_crypt_ecb_alt.disabled" description="MBEDTLS_DES3_CRYPT_ECB_ALT" display="Cipher|Alternate|MBEDTLS_DES3_CRYPT_ECB_ALT" id="config.driver.psa_crypto.mbedtls_des3_crypt_ecb_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_des3_crypt_ecb_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_des3_crypt_ecb_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecdh_gen_public_alt.disabled" description="MBEDTLS_ECDH_GEN_PUBLIC_ALT" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECDH_GEN_PUBLIC_ALT" id="config.driver.psa_crypto.mbedtls_ecdh_gen_public_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecdh_gen_public_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecdh_gen_public_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecdh_compute_shared_alt.disabled" description="MBEDTLS_ECDH_COMPUTE_SHARED_ALT" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECDH_COMPUTE_SHARED_ALT" id="config.driver.psa_crypto.mbedtls_ecdh_compute_shared_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecdh_compute_shared_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecdh_compute_shared_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecdsa_genkey_alt.disabled" description="MBEDTLS_ECDSA_GENKEY_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECDSA_GENKEY_ALT" id="config.driver.psa_crypto.mbedtls_ecdsa_genkey_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecdsa_genkey_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecdsa_genkey_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_internal_alt.disabled" description="MBEDTLS_ECP_INTERNAL_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECP_INTERNAL_ALT" id="config.driver.psa_crypto.mbedtls_ecp_internal_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_internal_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_internal_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_no_fallback.disabled" description="MBEDTLS_ECP_NO_FALLBACK" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECP_NO_FALLBACK" id="config.driver.psa_crypto.mbedtls_ecp_no_fallback">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_no_fallback.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_no_fallback.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_randomize_jac_alt.disabled" description="MBEDTLS_ECP_RANDOMIZE_JAC_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECP_RANDOMIZE_JAC_ALT" id="config.driver.psa_crypto.mbedtls_ecp_randomize_jac_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_randomize_jac_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_randomize_jac_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_add_mixed_alt.disabled" description="MBEDTLS_ECP_ADD_MIXED_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECP_ADD_MIXED_ALT" id="config.driver.psa_crypto.mbedtls_ecp_add_mixed_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_add_mixed_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_add_mixed_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_double_jac_alt.disabled" description="MBEDTLS_ECP_DOUBLE_JAC_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECP_DOUBLE_JAC_ALT" id="config.driver.psa_crypto.mbedtls_ecp_double_jac_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_double_jac_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_double_jac_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_normalize_jac_many_alt.disabled" description="MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT" id="config.driver.psa_crypto.mbedtls_ecp_normalize_jac_many_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_normalize_jac_many_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_normalize_jac_many_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_normalize_jac_alt.disabled" description="MBEDTLS_ECP_NORMALIZE_JAC_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECP_NORMALIZE_JAC_ALT" id="config.driver.psa_crypto.mbedtls_ecp_normalize_jac_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_normalize_jac_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_normalize_jac_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_double_add_mxz_alt.disabled" description="MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT" id="config.driver.psa_crypto.mbedtls_ecp_double_add_mxz_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_double_add_mxz_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_double_add_mxz_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_randomize_mxz_alt.disabled" description="MBEDTLS_ECP_RANDOMIZE_MXZ_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECP_RANDOMIZE_MXZ_ALT" id="config.driver.psa_crypto.mbedtls_ecp_randomize_mxz_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_randomize_mxz_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_randomize_mxz_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_normalize_mxz_alt.disabled" description="MBEDTLS_ECP_NORMALIZE_MXZ_ALT" display="Public Key Cryptography (PKC)|ECC|Alternate|MBEDTLS_ECP_NORMALIZE_MXZ_ALT" id="config.driver.psa_crypto.mbedtls_ecp_normalize_mxz_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_normalize_mxz_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_normalize_mxz_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_aes_rom_tables.disabled" description="MBEDTLS_AES_ROM_TABLES" display="Cipher|AES|MBEDTLS_AES_ROM_TABLES" id="config.driver.psa_crypto.mbedtls_aes_rom_tables">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_aes_rom_tables.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_aes_rom_tables.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_aes_fewer_tables.disabled" description="MBEDTLS_AES_FEWER_TABLES" display="Cipher|AES|MBEDTLS_AES_FEWER_TABLES" id="config.driver.psa_crypto.mbedtls_aes_fewer_tables">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_aes_fewer_tables.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_aes_fewer_tables.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_camellia_small_memory.disabled" description="MBEDTLS_CAMELLIA_SMALL_MEMORY" display="Cipher|MBEDTLS_CAMELLIA_SMALL_MEMORY" id="config.driver.psa_crypto.mbedtls_camellia_small_memory">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_camellia_small_memory.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_camellia_small_memory.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_check_return_warning.disabled" description="MBEDTLS_CHECK_RETURN_WARNING" display="General|MBEDTLS_CHECK_RETURN_WARNING" id="config.driver.psa_crypto.mbedtls_check_return_warning">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_check_return_warning.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_check_return_warning.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_mode_cbc.enabled" description="MBEDTLS_CIPHER_MODE_CBC" display="Cipher|MBEDTLS_CIPHER_MODE_CBC" id="config.driver.psa_crypto.mbedtls_cipher_mode_cbc">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_mode_cbc.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_mode_cbc.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_mode_cfb.enabled" description="MBEDTLS_CIPHER_MODE_CFB" display="Cipher|MBEDTLS_CIPHER_MODE_CFB" id="config.driver.psa_crypto.mbedtls_cipher_mode_cfb">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_mode_cfb.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_mode_cfb.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_mode_ctr.enabled" description="MBEDTLS_CIPHER_MODE_CTR" display="Cipher|MBEDTLS_CIPHER_MODE_CTR" id="config.driver.psa_crypto.mbedtls_cipher_mode_ctr">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_mode_ctr.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_mode_ctr.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_mode_ofb.disabled" description="MBEDTLS_CIPHER_MODE_OFB" display="Cipher|MBEDTLS_CIPHER_MODE_OFB" id="config.driver.psa_crypto.mbedtls_cipher_mode_ofb">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_mode_ofb.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_mode_ofb.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_mode_xts.disabled" description="MBEDTLS_CIPHER_MODE_XTS" display="Cipher|MBEDTLS_CIPHER_MODE_XTS" id="config.driver.psa_crypto.mbedtls_cipher_mode_xts">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_mode_xts.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_mode_xts.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_null_cipher.disabled" description="MBEDTLS_CIPHER_NULL_CIPHER" display="Cipher|MBEDTLS_CIPHER_NULL_CIPHER" id="config.driver.psa_crypto.mbedtls_cipher_null_cipher">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_null_cipher.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_null_cipher.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_padding_pkcs7.enabled" description="MBEDTLS_CIPHER_PADDING_PKCS7" display="Cipher|MBEDTLS_CIPHER_PADDING_PKCS7" id="config.driver.psa_crypto.mbedtls_cipher_padding_pkcs7">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_padding_pkcs7.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_padding_pkcs7.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_padding_one_and_zeros.enabled" description="MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS" display="Cipher|MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS" id="config.driver.psa_crypto.mbedtls_cipher_padding_one_and_zeros">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_padding_one_and_zeros.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_padding_one_and_zeros.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_padding_zeros_and_len.enabled" description="MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN" display="Cipher|MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN" id="config.driver.psa_crypto.mbedtls_cipher_padding_zeros_and_len">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_padding_zeros_and_len.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_padding_zeros_and_len.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_padding_zeros.enabled" description="MBEDTLS_CIPHER_PADDING_ZEROS" display="Cipher|MBEDTLS_CIPHER_PADDING_ZEROS" id="config.driver.psa_crypto.mbedtls_cipher_padding_zeros">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_padding_zeros.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_padding_zeros.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_secp192r1_enabled.disabled" description="MBEDTLS_ECP_DP_SECP192R1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_SECP192R1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp192r1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp192r1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp192r1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_secp224r1_enabled.disabled" description="MBEDTLS_ECP_DP_SECP224R1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_SECP224R1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp224r1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp224r1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp224r1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_secp256r1_enabled.enabled" description="MBEDTLS_ECP_DP_SECP256R1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_SECP256R1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp256r1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp256r1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp256r1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_secp384r1_enabled.disabled" description="MBEDTLS_ECP_DP_SECP384R1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_SECP384R1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp384r1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp384r1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp384r1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_secp521r1_enabled.disabled" description="MBEDTLS_ECP_DP_SECP521R1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_SECP521R1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp521r1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp521r1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp521r1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_secp192k1_enabled.disabled" description="MBEDTLS_ECP_DP_SECP192K1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_SECP192K1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp192k1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp192k1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp192k1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_secp224k1_enabled.disabled" description="MBEDTLS_ECP_DP_SECP224K1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_SECP224K1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp224k1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp224k1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp224k1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_secp256k1_enabled.disabled" description="MBEDTLS_ECP_DP_SECP256K1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_SECP256K1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp256k1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp256k1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_secp256k1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_bp256r1_enabled.disabled" description="MBEDTLS_ECP_DP_BP256R1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_BP256R1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_bp256r1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_bp256r1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_bp256r1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_bp384r1_enabled.disabled" description="MBEDTLS_ECP_DP_BP384R1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_BP384R1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_bp384r1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_bp384r1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_bp384r1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_bp512r1_enabled.disabled" description="MBEDTLS_ECP_DP_BP512R1_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_BP512R1_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_bp512r1_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_bp512r1_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_bp512r1_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_curve25519_enabled.disabled" description="MBEDTLS_ECP_DP_CURVE25519_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_CURVE25519_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_curve25519_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_curve25519_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_curve25519_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_dp_curve448_enabled.disabled" description="MBEDTLS_ECP_DP_CURVE448_ENABLED" display="Public Key Cryptography (PKC)|ECC|Curves|MBEDTLS_ECP_DP_CURVE448_ENABLED" id="config.driver.psa_crypto.mbedtls_ecp_dp_curve448_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_dp_curve448_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_dp_curve448_enabled.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_nist_optim.disabled" description="MBEDTLS_ECP_NIST_OPTIM" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECP_NIST_OPTIM" id="config.driver.psa_crypto.mbedtls_ecp_nist_optim">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_nist_optim.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_nist_optim.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_restartable.disabled" description="MBEDTLS_ECP_RESTARTABLE" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECP_RESTARTABLE" id="config.driver.psa_crypto.mbedtls_ecp_restartable">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_restartable.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_restartable.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecdsa_deterministic.disabled" description="MBEDTLS_ECDSA_DETERMINISTIC" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECDSA_DETERMINISTIC" id="config.driver.psa_crypto.mbedtls_ecdsa_deterministic">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecdsa_deterministic.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecdsa_deterministic.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pk_parse_ec_extended.disabled" description="MBEDTLS_PK_PARSE_EC_EXTENDED" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_PK_PARSE_EC_EXTENDED" id="config.driver.psa_crypto.mbedtls_pk_parse_ec_extended">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pk_parse_ec_extended.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pk_parse_ec_extended.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_error_strerror_dummy.enabled" description="MBEDTLS_ERROR_STRERROR_DUMMY" display="General|MBEDTLS_ERROR_STRERROR_DUMMY" id="config.driver.psa_crypto.mbedtls_error_strerror_dummy">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_error_strerror_dummy.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_error_strerror_dummy.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_genprime.enabled" description="MBEDTLS_GENPRIME" display="Public Key Cryptography (PKC)|MBEDTLS_GENPRIME" id="config.driver.psa_crypto.mbedtls_genprime">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_genprime.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_genprime.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_fs_io.disabled" description="MBEDTLS_FS_IO" display="Storage|MBEDTLS_FS_IO" id="config.driver.psa_crypto.mbedtls_fs_io">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_fs_io.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_fs_io.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_no_default_entropy_sources.disabled" description="MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES" display="RNG|MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES" id="config.driver.psa_crypto.mbedtls_no_default_entropy_sources">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_no_default_entropy_sources.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_no_default_entropy_sources.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_no_platform_entropy.enabled" description="MBEDTLS_NO_PLATFORM_ENTROPY" display="Platform|MBEDTLS_NO_PLATFORM_ENTROPY" id="config.driver.psa_crypto.mbedtls_no_platform_entropy">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_no_platform_entropy.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_no_platform_entropy.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_entropy_force_sha256.disabled" description="MBEDTLS_ENTROPY_FORCE_SHA256" display="RNG|MBEDTLS_ENTROPY_FORCE_SHA256" id="config.driver.psa_crypto.mbedtls_entropy_force_sha256">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_entropy_force_sha256.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_entropy_force_sha256.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_entropy_nv_seed.disabled" description="MBEDTLS_ENTROPY_NV_SEED" display="RNG|MBEDTLS_ENTROPY_NV_SEED" id="config.driver.psa_crypto.mbedtls_entropy_nv_seed">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_entropy_nv_seed.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_entropy_nv_seed.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_psa_crypto_key_file_id_encodes_owner.disabled" description="MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER" display="Key Configuration|MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER" id="config.driver.psa_crypto.mbedtls_psa_crypto_key_file_id_encodes_owner">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_psa_crypto_key_file_id_encodes_owner.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_psa_crypto_key_file_id_encodes_owner.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_memory_debug.disabled" description="MBEDTLS_MEMORY_DEBUG" display="General|MBEDTLS_MEMORY_DEBUG" id="config.driver.psa_crypto.mbedtls_memory_debug">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_memory_debug.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_memory_debug.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_memory_backtrace.disabled" description="MBEDTLS_MEMORY_BACKTRACE" display="General|MBEDTLS_MEMORY_BACKTRACE" id="config.driver.psa_crypto.mbedtls_memory_backtrace">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_memory_backtrace.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_memory_backtrace.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pk_rsa_alt_support.disabled" description="MBEDTLS_PK_RSA_ALT_SUPPORT" display="Public Key Cryptography (PKC)|RSA|MBEDTLS_PK_RSA_ALT_SUPPORT" id="config.driver.psa_crypto.mbedtls_pk_rsa_alt_support">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pk_rsa_alt_support.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pk_rsa_alt_support.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pkcs1_v15.enabled" description="MBEDTLS_PKCS1_V15" display="Public Key Cryptography (PKC)|MBEDTLS_PKCS1_V15" id="config.driver.psa_crypto.mbedtls_pkcs1_v15">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pkcs1_v15.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pkcs1_v15.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pkcs1_v21.enabled" description="MBEDTLS_PKCS1_V21" display="Public Key Cryptography (PKC)|MBEDTLS_PKCS1_V21" id="config.driver.psa_crypto.mbedtls_pkcs1_v21">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pkcs1_v21.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pkcs1_v21.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_crypto_builtin_keys.disabled" description="MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS" display="Key Configuration|MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS" id="config.driver.psa_crypto.mbedtls_crypto_builtin_keys">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_crypto_builtin_keys.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_crypto_builtin_keys.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_psa_crypto_client.disabled" description="MBEDTLS_PSA_CRYPTO_CLIENT" display="General|MBEDTLS_PSA_CRYPTO_CLIENT" id="config.driver.psa_crypto.mbedtls_psa_crypto_client">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_psa_crypto_client.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_psa_crypto_client.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_crypto_external_rng.disabled" description="MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG" display="RNG|MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG" id="config.driver.psa_crypto.mbedtls_crypto_external_rng">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_crypto_external_rng.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_crypto_external_rng.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_psa_crypto_spm.disabled" description="MBEDTLS_PSA_CRYPTO_SPM" display="General|MBEDTLS_PSA_CRYPTO_SPM" id="config.driver.psa_crypto.mbedtls_psa_crypto_spm">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_psa_crypto_spm.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_psa_crypto_spm.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_psa_inject_entropy.disabled" description="MBEDTLS_PSA_INJECT_ENTROPY" display="RNG|MBEDTLS_PSA_INJECT_ENTROPY" id="config.driver.psa_crypto.mbedtls_psa_inject_entropy">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_psa_inject_entropy.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_psa_inject_entropy.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_rsa_no_crt.enabled" description="MBEDTLS_RSA_NO_CRT" display="Public Key Cryptography (PKC)|RSA|MBEDTLS_RSA_NO_CRT" id="config.driver.psa_crypto.mbedtls_rsa_no_crt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_rsa_no_crt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_rsa_no_crt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_self_test.disabled" description="MBEDTLS_SELF_TEST" display="General|MBEDTLS_SELF_TEST" id="config.driver.psa_crypto.mbedtls_self_test">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_self_test.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_self_test.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha256_smaller.disabled" description="MBEDTLS_SHA256_SMALLER" display="Hash|MBEDTLS_SHA256_SMALLER" id="config.driver.psa_crypto.mbedtls_sha256_smaller">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha256_smaller.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha256_smaller.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha512_smaller.disabled" description="MBEDTLS_SHA512_SMALLER" display="Hash|MBEDTLS_SHA512_SMALLER" id="config.driver.psa_crypto.mbedtls_sha512_smaller">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha512_smaller.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha512_smaller.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_threading_alt.enabled" description="MBEDTLS_THREADING_ALT" display="General|MBEDTLS_THREADING_ALT" id="config.driver.psa_crypto.mbedtls_threading_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_threading_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_threading_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_threading_pthread.disabled" description="MBEDTLS_THREADING_PTHREAD" display="General|MBEDTLS_THREADING_PTHREAD" id="config.driver.psa_crypto.mbedtls_threading_pthread">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_threading_pthread.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_threading_pthread.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_use_psa_crypto.disabled" description="MBEDTLS_USE_PSA_CRYPTO" display="General|MBEDTLS_USE_PSA_CRYPTO" id="config.driver.psa_crypto.mbedtls_use_psa_crypto">
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_use_psa_crypto.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_version_features.enabled" description="MBEDTLS_VERSION_FEATURES" display="General|MBEDTLS_VERSION_FEATURES" id="config.driver.psa_crypto.mbedtls_version_features">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_version_features.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_version_features.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_aes_c.enabled" description="MBEDTLS_AES_C" display="Cipher|MBEDTLS_AES_C" id="config.driver.psa_crypto.mbedtls_aes_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_aes_c.enabled" value="1" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_asn1_parse_c.enabled" description="MBEDTLS_ASN1_PARSE_C" display="Public Key Cryptography (PKC)|MBEDTLS_ASN1_PARSE_C" id="config.driver.psa_crypto.mbedtls_asn1_parse_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_asn1_parse_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_asn1_parse_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_asn1_write_c.enabled" description="MBEDTLS_ASN1_WRITE_C" display="Public Key Cryptography (PKC)|MBEDTLS_ASN1_WRITE_C" id="config.driver.psa_crypto.mbedtls_asn1_write_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_asn1_write_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_asn1_write_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_base64_c.enabled" description="MBEDTLS_BASE64_C" display="Public Key Cryptography (PKC)|MBEDTLS_BASE64_C" id="config.driver.psa_crypto.mbedtls_base64_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_base64_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_base64_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_bignum_c.enabled" description="MBEDTLS_BIGNUM_C" display="Public Key Cryptography (PKC)|MBEDTLS_BIGNUM_C" id="config.driver.psa_crypto.mbedtls_bignum_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_bignum_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_bignum_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_camellia_c.disabled" description="MBEDTLS_CAMELLIA_C" display="Cipher|MBEDTLS_CAMELLIA_C" id="config.driver.psa_crypto.mbedtls_camellia_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_camellia_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_camellia_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_aria_c.disabled" description="MBEDTLS_ARIA_C" display="Cipher|MBEDTLS_ARIA_C" id="config.driver.psa_crypto.mbedtls_aria_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_aria_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_aria_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ccm_c.enabled" description="MBEDTLS_CCM_C" display="Cipher|MBEDTLS_CCM_C" id="config.driver.psa_crypto.mbedtls_ccm_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ccm_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ccm_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_chacha20_c.disabled" description="MBEDTLS_CHACHA20_C" display="Cipher|MBEDTLS_CHACHA20_C" id="config.driver.psa_crypto.mbedtls_chacha20_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_chacha20_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_chacha20_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_chachapoly_c.disabled" description="MBEDTLS_CHACHAPOLY_C" display="Cipher|MBEDTLS_CHACHAPOLY_C" id="config.driver.psa_crypto.mbedtls_chachapoly_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_chachapoly_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_chachapoly_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cipher_c.enabled" description="MBEDTLS_CIPHER_C" display="Cipher|MBEDTLS_CIPHER_C" id="config.driver.psa_crypto.mbedtls_cipher_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cipher_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cipher_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_cmac_c.disabled" description="MBEDTLS_CMAC_C" display="Message Authentication Code (MAC)|MBEDTLS_CMAC_C" id="config.driver.psa_crypto.mbedtls_cmac_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_cmac_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_cmac_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ctr_drbg_c.enabled" description="MBEDTLS_CTR_DRBG_C" display="RNG|MBEDTLS_CTR_DRBG_C" id="config.driver.psa_crypto.mbedtls_ctr_drbg_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ctr_drbg_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ctr_drbg_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ctr_drbg_c_alt.enabled" description="MBEDTLS_CTR_DRBG_C_ALT" display="RNG|MBEDTLS_CTR_DRBG_C_ALT" id="config.driver.psa_crypto.mbedtls_ctr_drbg_c_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ctr_drbg_c_alt.enabled" value="1" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_des_c.disabled" description="MBEDTLS_DES_C" display="Cipher|MBEDTLS_DES_C" id="config.driver.psa_crypto.mbedtls_des_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_des_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_des_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_dhm_c.disabled" description="MBEDTLS_DHM_C" display="Public Key Cryptography (PKC)|DHM|MBEDTLS_DHM_C" id="config.driver.psa_crypto.mbedtls_dhm_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_dhm_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_dhm_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecdh_c.disabled" description="MBEDTLS_ECDH_C" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECDH_C" id="config.driver.psa_crypto.mbedtls_ecdh_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecdh_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecdh_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecdsa_c.enabled" description="MBEDTLS_ECDSA_C" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECDSA_C" id="config.driver.psa_crypto.mbedtls_ecdsa_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecdsa_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecdsa_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecp_c.enabled" description="MBEDTLS_ECP_C" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECP_C" id="config.driver.psa_crypto.mbedtls_ecp_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecjpake_c.disabled" description="MBEDTLS_ECJPAKE_C" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECJPAKE_C" id="config.driver.psa_crypto.mbedtls_ecjpake_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecjpake_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecjpake_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_entropy_c.enabled" description="MBEDTLS_ENTROPY_C" display="Platform|MBEDTLS_ENTROPY_C" id="config.driver.psa_crypto.mbedtls_entropy_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_entropy_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_entropy_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_error_c.enabled" description="MBEDTLS_ERROR_C" display="General|MBEDTLS_ERROR_C" id="config.driver.psa_crypto.mbedtls_error_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_error_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_error_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_gcm_c.enabled" description="MBEDTLS_GCM_C" display="Cipher|MBEDTLS_GCM_C" id="config.driver.psa_crypto.mbedtls_gcm_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_gcm_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_gcm_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_hkdf_c.enabled" description="MBEDTLS_HKDF_C" display="Message Authentication Code (MAC)|MBEDTLS_HKDF_C" id="config.driver.psa_crypto.mbedtls_hkdf_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_hkdf_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_hkdf_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_hmac_drbg_c.disabled" description="MBEDTLS_HMAC_DRBG_C" display="Message Authentication Code (MAC)|MBEDTLS_HMAC_DRBG_C" id="config.driver.psa_crypto.mbedtls_hmac_drbg_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_hmac_drbg_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_hmac_drbg_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_nist_kw_c.disabled" description="MBEDTLS_NIST_KW_C" display="Cipher|MBEDTLS_NIST_KW_C" id="config.driver.psa_crypto.mbedtls_nist_kw_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_nist_kw_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_nist_kw_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_md_c.enabled" description="MBEDTLS_MD_C" display="Hash|MBEDTLS_MD_C" id="config.driver.psa_crypto.mbedtls_md_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_md_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_md_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_md5_c.enabled" description="MBEDTLS_MD5_C" display="Hash|MBEDTLS_MD5_C" id="config.driver.psa_crypto.mbedtls_md5_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_md5_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_md5_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_memory_buffer_alloc_c.disabled" description="MBEDTLS_MEMORY_BUFFER_ALLOC_C" display="General|MBEDTLS_MEMORY_BUFFER_ALLOC_C" id="config.driver.psa_crypto.mbedtls_memory_buffer_alloc_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_memory_buffer_alloc_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_memory_buffer_alloc_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_oid_c.enabled" description="MBEDTLS_OID_C" display="Public Key Cryptography (PKC)|MBEDTLS_OID_C" id="config.driver.psa_crypto.mbedtls_oid_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_oid_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_oid_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pem_parse_c.enabled" description="MBEDTLS_PEM_PARSE_C" display="Public Key Cryptography (PKC)|MBEDTLS_PEM_PARSE_C" id="config.driver.psa_crypto.mbedtls_pem_parse_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pem_parse_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pem_parse_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pem_write_c.enabled" description="MBEDTLS_PEM_WRITE_C" display="Public Key Cryptography (PKC)|MBEDTLS_PEM_WRITE_C" id="config.driver.psa_crypto.mbedtls_pem_write_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pem_write_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pem_write_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pk_c.enabled" description="MBEDTLS_PK_C" display="Public Key Cryptography (PKC)|MBEDTLS_PK_C" id="config.driver.psa_crypto.mbedtls_pk_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pk_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pk_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pk_parse_c.enabled" description="MBEDTLS_PK_PARSE_C" display="Public Key Cryptography (PKC)|MBEDTLS_PK_PARSE_C" id="config.driver.psa_crypto.mbedtls_pk_parse_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pk_parse_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pk_parse_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pk_write_c.enabled" description="MBEDTLS_PK_WRITE_C" display="Public Key Cryptography (PKC)|MBEDTLS_PK_WRITE_C" id="config.driver.psa_crypto.mbedtls_pk_write_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pk_write_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pk_write_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pkcs5_c.enabled" description="MBEDTLS_PKCS5_C" display="Public Key Cryptography (PKC)|MBEDTLS_PKCS5_C" id="config.driver.psa_crypto.mbedtls_pkcs5_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pkcs5_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pkcs5_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_pkcs12_c.enabled" description="MBEDTLS_PKCS12_C" display="Public Key Cryptography (PKC)|MBEDTLS_PKCS12_C" id="config.driver.psa_crypto.mbedtls_pkcs12_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_pkcs12_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_pkcs12_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_platform_c.enabled" description="MBEDTLS_PLATFORM_C" display="Platform|MBEDTLS_PLATFORM_C" id="config.driver.psa_crypto.mbedtls_platform_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_poly1305_c.disabled" description="MBEDTLS_POLY1305_C" display="Message Authentication Code (MAC)|MBEDTLS_POLY1305_C" id="config.driver.psa_crypto.mbedtls_poly1305_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_poly1305_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_poly1305_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_psa_crypto_c.enabled" description="MBEDTLS_PSA_CRYPTO_C" display="General|MBEDTLS_PSA_CRYPTO_C" id="config.driver.psa_crypto.mbedtls_psa_crypto_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_psa_crypto_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_psa_crypto_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_psa_crypto_se_c.disabled" description="MBEDTLS_PSA_CRYPTO_SE_C" display="General|MBEDTLS_PSA_CRYPTO_SE_C" id="config.driver.psa_crypto.mbedtls_psa_crypto_se_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_psa_crypto_se_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_psa_crypto_se_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_psa_crypto_storage_c.disabled" description="MBEDTLS_PSA_CRYPTO_STORAGE_C" display="Storage|MBEDTLS_PSA_CRYPTO_STORAGE_C" id="config.driver.psa_crypto.mbedtls_psa_crypto_storage_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_psa_crypto_storage_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_psa_crypto_storage_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_psa_its_file_c.disabled" description="MBEDTLS_PSA_ITS_FILE_C" display="Storage|MBEDTLS_PSA_ITS_FILE_C" id="config.driver.psa_crypto.mbedtls_psa_its_file_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_psa_its_file_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_psa_its_file_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ripemd160_c.disabled" description="MBEDTLS_RIPEMD160_C" display="Hash|MBEDTLS_RIPEMD160_C" id="config.driver.psa_crypto.mbedtls_ripemd160_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ripemd160_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ripemd160_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_rsa_c.enabled" description="MBEDTLS_RSA_C" display="Public Key Cryptography (PKC)|RSA|MBEDTLS_RSA_C" id="config.driver.psa_crypto.mbedtls_rsa_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_rsa_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_rsa_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha1_c.enabled" description="MBEDTLS_SHA1_C" display="Hash|MBEDTLS_SHA1_C" id="config.driver.psa_crypto.mbedtls_sha1_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha1_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha1_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha224_c.enabled" description="MBEDTLS_SHA224_C" display="Hash|MBEDTLS_SHA224_C" id="config.driver.psa_crypto.mbedtls_sha224_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha224_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha224_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha256_c.enabled" description="MBEDTLS_SHA256_C" display="Hash|MBEDTLS_SHA256_C" id="config.driver.psa_crypto.mbedtls_sha256_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha256_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha256_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha384_c.disabled" description="MBEDTLS_SHA384_C" display="Hash|MBEDTLS_SHA384_C" id="config.driver.psa_crypto.mbedtls_sha384_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha384_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha384_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_sha512_c.disabled" description="MBEDTLS_SHA512_C" display="Hash|MBEDTLS_SHA512_C" id="config.driver.psa_crypto.mbedtls_sha512_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_sha512_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_sha512_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_threading_c.enabled" description="MBEDTLS_THREADING_C" display="General|MBEDTLS_THREADING_C" id="config.driver.psa_crypto.mbedtls_threading_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_threading_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_threading_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_timing_c.disabled" description="MBEDTLS_TIMING_C" display="General|MBEDTLS_TIMING_C" id="config.driver.psa_crypto.mbedtls_timing_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_timing_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_timing_c.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_version_c.enabled" description="MBEDTLS_VERSION_C" display="General|MBEDTLS_VERSION_C" id="config.driver.psa_crypto.mbedtls_version_c">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_version_c.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_version_c.disabled" value="0" />
        </property>

        <property default="config.driver.psa_crypto.mbedtls_mpi_window_size.disabled" description="MBEDTLS_MPI_WINDOW_SIZE" display="Public Key Cryptography (PKC)|MBEDTLS_MPI_WINDOW_SIZE" id="config.driver.psa_crypto.mbedtls_mpi_window_size">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_mpi_window_size.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_mpi_window_size.disabled" value="0" />
        </property>
        <property default="6" description="MBEDTLS_MPI_WINDOW_SIZE value" display="Public Key Cryptography (PKC)|MBEDTLS_MPI_WINDOW_SIZE value" id="config.driver.psa_crypto.mbedtls_mpi_window_size_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_mpi_max_size.disabled" description="MBEDTLS_MPI_MAX_SIZE" display="Public Key Cryptography (PKC)|MBEDTLS_MPI_MAX_SIZE" id="config.driver.psa_crypto.mbedtls_mpi_max_size">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_mpi_max_size.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_mpi_max_size.disabled" value="0" />
        </property>
        <property default="1024" description="MBEDTLS_MPI_MAX_SIZE value" display="Public Key Cryptography (PKC)|MBEDTLS_MPI_MAX_SIZE value" id="config.driver.psa_crypto.mbedtls_mpi_max_size_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_ctr_drbg_entropy_len.disabled" description="RNG|MBEDTLS_CTR_DRBG_ENTROPY_LEN" display="RNG|MBEDTLS_CTR_DRBG_ENTROPY_LEN" id="config.driver.psa_crypto.mbedtls_ctr_drbg_entropy_len">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ctr_drbg_entropy_len.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ctr_drbg_entropy_len.disabled" value="0" />
        </property>
        <property default="48" description="RNG value|MBEDTLS_CTR_DRBG_ENTROPY_LEN" display="RNG|MBEDTLS_CTR_DRBG_ENTROPY_LEN value" id="config.driver.psa_crypto.mbedtls_ctr_drbg_entropy_len_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_ctr_drbg_reseed_interval.disabled" description="RNG|MBEDTLS_CTR_DRBG_RESEED_INTERVAL" display="RNG|MBEDTLS_CTR_DRBG_RESEED_INTERVAL" id="config.driver.psa_crypto.mbedtls_ctr_drbg_reseed_interval">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ctr_drbg_reseed_interval.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ctr_drbg_reseed_interval.disabled" value="0" />
        </property>
        <property default="10000" description="RNG value|MBEDTLS_CTR_DRBG_RESEED_INTERVAL" display="RNG|MBEDTLS_CTR_DRBG_RESEED_INTERVAL value" id="config.driver.psa_crypto.mbedtls_ctr_drbg_reseed_interval_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_ctr_drbg_max_input.disabled" description="MBEDTLS_CTR_DRBG_MAX_INPUT" display="RNG|MBEDTLS_CTR_DRBG_MAX_INPUT" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_input">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_input.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_input.disabled" value="0" />
        </property>
        <property default="256" description="MBEDTLS_CTR_DRBG_MAX_INPUT value" display="RNG|MBEDTLS_CTR_DRBG_MAX_INPUT value" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_input_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_ctr_drbg_max_request.disabled" description="MBEDTLS_CTR_DRBG_MAX_REQUEST" display="RNG|MBEDTLS_CTR_DRBG_MAX_REQUEST" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_request">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_request.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_request.disabled" value="0" />
        </property>
        <property default="1024" description="MBEDTLS_CTR_DRBG_MAX_REQUEST value" display="RNG|MBEDTLS_CTR_DRBG_MAX_REQUEST value" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_request_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_ctr_drbg_max_seed_input.disabled" description="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT" display="RNG|MBEDTLS_CTR_DRBG_MAX_SEED_INPUT" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_seed_input">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_seed_input.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_seed_input.disabled" value="0" />
        </property>
        <property default="384" description="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT value" display="RNG|MBEDTLS_CTR_DRBG_MAX_SEED_INPUT value" id="config.driver.psa_crypto.mbedtls_ctr_drbg_max_seed_input_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_ctr_drbg_use_128_bit_key.disabled" description="MBEDTLS_CTR_DRBG_USE_128_BIT_KEY" display="RNG|MBEDTLS_CTR_DRBG_USE_128_BIT_KEY" id="config.driver.psa_crypto.mbedtls_ctr_drbg_use_128_bit_key">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ctr_drbg_use_128_bit_key.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ctr_drbg_use_128_bit_key.disabled" value="0" />
        </property>

        <property default="config.driver.psa_crypto.mbedtls_hmac_drbg_reseed_interval.disabled" description="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL" display="RNG|MBEDTLS_HMAC_DRBG_RESEED_INTERVAL" id="config.driver.psa_crypto.mbedtls_hmac_drbg_reseed_interval">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_hmac_drbg_reseed_interval.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_hmac_drbg_reseed_interval.disabled" value="0" />
        </property>
        <property default="10000" description="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL value" display="RNG|MBEDTLS_HMAC_DRBG_RESEED_INTERVAL value" id="config.driver.psa_crypto.mbedtls_hmac_drbg_reseed_interval_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_hmac_drbg_max_input.disabled" description="MBEDTLS_HMAC_DRBG_MAX_INPUT" display="RNG|MBEDTLS_HMAC_DRBG_MAX_INPUT" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_input">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_input.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_input.disabled" value="0" />
        </property>
        <property default="256" description="MBEDTLS_HMAC_DRBG_MAX_INPUT value" display="RNG|MBEDTLS_HMAC_DRBG_MAX_INPUT value" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_input_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_hmac_drbg_max_request.disabled" description="MBEDTLS_HMAC_DRBG_MAX_REQUEST" display="RNG|MBEDTLS_HMAC_DRBG_MAX_REQUEST" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_request">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_request.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_request.disabled" value="0" />
        </property>
        <property default="1024" description="MBEDTLS_HMAC_DRBG_MAX_REQUEST value" display="RNG|MBEDTLS_HMAC_DRBG_MAX_REQUEST value" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_request_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_hmac_drbg_max_seed_input.disabled" description="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT" display="RNG|MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_seed_input">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_seed_input.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_seed_input.disabled" value="0" />
        </property>
        <property default="384" description="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT value" display="RNG|MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT value" id="config.driver.psa_crypto.mbedtls_hmac_drbg_max_seed_input_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_ecp_window_size.disabled" description="MBEDTLS_ECP_WINDOW_SIZE" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECP_WINDOW_SIZE" id="config.driver.psa_crypto.mbedtls_ecp_window_size">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_window_size.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_window_size.disabled" value="0" />
        </property>
        <property default="6" description="MBEDTLS_ECP_WINDOW_SIZE value" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECP_WINDOW_SIZE value" id="config.driver.psa_crypto.mbedtls_ecp_window_size_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_ecp_fixed_point_optim.disabled" description="MBEDTLS_ECP_FIXED_POINT_OPTIM" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECP_FIXED_POINT_OPTIM" id="config.driver.psa_crypto.mbedtls_ecp_fixed_point_optim">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecp_fixed_point_optim.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecp_fixed_point_optim.disabled" value="0" />
        </property>
        <property default="1" description="MBEDTLS_ECP_FIXED_POINT_OPTIM value" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECP_FIXED_POINT_OPTIM value" id="config.driver.psa_crypto.mbedtls_ecp_fixed_point_optim_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_entropy_max_sources.disabled" description="MBEDTLS_ENTROPY_MAX_SOURCES" display="RNG|MBEDTLS_ENTROPY_MAX_SOURCES" id="config.driver.psa_crypto.mbedtls_entropy_max_sources">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_entropy_max_sources.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_entropy_max_sources.disabled" value="0" />
        </property>
        <property default="20" description="MBEDTLS_ENTROPY_MAX_SOURCES value" display="RNG|MBEDTLS_ENTROPY_MAX_SOURCES value" id="config.driver.psa_crypto.mbedtls_entropy_max_sources_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_entropy_max_gather.disabled" description="MBEDTLS_ENTROPY_MAX_GATHER" display="RNG|MBEDTLS_ENTROPY_MAX_GATHER" id="config.driver.psa_crypto.mbedtls_entropy_max_gather">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_entropy_max_gather.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_entropy_max_gather.disabled" value="0" />
        </property>
        <property default="128" description="MBEDTLS_ENTROPY_MAX_GATHER value" display="RNG|MBEDTLS_ENTROPY_MAX_GATHER value" id="config.driver.psa_crypto.mbedtls_entropy_max_gather_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_entropy_min_hardware.disabled" description="MBEDTLS_ENTROPY_MIN_HARDWARE" display="RNG|MBEDTLS_ENTROPY_MIN_HARDWARE" id="config.driver.psa_crypto.mbedtls_entropy_min_hardware">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_entropy_min_hardware.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_entropy_min_hardware.disabled" value="0" />
        </property>
        <property default="32" description="MBEDTLS_ENTROPY_MIN_HARDWARE value" display="RNG|MBEDTLS_ENTROPY_MIN_HARDWARE value" id="config.driver.psa_crypto.mbedtls_entropy_min_hardware_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_memory_align_multiple.disabled" description="MBEDTLS_MEMORY_ALIGN_MULTIPLE" display="General|MBEDTLS_MEMORY_ALIGN_MULTIPLE" id="config.driver.psa_crypto.mbedtls_memory_align_multiple">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_memory_align_multiple.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_memory_align_multiple.disabled" value="0" />
        </property>
        <property default="4" description="MBEDTLS_MEMORY_ALIGN_MULTIPLE value" display="General|MBEDTLS_MEMORY_ALIGN_MULTIPLE value" id="config.driver.psa_crypto.mbedtls_memory_align_multiple_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_calloc.disabled" description="MBEDTLS_PLATFORM_STD_CALLOC" display="Platform|MBEDTLS_PLATFORM_STD_CALLOC" id="config.driver.psa_crypto.mbedtls_platform_std_calloc">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_calloc.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_calloc.disabled" value="0" />
        </property>
        <property default="calloc" description="MBEDTLS_PLATFORM_STD_CALLOC value" display="Platform|MBEDTLS_PLATFORM_STD_CALLOC value" id="config.driver.psa_crypto.mbedtls_platform_std_calloc_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_free.disabled" description="MBEDTLS_PLATFORM_STD_FREE" display="Platform|MBEDTLS_PLATFORM_STD_FREE" id="config.driver.psa_crypto.mbedtls_platform_std_free">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_free.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_free.disabled" value="0" />
        </property>
        <property default="free" description="MBEDTLS_PLATFORM_STD_FREE value" display="Platform|MBEDTLS_PLATFORM_STD_FREE value" id="config.driver.psa_crypto.mbedtls_platform_std_free_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_setbuf.disabled" description="MBEDTLS_PLATFORM_STD_SETBUF" display="Platform|MBEDTLS_PLATFORM_STD_SETBUF" id="config.driver.psa_crypto.mbedtls_platform_std_setbuf">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_setbuf.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_setbuf.disabled" value="0" />
        </property>
        <property default="setbuf" description="MBEDTLS_PLATFORM_STD_SETBUF value" display="Platform|MBEDTLS_PLATFORM_STD_SETBUF value" id="config.driver.psa_crypto.mbedtls_platform_std_setbuf_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_exit.disabled" description="MBEDTLS_PLATFORM_STD_EXIT" display="Platform|MBEDTLS_PLATFORM_STD_EXIT" id="config.driver.psa_crypto.mbedtls_platform_std_exit">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_exit.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_exit.disabled" value="0" />
        </property>
        <property default="exit" description="MBEDTLS_PLATFORM_STD_EXIT value" display="Platform|MBEDTLS_PLATFORM_STD_EXIT value" id="config.driver.psa_crypto.mbedtls_platform_std_exit_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_time.disabled" description="MBEDTLS_PLATFORM_STD_TIME" display="Platform|MBEDTLS_PLATFORM_STD_TIME" id="config.driver.psa_crypto.mbedtls_platform_std_time">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_time.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_time.disabled" value="0" />
        </property>
        <property default="time" description="MBEDTLS_PLATFORM_STD_TIME value" display="Platform|MBEDTLS_PLATFORM_STD_TIME value" id="config.driver.psa_crypto.mbedtls_platform_std_time_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_fprintf.disabled" description="MBEDTLS_PLATFORM_STD_FPRINTF" display="Platform|MBEDTLS_PLATFORM_STD_FPRINTF" id="config.driver.psa_crypto.mbedtls_platform_std_fprintf">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_fprintf.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_fprintf.disabled" value="0" />
        </property>
        <property default="fprintf" description="MBEDTLS_PLATFORM_STD_FPRINTF value" display="Platform|MBEDTLS_PLATFORM_STD_FPRINTF value" id="config.driver.psa_crypto.mbedtls_platform_std_fprintf_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_printf.disabled" description="MBEDTLS_PLATFORM_STD_PRINTF" display="Platform|MBEDTLS_PLATFORM_STD_PRINTF" id="config.driver.psa_crypto.mbedtls_platform_std_printf">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_printf.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_printf.disabled" value="0" />
        </property>
        <property default="printf" description="MBEDTLS_PLATFORM_STD_PRINTF value" display="Platform|MBEDTLS_PLATFORM_STD_PRINTF value" id="config.driver.psa_crypto.mbedtls_platform_std_printf_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_snprintf.disabled" description="MBEDTLS_PLATFORM_STD_SNPRINTF" display="Platform|MBEDTLS_PLATFORM_STD_SNPRINTF" id="config.driver.psa_crypto.mbedtls_platform_std_snprintf">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_snprintf.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_snprintf.disabled" value="0" />
        </property>
        <property default="snprintf" description="MBEDTLS_PLATFORM_STD_SNPRINTF value" display="Platform|MBEDTLS_PLATFORM_STD_SNPRINTF value" id="config.driver.psa_crypto.mbedtls_platform_std_snprintf_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_exit_success.disabled" description="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS" display="Platform|MBEDTLS_PLATFORM_STD_EXIT_SUCCESS" id="config.driver.psa_crypto.mbedtls_platform_std_exit_success">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_exit_success.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_exit_success.disabled" value="0" />
        </property>
        <property default="0" description="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS value" display="Platform|MBEDTLS_PLATFORM_STD_EXIT_SUCCESS value" id="config.driver.psa_crypto.mbedtls_platform_std_exit_success_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_exit_failure.disabled" description="MBEDTLS_PLATFORM_STD_EXIT_FAILURE" display="Platform|MBEDTLS_PLATFORM_STD_EXIT_FAILURE" id="config.driver.psa_crypto.mbedtls_platform_std_exit_failure">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_exit_failure.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_exit_failure.disabled" value="0" />
        </property>
        <property default="1" description="MBEDTLS_PLATFORM_STD_EXIT_FAILURE value" display="Platform|MBEDTLS_PLATFORM_STD_EXIT_FAILURE value" id="config.driver.psa_crypto.mbedtls_platform_std_exit_failure_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_read.disabled" description="MBEDTLS_PLATFORM_STD_NV_SEED_READ" display="Platform|MBEDTLS_PLATFORM_STD_NV_SEED_READ" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_read">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_read.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_read.disabled" value="0" />
        </property>
        <property default="mbedtls_platform_std_nv_seed_read" description="MBEDTLS_PLATFORM_STD_NV_SEED_READ value" display="Platform|MBEDTLS_PLATFORM_STD_NV_SEED_READ value" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_read_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_write.disabled" description="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE" display="Platform|MBEDTLS_PLATFORM_STD_NV_SEED_WRITE" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_write">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_write.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_write.disabled" value="0" />
        </property>
        <property default="mbedtls_platform_std_nv_seed_write" description="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE value" display="Platform|MBEDTLS_PLATFORM_STD_NV_SEED_WRITE value" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_write_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_file.disabled" description="MBEDTLS_PLATFORM_STD_NV_SEED_FILE" display="Platform|MBEDTLS_PLATFORM_STD_NV_SEED_FILE" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_file">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_file.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_file.disabled" value="0" />
        </property>
        <property default="" description="MBEDTLS_PLATFORM_STD_NV_SEED_FILE value" display="Platform|MBEDTLS_PLATFORM_STD_NV_SEED_FILE value" id="config.driver.psa_crypto.mbedtls_platform_std_nv_seed_file_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_calloc_macro.disabled" description="MBEDTLS_PLATFORM_CALLOC_MACRO" display="Platform|MBEDTLS_PLATFORM_CALLOC_MACRO" id="config.driver.psa_crypto.mbedtls_platform_calloc_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_calloc_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_calloc_macro.disabled" value="0" />
        </property>
        <property default="calloc" description="MBEDTLS_PLATFORM_CALLOC_MACRO value" display="Platform|MBEDTLS_PLATFORM_CALLOC_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_calloc_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_free_macro.disabled" description="MBEDTLS_PLATFORM_FREE_MACRO" display="Platform|MBEDTLS_PLATFORM_FREE_MACRO" id="config.driver.psa_crypto.mbedtls_platform_free_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_free_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_free_macro.disabled" value="0" />
        </property>
        <property default="free" description="MBEDTLS_PLATFORM_FREE_MACRO value" display="Platform|MBEDTLS_PLATFORM_FREE_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_free_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_exit_macro.disabled" description="MBEDTLS_PLATFORM_EXIT_MACRO" display="Platform|MBEDTLS_PLATFORM_EXIT_MACRO" id="config.driver.psa_crypto.mbedtls_platform_exit_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_exit_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_exit_macro.disabled" value="0" />
        </property>
        <property default="exit" description="MBEDTLS_PLATFORM_EXIT_MACRO value" display="Platform|MBEDTLS_PLATFORM_EXIT_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_exit_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_setbuf_macro.enabled" description="MBEDTLS_PLATFORM_SETBUF_MACRO" display="Platform|MBEDTLS_PLATFORM_SETBUF_MACRO" id="config.driver.psa_crypto.mbedtls_platform_setbuf_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_setbuf_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_setbuf_macro.disabled" value="0" />
        </property>
        <property default="dummy_setbuf" description="MBEDTLS_PLATFORM_SETBUF_MACRO value" display="Platform|MBEDTLS_PLATFORM_SETBUF_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_setbuf_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_time_macro.disabled" description="MBEDTLS_PLATFORM_TIME_MACRO" display="Platform|MBEDTLS_PLATFORM_TIME_MACRO" id="config.driver.psa_crypto.mbedtls_platform_time_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_time_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_time_macro.disabled" value="0" />
        </property>
        <property default="time" description="MBEDTLS_PLATFORM_TIME_MACRO value" display="Platform|MBEDTLS_PLATFORM_TIME_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_time_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_time_type_macro.disabled" description="MBEDTLS_PLATFORM_TIME_TYPE_MACRO" display="Platform|MBEDTLS_PLATFORM_TIME_TYPE_MACRO" id="config.driver.psa_crypto.mbedtls_platform_time_type_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_time_type_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_time_type_macro.disabled" value="0" />
        </property>
        <property default="time_t" description="MBEDTLS_PLATFORM_TIME_TYPE_MACRO value" display="Platform|MBEDTLS_PLATFORM_TIME_TYPE_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_time_type_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_fprintf_macro.disabled" description="MBEDTLS_PLATFORM_FPRINTF_MACRO" display="Platform|MBEDTLS_PLATFORM_FPRINTF_MACRO" id="config.driver.psa_crypto.mbedtls_platform_fprintf_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_fprintf_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_fprintf_macro.disabled" value="0" />
        </property>
        <property default="fprintf" description="MBEDTLS_PLATFORM_FPRINTF_MACRO value" display="Platform|MBEDTLS_PLATFORM_FPRINTF_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_fprintf_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_printf_macro.disabled" description="MBEDTLS_PLATFORM_PRINTF_MACRO" display="Platform|MBEDTLS_PLATFORM_PRINTF_MACRO" id="config.driver.psa_crypto.mbedtls_platform_printf_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_printf_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_printf_macro.disabled" value="0" />
        </property>
        <property default="printf" description="MBEDTLS_PLATFORM_PRINTF_MACRO value" display="Platform|MBEDTLS_PLATFORM_PRINTF_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_printf_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_snprintf_macro.disabled" description="MBEDTLS_PLATFORM_SNPRINTF_MACRO" display="Platform|MBEDTLS_PLATFORM_SNPRINTF_MACRO" id="config.driver.psa_crypto.mbedtls_platform_snprintf_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_snprintf_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_snprintf_macro.disabled" value="0" />
        </property>
        <property default="snprintf" description="MBEDTLS_PLATFORM_SNPRINTF_MACRO value" display="Platform|MBEDTLS_PLATFORM_SNPRINTF_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_snprintf_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_vsnprintf_macro.disabled" description="MBEDTLS_PLATFORM_VSNPRINTF_MACRO" display="Platform|MBEDTLS_PLATFORM_VSNPRINTF_MACRO" id="config.driver.psa_crypto.mbedtls_platform_vsnprintf_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_vsnprintf_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_vsnprintf_macro.disabled" value="0" />
        </property>
        <property default="vsnprintf" description="MBEDTLS_PLATFORM_VSNPRINTF_MACRO value" display="Platform|MBEDTLS_PLATFORM_VSNPRINTF_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_vsnprintf_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_nv_seed_read_macro.disabled" description="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO" display="Platform|MBEDTLS_PLATFORM_NV_SEED_READ_MACRO" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_read_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_read_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_read_macro.disabled" value="0" />
        </property>
        <property default="mbedtls_platform_std_nv_seed_read" description="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO value" display="Platform|MBEDTLS_PLATFORM_NV_SEED_READ_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_read_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_nv_seed_write_macro.disabled" description="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO" display="Platform|MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_write_macro">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_write_macro.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_write_macro.disabled" value="0" />
        </property>
        <property default="mbedtls_platform_std_nv_seed_write" description="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO value" display="Platform|MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO value" id="config.driver.psa_crypto.mbedtls_platform_nv_seed_write_macro_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_check_return.enabled" description="MBEDTLS_CHECK_RETURN" display="General|MBEDTLS_CHECK_RETURN" id="config.driver.psa_crypto.mbedtls_check_return">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_check_return.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_check_return.disabled" value="0" />
        </property>

        <property default="config.driver.psa_crypto.mbedtls_ignore_return.disabled" description="MBEDTLS_IGNORE_RETURN" display="General|MBEDTLS_IGNORE_RETURN" id="config.driver.psa_crypto.mbedtls_ignore_return">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ignore_return.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ignore_return.disabled" value="0" />
        </property>

        <property default="config.driver.psa_crypto.mbedtls_psa_hmac_drbg_md_type.enabled" description="MBEDTLS_PSA_HMAC_DRBG_MD_TYPE" display="HMAC|MBEDTLS_PSA_HMAC_DRBG_MD_TYPE" id="config.driver.psa_crypto.mbedtls_psa_hmac_drbg_md_type">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_psa_hmac_drbg_md_type.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_psa_hmac_drbg_md_type.disabled" value="0" />
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_zeroize_alt.disabled" description="MBEDTLS_PLATFORM_ZEROIZE_ALT" display="Platform|Alternate|MBEDTLS_PLATFORM_ZEROIZE_ALT" id="config.driver.psa_crypto.mbedtls_platform_zeroize_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_zeroize_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_zeroize_alt.disabled" value="0" />
        </property>

        <property default="config.driver.psa_crypto.mbedtls_psa_key_slot_count.disabled" description="MBEDTLS_PSA_KEY_SLOT_COUNT" display="Key Configuration|MBEDTLS_PSA_KEY_SLOT_COUNT" id="config.driver.psa_crypto.mbedtls_psa_key_slot_count">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_psa_key_slot_count.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_psa_key_slot_count.disabled" value="0" />
        </property>
        <property default="32" description="MBEDTLS_PSA_KEY_SLOT_COUNT value" display="Key Configuration|MBEDTLS_PSA_KEY_SLOT_COUNT value" id="config.driver.psa_crypto.mbedtls_psa_key_slot_count_value">
        </property>

        <property default="config.driver.psa_crypto.mbedtls_platform_gmtime_r_alt.disabled" description="MBEDTLS_PLATFORM_GMTIME_R_ALT" display="Platform|Alternate|MBEDTLS_PLATFORM_GMTIME_R_ALT" id="config.driver.psa_crypto.mbedtls_platform_gmtime_r_alt">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_platform_gmtime_r_alt.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_platform_gmtime_r_alt.disabled" value="0" />
        </property>
        <property default="config.driver.psa_crypto.mbedtls_ecdh_variant_everest_enabled.disabled" description="MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED" display="Public Key Cryptography (PKC)|ECC|MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED" id="config.driver.psa_crypto.mbedtls_ecdh_variant_everest_enabled">
            <option display="Define" id="config.driver.psa_crypto.mbedtls_ecdh_variant_everest_enabled.enabled" value="1" />
            <option display="Undefine" id="config.driver.psa_crypto.mbedtls_ecdh_variant_everest_enabled.disabled" value="0" />
        </property>
        <content>
           /*-----------------------------------------------------------
            * mbedCrypto Configuration file.
            *----------------------------------------------------------*/


            #ifndef RM_PSA_CRYPTO_CFG_H
            #define RM_PSA_CRYPTO_CFG_H

            #include &lt;stdbool.h&gt;
            #include "bsp_api.h"

            /* Common macro for FSP header files. There is also a corresponding FSP_FOOTER macro at the end of this file. */
            FSP_HEADER

            /*** rm_psa_crypto module configurations **/

            #define PSA_CRYPTO_CFG_PLAINTEXT_KEY_SUPPORT                (0x01)
            #define PSA_CRYPTO_CFG_WRAPPED_KEY_SUPPORT                  (0x02)
            #define PSA_CRYPTO_CFG_WRAPPED_AND_PLAINTEXT_KEY_SUPPORT    ((PSA_CRYPTO_CFG_PLAINTEXT_KEY_SUPPORT) | \
                                                                        (PSA_CRYPTO_CFG_WRAPPED_KEY_SUPPORT))

            #define PSA_CRYPTO_IS_WRAPPED_SUPPORT_REQUIRED(type)      ((type) &amp; PSA_CRYPTO_CFG_WRAPPED_KEY_SUPPORT)
            #define PSA_CRYPTO_IS_PLAINTEXT_SUPPORT_REQUIRED(type)    ((type) &amp; PSA_CRYPTO_CFG_PLAINTEXT_KEY_SUPPORT)


            #define PSA_CRYPTO_CFG_AES_FORMAT ${config.driver.psa_crypto.aes_format}
            #define PSA_CRYPTO_CFG_ECC_FORMAT ${config.driver.psa_crypto.ecc_format}
            #define PSA_CRYPTO_CFG_RSA_FORMAT ${config.driver.psa_crypto.rsa_format}

            #define RM_PSA_CRYPTO_CFG_RSA3K_ENABLED ${config.driver.psa_crypto.mbedtls_rsa_3072}
            #define RM_PSA_CRYPTO_CFG_RSA4K_ENABLED ${config.driver.psa_crypto.mbedtls_rsa_4096}

            /*** end-rm_psa_crypto module configurations **/

            #if (defined(_MSC_VER))&amp;&amp;(!defined(_CRT_SECURE_NO_DEPRECATE))
            #define _CRT_SECURE_NO_DEPRECATE 1
            #endif

#if ${interface.driver.mbedtls}
    #include "mbedtls/tls-config.h"
#endif

#if ${interface.rtos.awsfreertos} &amp;&amp; ${interface.aws.freertosplus.crypto}
 #define CONFIG_MEDTLS_USE_AFR_MEMORY
#endif

            /**
             * \name SECTION: System support
             *
             * This section sets system specific settings.
             * \{
             */

            /**
             * \def MBEDTLS_HAVE_ASM
             *
             * The compiler has support for asm().
             *
             * Requires support for asm() in compiler.
             *
             * Used in:
             *      library/aria.c
             *      library/bn_mul.h
             *
             * Required by:
             *      MBEDTLS_AESNI_C
             *      MBEDTLS_PADLOCK_C
             *
             * Comment to disable the use of assembly code.
             */
             #if ${config.driver.psa_crypto.mbedtls_have_asm}
            #define MBEDTLS_HAVE_ASM
            #endif

            /**
             * \def MBEDTLS_NO_UDBL_DIVISION
             *
             * The platform lacks support for double-width integer division (64-bit
             * division on a 32-bit platform, 128-bit division on a 64-bit platform).
             *
             * Used in:
             *      include/mbedtls/bignum.h
             *      library/bignum.c
             *
             * The bignum code uses double-width division to speed up some operations.
             * Double-width division is often implemented in software that needs to
             * be linked with the program. The presence of a double-width integer
             * type is usually detected automatically through preprocessor macros,
             * but the automatic detection cannot know whether the code needs to
             * and can be linked with an implementation of division for that type.
             * By default division is assumed to be usable if the type is present.
             * Uncomment this option to prevent the use of double-width division.
             *
             * Note that division for the native integer type is always required.
             * Furthermore, a 64-bit type is always required even on a 32-bit
             * platform, but it need not support multiplication or division. In some
             * cases it is also desirable to disable some double-width operations. For
             * example, if double-width division is implemented in software, disabling
             * it can reduce code size in some embedded targets.
             */
             #if ${config.driver.psa_crypto.mbedtls_no_udbl_division}
            #define MBEDTLS_NO_UDBL_DIVISION
            #endif

            /**
             * \def MBEDTLS_NO_64BIT_MULTIPLICATION
             *
             * The platform lacks support for 32x32 -> 64-bit multiplication.
             *
             * Used in:
             *      library/poly1305.c
             *
             * Some parts of the library may use multiplication of two unsigned 32-bit
             * operands with a 64-bit result in order to speed up computations. On some
             * platforms, this is not available in hardware and has to be implemented in
             * software, usually in a library provided by the toolchain.
             *
             * Sometimes it is not desirable to have to link to that library. This option
             * removes the dependency of that library on platforms that lack a hardware
             * 64-bit multiplier by embedding a software implementation in Mbed TLS.
             *
             * Note that depending on the compiler, this may decrease performance compared
             * to using the library function provided by the toolchain.
             */
             #if ${config.driver.psa_crypto.mbedtls_no_64bit_multiplication}
            #define MBEDTLS_NO_64BIT_MULTIPLICATION
            #endif

            /**
             * \def MBEDTLS_HAVE_SSE2
             *
             * CPU supports SSE2 instruction set.
             *
             * Uncomment if the CPU supports SSE2 (IA-32 specific).
             */
             #if ${config.driver.psa_crypto.mbedtls_have_sse2}
            #define MBEDTLS_HAVE_SSE2
            #endif

            /**
             * \def MBEDTLS_HAVE_TIME
             *
             * System has time.h and time().
             * The time does not need to be correct, only time differences are used,
             * by contrast with MBEDTLS_HAVE_TIME_DATE
             *
             * Defining MBEDTLS_HAVE_TIME allows you to specify MBEDTLS_PLATFORM_TIME_ALT,
             * MBEDTLS_PLATFORM_TIME_MACRO, MBEDTLS_PLATFORM_TIME_TYPE_MACRO and
             * MBEDTLS_PLATFORM_STD_TIME.
             *
             * Comment if your system does not support time functions.
             *
             * \note If MBEDTLS_TIMING_C is set - to enable the semi-portable timing
             *       interface - timing.c will include time.h on suitable platforms
             *       regardless of the setting of MBEDTLS_HAVE_TIME, unless
             *       MBEDTLS_TIMING_ALT is used. See timing.c for more information.
             */
             #if ${config.driver.psa_crypto.mbedtls_have_time}
            #define MBEDTLS_HAVE_TIME
            #endif

            /**
             * \def MBEDTLS_HAVE_TIME_DATE
             *
             * System has time.h, time(), and an implementation for
             * mbedtls_platform_gmtime_r() (see below).
             * The time needs to be correct (not necessarily very accurate, but at least
             * the date should be correct). This is used to verify the validity period of
             * X.509 certificates.
             *
             * Comment if your system does not have a correct clock.
             *
             * \note mbedtls_platform_gmtime_r() is an abstraction in platform_util.h that
             * behaves similarly to the gmtime_r() function from the C standard. Refer to
             * the documentation for mbedtls_platform_gmtime_r() for more information.
             *
             * \note It is possible to configure an implementation for
             * mbedtls_platform_gmtime_r() at compile-time by using the macro
             * MBEDTLS_PLATFORM_GMTIME_R_ALT.
             */
             #if ${config.driver.psa_crypto.mbedtls_have_time_date}
            #define MBEDTLS_HAVE_TIME_DATE
            #endif

            /**
             * \def MBEDTLS_PLATFORM_MEMORY
             *
             * Enable the memory allocation layer.
             *
             * By default mbed TLS uses the system-provided calloc() and free().
             * This allows different allocators (self-implemented or provided) to be
             * provided to the platform abstraction layer.
             *
             * Enabling MBEDTLS_PLATFORM_MEMORY without the
             * MBEDTLS_PLATFORM_{FREE,CALLOC}_MACROs will provide
             * "mbedtls_platform_set_calloc_free()" allowing you to set an alternative calloc() and
             * free() function pointer at runtime.
             *
             * Enabling MBEDTLS_PLATFORM_MEMORY and specifying
             * MBEDTLS_PLATFORM_{CALLOC,FREE}_MACROs will allow you to specify the
             * alternate function at compile time.
             *
             * Requires: MBEDTLS_PLATFORM_C
             *
             * Enable this layer to allow use of alternative memory allocators.
             */
             #if ${config.driver.psa_crypto.mbedtls_platform_memory}
            #define MBEDTLS_PLATFORM_MEMORY
            #endif

            /**
             * \def MBEDTLS_PLATFORM_NO_STD_FUNCTIONS
             *
             * Do not assign standard functions in the platform layer (e.g. calloc() to
             * MBEDTLS_PLATFORM_STD_CALLOC and printf() to MBEDTLS_PLATFORM_STD_PRINTF)
             *
             * This makes sure there are no linking errors on platforms that do not support
             * these functions. You will HAVE to provide alternatives, either at runtime
             * via the platform_set_xxx() functions or at compile time by setting
             * the MBEDTLS_PLATFORM_STD_XXX defines, or enabling a
             * MBEDTLS_PLATFORM_XXX_MACRO.
             *
             * Requires: MBEDTLS_PLATFORM_C
             *
             * Uncomment to prevent default assignment of standard functions in the
             * platform layer.
             */
             #if ${config.driver.psa_crypto.mbedtls_platform_no_std_functions}
            #define MBEDTLS_PLATFORM_NO_STD_FUNCTIONS
            #endif

            /**
             * \def MBEDTLS_PLATFORM_EXIT_ALT
             *
             * MBEDTLS_PLATFORM_XXX_ALT: Uncomment a macro to let mbed TLS support the
             * function in the platform abstraction layer.
             *
             * Example: In case you uncomment MBEDTLS_PLATFORM_PRINTF_ALT, mbed TLS will
             * provide a function "mbedtls_platform_set_printf()" that allows you to set an
             * alternative printf function pointer.
             *
             * All these define require MBEDTLS_PLATFORM_C to be defined!
             *
             * \note MBEDTLS_PLATFORM_SNPRINTF_ALT is required on Windows;
             * it will be enabled automatically by check_config.h
             *
             * \warning MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as
             * MBEDTLS_PLATFORM_XXX_MACRO!
             *
             * Requires: MBEDTLS_PLATFORM_TIME_ALT requires MBEDTLS_HAVE_TIME
             *
             * Uncomment a macro to enable alternate implementation of specific base
             * platform function
             */
             #if ${config.driver.psa_crypto.mbedtls_platform_setbuf_alt}
            #define MBEDTLS_PLATFORM_SETBUF_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_exit_alt}
            #define MBEDTLS_PLATFORM_EXIT_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_time_alt}
            #define MBEDTLS_PLATFORM_TIME_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_fprintf_alt}
            #define MBEDTLS_PLATFORM_FPRINTF_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_printf_alt}
            #define MBEDTLS_PLATFORM_PRINTF_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_snprintf_alt}
            #define MBEDTLS_PLATFORM_SNPRINTF_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_vsnprintf_alt}
            #define MBEDTLS_PLATFORM_VSNPRINTF_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_nv_seed_alt}
            #define MBEDTLS_PLATFORM_NV_SEED_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_setup_teardown_alt}
            #define MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT
            #endif

            /**
             * \def PSA_CRYPTO_SECURE
             *
             * Add support for associating a key with a PSA partition.
             * This only works if MBEDTLS_PSA_CRYPTO_KEY_FILE_ID_ENCODES_OWNER is also enabled.
             */
             #if ${config.driver.psa_crypto.psa_crypto_secure}
            #define PSA_CRYPTO_SECURE
            #endif

            /**
             * \def MBEDTLS_DEPRECATED_WARNING
             *
             * Mark deprecated functions and features so that they generate a warning if
             * used. Functionality deprecated in one version will usually be removed in the
             * next version. You can enable this to help you prepare the transition to a
             * new major version by making sure your code is not using this functionality.
             *
             * This only works with GCC and Clang. With other compilers, you may want to
             * use MBEDTLS_DEPRECATED_REMOVED
             *
             * Uncomment to get warnings on using deprecated functions and features.
             */
             #if ${config.driver.psa_crypto.mbedtls_deprecated_warning}
            #define MBEDTLS_DEPRECATED_WARNING
            #endif

            /**
             * \def MBEDTLS_DEPRECATED_REMOVED
             *
             * Remove deprecated functions and features so that they generate an error if
             * used. Functionality deprecated in one version will usually be removed in the
             * next version. You can enable this to help you prepare the transition to a
             * new major version by making sure your code is not using this functionality.
             *
             * Uncomment to get errors on using deprecated functions and features.
             */
             #if ${config.driver.psa_crypto.mbedtls_deprecated_removed}
            #define MBEDTLS_DEPRECATED_REMOVED
            #endif

            /* \} name SECTION: System support */

            /**
             * \name SECTION: mbed TLS feature support
             *
             * This section sets support for features that are or are not needed
             * within the modules that are enabled.
             * \{
             */

            /**
             * \def MBEDTLS_TIMING_ALT
             *
             * Uncomment to provide your own alternate implementation for
             * mbedtls_timing_get_timer(), mbedtls_set_alarm(), mbedtls_set/get_delay()
             *
             * Only works if you have MBEDTLS_TIMING_C enabled.
             *
             * You will need to provide a header "timing_alt.h" and an implementation at
             * compile time.
             */
             #if ${config.driver.psa_crypto.mbedtls_timing_alt}
            #define MBEDTLS_TIMING_ALT
            #endif

            /**
             * \def MBEDTLS_AES_ALT
             *
             * MBEDTLS__MODULE_NAME__ALT: Uncomment a macro to let mbed TLS use your
             * alternate core implementation of a symmetric crypto, an arithmetic or hash
             * module (e.g. platform specific assembly optimized implementations). Keep
             * in mind that the function prototypes should remain the same.
             *
             * This replaces the whole module. If you only want to replace one of the
             * functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags.
             *
             * Example: In case you uncomment MBEDTLS_AES_ALT, mbed TLS will no longer
             * provide the "struct mbedtls_aes_context" definition and omit the base
             * function declarations and implementations. "aes_alt.h" will be included from
             * "aes.h" to include the new function definitions.
             *
             * Uncomment a macro to enable alternate implementation of the corresponding
             * module.
             *
             * \warning   MD5, DES and SHA-1 are considered weak and their
             *            use constitutes a security risk. If possible, we recommend
             *            avoiding dependencies on them, and considering stronger message
             *            digests and ciphers instead.
             *
             */
             #if ${config.driver.psa_crypto.aes_alt}
            #define MBEDTLS_AES_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_aria_alt}
            #define MBEDTLS_ARIA_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_camellia_alt}
            #define MBEDTLS_CAMELLIA_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ccm_alt}
            #define MBEDTLS_CCM_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_chacha20_alt}
            #define MBEDTLS_CHACHA20_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_chachapoly_alt}
            #define MBEDTLS_CHACHAPOLY_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_cmac_alt}
            #define MBEDTLS_CMAC_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_des_alt}
            #define MBEDTLS_DES_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_dhm_alt}
            #define MBEDTLS_DHM_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecjpake_alt}
            #define MBEDTLS_ECJPAKE_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_gcm_alt}
            #define MBEDTLS_GCM_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_nist_kw_alt}
            #define MBEDTLS_NIST_KW_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_md5_alt}
            #define MBEDTLS_MD5_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_poly1305_alt}
            #define MBEDTLS_POLY1305_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ripemd160_alt}
            #define MBEDTLS_RIPEMD160_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_rsa_alt}
            #define MBEDTLS_RSA_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_sha1_alt}
            #define MBEDTLS_SHA1_ALT
            #endif
            #if ${config.driver.psa_crypto.sha256_alt}
            #define MBEDTLS_SHA256_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_sha512_alt}
            #define MBEDTLS_SHA512_ALT
            #endif

            /*
             * When replacing the elliptic curve module, pleace consider, that it is
             * implemented with two .c files:
             *      - ecp.c
             *      - ecp_curves.c
             * You can replace them very much like all the other MBEDTLS__MODULE_NAME__ALT
             * macros as described above. The only difference is that you have to make sure
             * that you provide functionality for both .c files.
             */
             #if ${config.driver.psa_crypto.mbedtls_ecp_alt}
            #define MBEDTLS_ECP_ALT
            #endif

            /**
             * \def MBEDTLS_SHA256_PROCESS_ALT
             *
             * MBEDTLS__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use you
             * alternate core implementation of symmetric crypto or hash function. Keep in
             * mind that function prototypes should remain the same.
             *
             * This replaces only one function. The header file from mbed TLS is still
             * used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.
             *
             * Example: In case you uncomment MBEDTLS_SHA256_PROCESS_ALT, mbed TLS will
             * no longer provide the mbedtls_sha1_process() function, but it will still provide
             * the other function (using your mbedtls_sha1_process() function) and the definition
             * of mbedtls_sha1_context, so your implementation of mbedtls_sha1_process must be compatible
             * with this definition.
             *
             * \note If you use the AES_xxx_ALT macros, then it is recommended to also set
             *       MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES
             *       tables.
             *
             * Uncomment a macro to enable alternate implementation of the corresponding
             * function.
             *
             * \warning   MD5, DES and SHA-1 are considered weak and their use
             *            constitutes a security risk. If possible, we recommend avoiding
             *            dependencies on them, and considering stronger message digests
             *            and ciphers instead.
             *
             * \warning   If both MBEDTLS_ECDSA_SIGN_ALT and MBEDTLS_ECDSA_DETERMINISTIC are
             *            enabled, then the deterministic ECDH signature functions pass the
             *            the static HMAC-DRBG as RNG to mbedtls_ecdsa_sign(). Therefore
             *            alternative implementations should use the RNG only for generating
             *            the ephemeral key and nothing else. If this is not possible, then
             *            MBEDTLS_ECDSA_DETERMINISTIC should be disabled and an alternative
             *            implementation should be provided for mbedtls_ecdsa_sign_det_ext().
             *
             */
            #if ${config.driver.psa_crypto.mbedtls_md5_process_alt}
            #define MBEDTLS_MD5_PROCESS_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ripemd160_process_alt}
            #define MBEDTLS_RIPEMD160_PROCESS_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_sha1_process_alt}
            #define MBEDTLS_SHA1_PROCESS_ALT
            #endif
            #if (${config.driver.psa_crypto.sha256_alt})
            #define MBEDTLS_SHA256_PROCESS_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_sha512_process_alt}
            #define MBEDTLS_SHA512_PROCESS_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_des_setkey_alt}
            #define MBEDTLS_DES_SETKEY_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_des_crypt_ecb_alt}
            #define MBEDTLS_DES_CRYPT_ECB_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_des3_crypt_ecb_alt}
            #define MBEDTLS_DES3_CRYPT_ECB_ALT
            #endif
            #if ${config.driver.psa_crypto.aes_alt}
            #define MBEDTLS_AES_SETKEY_ENC_ALT
            #endif
            #if ${config.driver.psa_crypto.aes_alt}
            #define MBEDTLS_AES_SETKEY_DEC_ALT
            #endif
            #if ${config.driver.psa_crypto.aes_alt}
            #define MBEDTLS_AES_ENCRYPT_ALT
            #endif
            #if ${config.driver.psa_crypto.aes_alt}
            #define MBEDTLS_AES_DECRYPT_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecdh_gen_public_alt}
            #define MBEDTLS_ECDH_GEN_PUBLIC_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecdh_compute_shared_alt}
            #define MBEDTLS_ECDH_COMPUTE_SHARED_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecdsa_alt}
            #define MBEDTLS_ECDSA_VERIFY_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecdsa_alt}
            #define MBEDTLS_ECDSA_SIGN_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecdsa_genkey_alt}
            #define MBEDTLS_ECDSA_GENKEY_ALT
            #endif

            /**
             * \def MBEDTLS_ECP_INTERNAL_ALT
             *
             * Expose a part of the internal interface of the Elliptic Curve Point module.
             *
             * MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your
             * alternative core implementation of elliptic curve arithmetic. Keep in mind
             * that function prototypes should remain the same.
             *
             * This partially replaces one function. The header file from mbed TLS is still
             * used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation
             * is still present and it is used for group structures not supported by the
             * alternative.
             *
             * The original implementation can in addition be removed by setting the
             * MBEDTLS_ECP_NO_FALLBACK option, in which case any function for which the
             * corresponding MBEDTLS_ECP__FUNCTION_NAME__ALT macro is defined will not be
             * able to fallback to curves not supported by the alternative implementation.
             *
             * Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT
             * and implementing the following functions:
             *      unsigned char mbedtls_internal_ecp_grp_capable(
             *          const mbedtls_ecp_group *grp )
             *      int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )
             *      void mbedtls_internal_ecp_free( const mbedtls_ecp_group *grp )
             * The mbedtls_internal_ecp_grp_capable function should return 1 if the
             * replacement functions implement arithmetic for the given group and 0
             * otherwise.
             * The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_free are
             * called before and after each point operation and provide an opportunity to
             * implement optimized set up and tear down instructions.
             *
             * Example: In case you set MBEDTLS_ECP_INTERNAL_ALT and
             * MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac()
             * function, but will use your mbedtls_internal_ecp_double_jac() if the group
             * for the operation is supported by your implementation (i.e. your
             * mbedtls_internal_ecp_grp_capable() function returns 1 for this group). If the
             * group is not supported by your implementation, then the original mbed TLS
             * implementation of ecp_double_jac() is used instead, unless this fallback
             * behaviour is disabled by setting MBEDTLS_ECP_NO_FALLBACK (in which case
             * ecp_double_jac() will return MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE).
             *
             * The function prototypes and the definition of mbedtls_ecp_group and
             * mbedtls_ecp_point will not change based on MBEDTLS_ECP_INTERNAL_ALT, so your
             * implementation of mbedtls_internal_ecp__function_name__ must be compatible
             * with their definitions.
             *
             * Uncomment a macro to enable alternate implementation of the corresponding
             * function.
             */
            /* Required for all the functions in this section */
            #if ${config.driver.psa_crypto.mbedtls_ecp_internal_alt}
            #define MBEDTLS_ECP_INTERNAL_ALT
            #endif
            /* Turn off software fallback for curves not supported in hardware */
            #if ${config.driver.psa_crypto.mbedtls_ecp_no_fallback}
            #define MBEDTLS_ECP_NO_FALLBACK
            #endif
            /* Support for Weierstrass curves with Jacobi representation */
            #if ${config.driver.psa_crypto.mbedtls_ecp_randomize_jac_alt}
            #define MBEDTLS_ECP_RANDOMIZE_JAC_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_add_mixed_alt}
            #define MBEDTLS_ECP_ADD_MIXED_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_double_jac_alt}
            #define MBEDTLS_ECP_DOUBLE_JAC_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_normalize_jac_many_alt}
            #define MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_normalize_jac_alt}
            #define MBEDTLS_ECP_NORMALIZE_JAC_ALT
            #endif
            /* Support for curves with Montgomery arithmetic */
            #if ${config.driver.psa_crypto.mbedtls_ecp_double_add_mxz_alt}
            #define MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_randomize_mxz_alt}
            #define MBEDTLS_ECP_RANDOMIZE_MXZ_ALT
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_normalize_mxz_alt}
            #define MBEDTLS_ECP_NORMALIZE_MXZ_ALT
            #endif

            /**
             * \def MBEDTLS_ENTROPY_HARDWARE_ALT
             *
             * Uncomment this macro to let mbed TLS use your own implementation of a
             * hardware entropy collector.
             *
             * Your function must be called \c mbedtls_hardware_poll(), have the same
             * prototype as declared in library/entropy_poll.h, and accept NULL as first
             * argument.
             *
             * Uncomment to use your own hardware entropy collector.
             */
            #if ${config.driver.psa_crypto.mbedtls_entropy_hardware_alt}
            #define MBEDTLS_ENTROPY_HARDWARE_ALT
            #endif

            /**
             * \def MBEDTLS_AES_ROM_TABLES
             *
             * Use precomputed AES tables stored in ROM.
             *
             * Uncomment this macro to use precomputed AES tables stored in ROM.
             * Comment this macro to generate AES tables in RAM at runtime.
             *
             * Tradeoff: Using precomputed ROM tables reduces RAM usage by ~8kb
             * (or ~2kb if \c MBEDTLS_AES_FEWER_TABLES is used) and reduces the
             * initialization time before the first AES operation can be performed.
             * It comes at the cost of additional ~8kb ROM use (resp. ~2kb if \c
             * MBEDTLS_AES_FEWER_TABLES below is used), and potentially degraded
             * performance if ROM access is slower than RAM access.
             *
             * This option is independent of \c MBEDTLS_AES_FEWER_TABLES.
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_aes_rom_tables}
            #define MBEDTLS_AES_ROM_TABLES
            #endif

            /**
             * \def MBEDTLS_AES_FEWER_TABLES
             *
             * Use less ROM/RAM for AES tables.
             *
             * Uncommenting this macro omits 75% of the AES tables from
             * ROM / RAM (depending on the value of \c MBEDTLS_AES_ROM_TABLES)
             * by computing their values on the fly during operations
             * (the tables are entry-wise rotations of one another).
             *
             * Tradeoff: Uncommenting this reduces the RAM / ROM footprint
             * by ~6kb but at the cost of more arithmetic operations during
             * runtime. Specifically, one has to compare 4 accesses within
             * different tables to 4 accesses with additional arithmetic
             * operations within the same table. The performance gain/loss
             * depends on the system and memory details.
             *
             * This option is independent of \c MBEDTLS_AES_ROM_TABLES.
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_aes_fewer_tables}
            #define MBEDTLS_AES_FEWER_TABLES
            #endif

            /**
             * \def MBEDTLS_CAMELLIA_SMALL_MEMORY
             *
             * Use less ROM for the Camellia implementation (saves about 768 bytes).
             *
             * Uncomment this macro to use less memory for Camellia.
             */
             #if ${config.driver.psa_crypto.mbedtls_camellia_small_memory}
            #define MBEDTLS_CAMELLIA_SMALL_MEMORY
            #endif

            /**
             * \def MBEDTLS_CHECK_RETURN_WARNING
             *
             * If this macro is defined, emit a compile-time warning if application code
             * calls a function without checking its return value, but the return value
             * should generally be checked in portable applications.
             *
             * This is only supported on platforms where #MBEDTLS_CHECK_RETURN is
             * implemented. Otherwise this option has no effect.
             *
             * Uncomment to get warnings on using fallible functions without checking
             * their return value.
             *
             * \note  This feature is a work in progress.
             *        Warnings will be added to more functions in the future.
             *
             * \note  A few functions are considered critical, and ignoring the return
             *        value of these functions will trigger a warning even if this
             *        macro is not defined. To completely disable return value check
             *        warnings, define #MBEDTLS_CHECK_RETURN with an empty expansion.
             */
             #if ${config.driver.psa_crypto.mbedtls_check_return_warning}
            #define MBEDTLS_CHECK_RETURN_WARNING
            #endif

            /**
             * \def MBEDTLS_CIPHER_MODE_CBC
             *
             * Enable Cipher Block Chaining mode (CBC) for symmetric ciphers.
             */
             #if ${config.driver.psa_crypto.mbedtls_cipher_mode_cbc}
            #define MBEDTLS_CIPHER_MODE_CBC
            #endif

            /**
             * \def MBEDTLS_CIPHER_MODE_CFB
             *
             * Enable Cipher Feedback mode (CFB) for symmetric ciphers.
             */
             #if ${config.driver.psa_crypto.mbedtls_cipher_mode_cfb}
            #define MBEDTLS_CIPHER_MODE_CFB
            #endif

            /**
             * \def MBEDTLS_CIPHER_MODE_CTR
             *
             * Enable Counter Block Cipher mode (CTR) for symmetric ciphers.
             */
             #if ${config.driver.psa_crypto.mbedtls_cipher_mode_ctr}
            #define MBEDTLS_CIPHER_MODE_CTR
            #endif

            /**
             * \def MBEDTLS_CIPHER_MODE_OFB
             *
             * Enable Output Feedback mode (OFB) for symmetric ciphers.
             */
             #if ${config.driver.psa_crypto.mbedtls_cipher_mode_ofb}
            #define MBEDTLS_CIPHER_MODE_OFB
            #endif

            /**
             * \def MBEDTLS_CIPHER_MODE_XTS
             *
             * Enable Xor-encrypt-xor with ciphertext stealing mode (XTS) for AES.
             */
             #if ${config.driver.psa_crypto.mbedtls_cipher_mode_xts}
            #define MBEDTLS_CIPHER_MODE_XTS
            #endif

            /**
             * \def MBEDTLS_CIPHER_NULL_CIPHER
             *
             * Enable NULL cipher.
             * Warning: Only do so when you know what you are doing. This allows for
             * encryption or channels without any security!
             *
             * This module is required to support the TLS ciphersuites that use the NULL
             * cipher.
             *
             * Uncomment this macro to enable the NULL cipher
             */
             #if ${config.driver.psa_crypto.mbedtls_cipher_null_cipher}
            #define MBEDTLS_CIPHER_NULL_CIPHER
            #endif

            /**
             * \def MBEDTLS_CIPHER_PADDING_PKCS7
             *
             * MBEDTLS_CIPHER_PADDING_XXX: Uncomment or comment macros to add support for
             * specific padding modes in the cipher layer with cipher modes that support
             * padding (e.g. CBC)
             *
             * If you disable all padding modes, only full blocks can be used with CBC.
             *
             * Enable padding modes in the cipher layer.
             */
             #if ${config.driver.psa_crypto.mbedtls_cipher_padding_pkcs7}
            #define MBEDTLS_CIPHER_PADDING_PKCS7
            #endif
            #if ${config.driver.psa_crypto.mbedtls_cipher_padding_one_and_zeros}
            #define MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS
            #endif
            #if ${config.driver.psa_crypto.mbedtls_cipher_padding_zeros_and_len}
            #define MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN
            #endif
            #if ${config.driver.psa_crypto.mbedtls_cipher_padding_zeros}
            #define MBEDTLS_CIPHER_PADDING_ZEROS
            #endif
            /** \def MBEDTLS_CTR_DRBG_USE_128_BIT_KEY
            *
            * Uncomment this macro to use a 128-bit key in the CTR_DRBG module.
            * By default, CTR_DRBG uses a 256-bit key.
            */
            #if ${config.driver.psa_crypto.mbedtls_ctr_drbg_use_128_bit_key}
            #define MBEDTLS_CTR_DRBG_USE_128_BIT_KEY
            #endif

            /**
             * \def MBEDTLS_ECP_DP_SECP192R1_ENABLED
             *
             * MBEDTLS_ECP_XXXX_ENABLED: Enables specific curves within the Elliptic Curve
             * module.  By default all supported curves are enabled.
             *
             * Comment macros to disable the curve and functions for it
             */
             #if ${config.driver.psa_crypto.mbedtls_ecp_dp_secp192r1_enabled}
            #define MBEDTLS_ECP_DP_SECP192R1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_secp224r1_enabled}
            #define MBEDTLS_ECP_DP_SECP224R1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_secp256r1_enabled}
            #define MBEDTLS_ECP_DP_SECP256R1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_secp384r1_enabled}
            #define MBEDTLS_ECP_DP_SECP384R1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_secp521r1_enabled}
            #define MBEDTLS_ECP_DP_SECP521R1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_secp192k1_enabled}
            #define MBEDTLS_ECP_DP_SECP192K1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_secp224k1_enabled}
            #define MBEDTLS_ECP_DP_SECP224K1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_secp256k1_enabled}
            #define MBEDTLS_ECP_DP_SECP256K1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_bp256r1_enabled}
            #define MBEDTLS_ECP_DP_BP256R1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_bp384r1_enabled}
            #define MBEDTLS_ECP_DP_BP384R1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_bp512r1_enabled}
            #define MBEDTLS_ECP_DP_BP512R1_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_curve25519_enabled}
            #define MBEDTLS_ECP_DP_CURVE25519_ENABLED
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_dp_curve448_enabled}
            #define MBEDTLS_ECP_DP_CURVE448_ENABLED
            #endif

            /**
             * \def MBEDTLS_ECP_NIST_OPTIM
             *
             * Enable specific 'modulo p' routines for each NIST prime.
             * Depending on the prime and architecture, makes operations 4 to 8 times
             * faster on the corresponding curve.
             *
             * Comment this macro to disable NIST curves optimisation.
             */
             #if ${config.driver.psa_crypto.mbedtls_ecp_nist_optim}
            #define MBEDTLS_ECP_NIST_OPTIM
            #endif

            /**
             * \def MBEDTLS_ECP_RESTARTABLE
             *
             * Enable "non-blocking" ECC operations that can return early and be resumed.
             *
             * This allows various functions to pause by returning
             * #MBEDTLS_ERR_ECP_IN_PROGRESS (or, for functions in Mbed TLS's SSL module,
             * MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS) and then be called later again in order
             * to further progress and eventually complete their operation. This is
             * controlled through mbedtls_ecp_set_max_ops() which limits the maximum number
             * of ECC operations a function may perform before pausing; see
             * mbedtls_ecp_set_max_ops() for more information.
             *
             * This is useful in non-threaded environments if you want to avoid blocking
             * for too long on ECC (and, hence, X.509 or SSL/TLS) operations.
             *
             * Uncomment this macro to enable restartable ECC computations.
             *
             * \note  This option only works with the default software implementation of
             *        elliptic curve functionality. It is incompatible with
             *        MBEDTLS_ECP_ALT, MBEDTLS_ECDH_XXX_ALT, MBEDTLS_ECDSA_XXX_ALT
             *        and MBEDTLS_ECDH_LEGACY_CONTEXT.
             */
             #if ${config.driver.psa_crypto.mbedtls_ecp_restartable}
            #define MBEDTLS_ECP_RESTARTABLE
            #endif

            /**
             * \def MBEDTLS_ECDSA_DETERMINISTIC
             *
             * Enable deterministic ECDSA (RFC 6979).
             * Standard ECDSA is "fragile" in the sense that lack of entropy when signing
             * may result in a compromise of the long-term signing key. This is avoided by
             * the deterministic variant.
             *
             * Requires: MBEDTLS_HMAC_DRBG_C
             *
             * Comment this macro to disable deterministic ECDSA.
             */
             #if ${config.driver.psa_crypto.mbedtls_ecdsa_deterministic}
            #define MBEDTLS_ECDSA_DETERMINISTIC
            #endif

            /**
             * \def MBEDTLS_PK_PARSE_EC_EXTENDED
             *
             * Enhance support for reading EC keys using variants of SEC1 not allowed by
             * RFC 5915 and RFC 5480.
             *
             * Currently this means parsing the SpecifiedECDomain choice of EC
             * parameters (only known groups are supported, not arbitrary domains, to
             * avoid validation issues).
             *
             * Disable if you only need to support RFC 5915 + 5480 key formats.
             */
             #if ${config.driver.psa_crypto.mbedtls_pk_parse_ec_extended}
            #define MBEDTLS_PK_PARSE_EC_EXTENDED
            #endif

            /**
             * \def MBEDTLS_ERROR_STRERROR_DUMMY
             *
             * Enable a dummy error function to make use of mbedtls_strerror() in
             * third party libraries easier when MBEDTLS_ERROR_C is disabled
             * (no effect when MBEDTLS_ERROR_C is enabled).
             *
             * You can safely disable this if MBEDTLS_ERROR_C is enabled, or if you're
             * not using mbedtls_strerror() or error_strerror() in your application.
             *
             * Disable if you run into name conflicts and want to really remove the
             * mbedtls_strerror()
             */
             #if ${config.driver.psa_crypto.mbedtls_error_strerror_dummy}
            #define MBEDTLS_ERROR_STRERROR_DUMMY
            #endif

            /**
             * \def MBEDTLS_GENPRIME
             *
             * Enable the prime-number generation code.
             *
             * Requires: MBEDTLS_BIGNUM_C
             */
             #if ${config.driver.psa_crypto.mbedtls_genprime}
            #define MBEDTLS_GENPRIME
            #endif

            /**
             * \def MBEDTLS_FS_IO
             *
             * Enable functions that use the filesystem.
             */
             #if ${config.driver.psa_crypto.mbedtls_fs_io}
            #define MBEDTLS_FS_IO
            #endif

            /**
             * \def MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES
             *
             * Do not add default entropy sources in mbedtls_entropy_init().
             *
             * This is useful to have more control over the added entropy sources in an
             * application.
             *
             * Uncomment this macro to prevent loading of default entropy functions.
             */
             #if ${config.driver.psa_crypto.mbedtls_no_default_entropy_sources}
            #define MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES
            #endif

            /**
             * \def MBEDTLS_NO_PLATFORM_ENTROPY
             *
             * Do not use built-in platform entropy functions.
             * This is useful if your platform does not support
             * standards like the /dev/urandom or Windows CryptoAPI.
             *
             * Uncomment this macro to disable the built-in platform entropy functions.
             */
             #if ${config.driver.psa_crypto.mbedtls_no_platform_entropy}
            #define MBEDTLS_NO_PLATFORM_ENTROPY
            #endif

            /**
             * \def MBEDTLS_ENTROPY_FORCE_SHA256
             *
             * Force the entropy accumulator to use a SHA-256 accumulator instead of the
             * default SHA-512 based one (if both are available).
             *
             * Requires: MBEDTLS_SHA256_C
             *
             * On 32-bit systems SHA-256 can be much faster than SHA-512. Use this option
             * if you have performance concerns.
             *
             * This option is only useful if both MBEDTLS_SHA256_C and
             * MBEDTLS_SHA512_C are defined. Otherwise the available hash module is used.
             */
             #if ${config.driver.psa_crypto.mbedtls_entropy_force_sha256}
            #define MBEDTLS_ENTROPY_FORCE_SHA256
            #endif

            /**
             * \def MBEDTLS_ENTROPY_NV_SEED
             *
             * Enable the non-volatile (NV) seed file-based entropy source.
             * (Also enables the NV seed read/write functions in the platform layer)
             *
             * This is crucial (if not required) on systems that do not have a
             * cryptographic entropy source (in hardware or kernel) available.
             *
             * Requires: MBEDTLS_ENTROPY_C, MBEDTLS_PLATFORM_C
             *
             * \note The read/write functions that are used by the entropy source are
             *       determined in the platform layer, and can be modified at runtime and/or
             *       compile-time depending on the flags (MBEDTLS_PLATFORM_NV_SEED_*) used.
             *
             * \note If you use the default implementation functions that read a seedfile
             *       with regular fopen(), please make sure you make a seedfile with the
             *       proper name (defined in MBEDTLS_PLATFORM_STD_NV_SEED_FILE) and at
             *       least MBEDTLS_ENTROPY_BLOCK_SIZE bytes in size that can be read from
             *       and written to or you will get an entropy source error! The default
             *       implementation will only use the first MBEDTLS_ENTROPY_BLOCK_SIZE
             *       bytes from the file.
             *
             * \note The entropy collector will write to the seed file before entropy is
             *       given to an external source, to update it.
             */
             #if ${config.driver.psa_crypto.mbedtls_entropy_nv_seed}
            #define MBEDTLS_ENTROPY_NV_SEED
            #endif

            /* MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER
             *
             * Enable key identifiers that encode a key owner identifier.
             *
             * The owner of a key is identified by a value of type ::mbedtls_key_owner_id_t
             * which is currently hard-coded to be int32_t.
             *
             * Note that this option is meant for internal use only and may be removed
             * without notice.
             */

             #if ${config.driver.psa_crypto.mbedtls_psa_crypto_key_file_id_encodes_owner}
            #define MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER
            #endif

            /**
             * \def MBEDTLS_MEMORY_DEBUG
             *
             * Enable debugging of buffer allocator memory issues. Automatically prints
             * (to stderr) all (fatal) messages on memory allocation issues. Enables
             * function for 'debug output' of allocated memory.
             *
             * Requires: MBEDTLS_MEMORY_BUFFER_ALLOC_C
             *
             * Uncomment this macro to let the buffer allocator print out error messages.
             */
             #if ${config.driver.psa_crypto.mbedtls_memory_debug}
            #define MBEDTLS_MEMORY_DEBUG
            #endif

            /**
             * \def MBEDTLS_MEMORY_BACKTRACE
             *
             * Include backtrace information with each allocated block.
             *
             * Requires: MBEDTLS_MEMORY_BUFFER_ALLOC_C
             *           GLIBC-compatible backtrace() an backtrace_symbols() support
             *
             * Uncomment this macro to include backtrace information
             */
             #if ${config.driver.psa_crypto.mbedtls_memory_backtrace}
            #define MBEDTLS_MEMORY_BACKTRACE
            #endif

            /**
             * \def MBEDTLS_PK_RSA_ALT_SUPPORT
             *
             * Support external private RSA keys (eg from a HSM) in the PK layer.
             *
             * Comment this macro to disable support for external private RSA keys.
             */
             #if ${config.driver.psa_crypto.mbedtls_pk_rsa_alt_support}
            #define MBEDTLS_PK_RSA_ALT_SUPPORT
            #endif

            /**
             * \def MBEDTLS_PKCS1_V15
             *
             * Enable support for PKCS#1 v1.5 encoding.
             *
             * Requires: MBEDTLS_RSA_C
             *
             * This enables support for PKCS#1 v1.5 operations.
             */
             #if ${config.driver.psa_crypto.mbedtls_pkcs1_v15}
            #define MBEDTLS_PKCS1_V15
            #endif

            /**
             * \def MBEDTLS_PKCS1_V21
             *
             * Enable support for PKCS#1 v2.1 encoding.
             *
             * Requires: MBEDTLS_MD_C, MBEDTLS_RSA_C
             *
             * This enables support for RSAES-OAEP and RSASSA-PSS operations.
             */
             #if ${config.driver.psa_crypto.mbedtls_pkcs1_v21}
            #define MBEDTLS_PKCS1_V21
            #endif

            /** \def MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS
             *
             * Enable support for platform built-in keys. If you enable this feature,
             * you must implement the function mbedtls_psa_platform_get_builtin_key().
             * See the documentation of that function for more information.
             *
             * Built-in keys are typically derived from a hardware unique key or
             * stored in a secure element.
             *
             * Requires: MBEDTLS_PSA_CRYPTO_C.
             *
             * \warning This interface is experimental and may change or be removed
             * without notice.
             */
             #if ${config.driver.psa_crypto.mbedtls_crypto_builtin_keys}
            #define MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS
            #endif

            /** \def MBEDTLS_PSA_CRYPTO_CLIENT
             *
             * Enable support for PSA crypto client.
             *
             * \note This option allows to include the code necessary for a PSA
             *       crypto client when the PSA crypto implementation is not included in
             *       the library (MBEDTLS_PSA_CRYPTO_C disabled). The code included is the
             *       code to set and get PSA key attributes.
             *       The development of PSA drivers partially relying on the library to
             *       fulfill the hardware gaps is another possible usage of this option.
             *
             * \warning This interface is experimental and may change or be removed
             * without notice.
             */
             #if ${config.driver.psa_crypto.mbedtls_psa_crypto_client}
            #define MBEDTLS_PSA_CRYPTO_CLIENT
            #endif

            /** \def MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG
             *
             * Make the PSA Crypto module use an external random generator provided
             * by a driver, instead of Mbed TLS's entropy and DRBG modules.
             *
             * \note This random generator must deliver random numbers with cryptographic
             *       quality and high performance. It must supply unpredictable numbers
             *       with a uniform distribution. The implementation of this function
             *       is responsible for ensuring that the random generator is seeded
             *       with sufficient entropy. If you have a hardware TRNG which is slow
             *       or delivers non-uniform output, declare it as an entropy source
             *       with mbedtls_entropy_add_source() instead of enabling this option.
             *
             * If you enable this option, you must configure the type
             * ::mbedtls_psa_external_random_context_t in psa/crypto_platform.h
             * and define a function called mbedtls_psa_external_get_random()
             * with the following prototype:
             * ```
             * psa_status_t mbedtls_psa_external_get_random(
             *     mbedtls_psa_external_random_context_t *context,
             *     uint8_t *output, size_t output_size, size_t *output_length);
             * );
             * ```
             * The \c context value is initialized to 0 before the first call.
             * The function must fill the \c output buffer with \p output_size bytes
             * of random data and set \c *output_length to \p output_size.
             *
             * Requires: MBEDTLS_PSA_CRYPTO_C
             *
             * \warning If you enable this option, code that uses the PSA cryptography
             *          interface will not use any of the entropy sources set up for
             *          the entropy module, nor the NV seed that MBEDTLS_ENTROPY_NV_SEED
             *          enables.
             *
             * \note This option is experimental and may be removed without notice.
             */
             #if ${config.driver.psa_crypto.mbedtls_crypto_external_rng}
            #define MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG
            #endif

            /**
             * \def MBEDTLS_PSA_CRYPTO_SPM
             *
             * When MBEDTLS_PSA_CRYPTO_SPM is defined, the code is built for SPM (Secure
             * Partition Manager) integration which separates the code into two parts: a
             * NSPE (Non-Secure Process Environment) and an SPE (Secure Process
             * Environment).
             *
             * Module:  library/psa_crypto.c
             * Requires: MBEDTLS_PSA_CRYPTO_C
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_psa_crypto_spm}
            #define MBEDTLS_PSA_CRYPTO_SPM
            #endif

            /**
             * \def MBEDTLS_PSA_INJECT_ENTROPY
             *
             * Enable support for entropy injection at first boot. This feature is
             * required on systems that do not have a built-in entropy source (TRNG).
             * This feature is currently not supported on systems that have a built-in
             * entropy source.
             *
             * Requires: MBEDTLS_PSA_CRYPTO_STORAGE_C, MBEDTLS_ENTROPY_NV_SEED
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_psa_inject_entropy}
            #define MBEDTLS_PSA_INJECT_ENTROPY
            #endif

            /**
             * \def MBEDTLS_RSA_NO_CRT
             *
             * Do not use the Chinese Remainder Theorem
             * for the RSA private operation.
             *
             * Uncomment this macro to disable the use of CRT in RSA.
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_rsa_no_crt}
            #define MBEDTLS_RSA_NO_CRT
            #endif

            /**
             * \def MBEDTLS_SELF_TEST
             *
             * Enable the checkup functions (*_self_test).
             */
            #if ${config.driver.psa_crypto.mbedtls_self_test}
            #define MBEDTLS_SELF_TEST
            #endif

            /**
             * \def MBEDTLS_SHA256_SMALLER
             *
             * Enable an implementation of SHA-256 that has lower ROM footprint but also
             * lower performance.
             *
             * The default implementation is meant to be a reasonnable compromise between
             * performance and size. This version optimizes more aggressively for size at
             * the expense of performance. Eg on Cortex-M4 it reduces the size of
             * mbedtls_sha256_process() from ~2KB to ~0.5KB for a performance hit of about
             * 30%.
             *
             * Uncomment to enable the smaller implementation of SHA256.
             */
             #if ${config.driver.psa_crypto.mbedtls_sha256_smaller}
            #define MBEDTLS_SHA256_SMALLER
            #endif

            /**
             * \def MBEDTLS_SHA512_SMALLER
             *
             * Enable an implementation of SHA-512 that has lower ROM footprint but also
             * lower performance.
             *
             * Uncomment to enable the smaller implementation of SHA512.
             */
            #if ${config.driver.psa_crypto.mbedtls_sha512_smaller}
            #define MBEDTLS_SHA512_SMALLER
            #endif

            /**
             * \def MBEDTLS_THREADING_ALT
             *
             * Provide your own alternate threading implementation.
             *
             * Requires: MBEDTLS_THREADING_C
             *
             * Uncomment this to allow your own alternate threading implementation.
             */
             #if ${config.driver.psa_crypto.mbedtls_threading_alt}
            #define MBEDTLS_THREADING_ALT
            #endif

            /**
             * \def MBEDTLS_THREADING_PTHREAD
             *
             * Enable the pthread wrapper layer for the threading layer.
             *
             * Requires: MBEDTLS_THREADING_C
             *
             * Uncomment this to enable pthread mutexes.
             */
             #if ${config.driver.psa_crypto.mbedtls_threading_pthread}
            #define MBEDTLS_THREADING_PTHREAD
            #endif

            /**
             * \def MBEDTLS_USE_PSA_CRYPTO
             *
             * Make the X.509 and TLS library use PSA for cryptographic operations, and
             * enable new APIs for using keys handled by PSA Crypto.
             *
             * \note Development of this option is currently in progress, and parts of Mbed
             * TLS's X.509 and TLS modules are not ported to PSA yet. However, these parts
             * will still continue to work as usual, so enabling this option should not
             * break backwards compatibility.
             *
             * \note See docs/use-psa-crypto.md for a complete description of what this
             * option currently does, and of parts that are not affected by it so far.
             *
             * \warning This option enables new Mbed TLS APIs which are currently
             * considered experimental and may change in incompatible ways at any time.
             * That is, the APIs enabled by this option are not covered by the usual
             * promises of API stability.
             *
             * Requires: MBEDTLS_PSA_CRYPTO_C.
             *
             * Uncomment this to enable internal use of PSA Crypto and new associated APIs.
             */
             #if ${config.driver.psa_crypto.mbedtls_use_psa_crypto}
            #define MBEDTLS_USE_PSA_CRYPTO
            #endif

            /**
             * \def MBEDTLS_VERSION_FEATURES
             *
             * Allow run-time checking of compile-time enabled features. Thus allowing users
             * to check at run-time if the library is for instance compiled with threading
             * support via mbedtls_version_check_feature().
             *
             * Requires: MBEDTLS_VERSION_C
             *
             * Comment this to disable run-time checking and save ROM space
             */
             #if ${config.driver.psa_crypto.mbedtls_version_features}
            #define MBEDTLS_VERSION_FEATURES
            #endif

            /* \} name SECTION: mbed TLS feature support */

            /**
             * \name SECTION: mbed TLS modules
             *
             * This section enables or disables entire modules in mbed TLS
             * \{
             */

            /**
             * \def MBEDTLS_AESNI_C
             *
             * Enable AES-NI support on x86-64.
             *
             * Module:  library/aesni.c
             * Caller:  library/aes.c
             *
             * Requires: MBEDTLS_HAVE_ASM
             *
             * This modules adds support for the AES-NI instructions on x86-64
             */

            //#define MBEDTLS_AESNI_C

            /**
             * \def MBEDTLS_AES_C
             *
             * Enable the AES block cipher.
             *
             * Module:  library/aes.c
             * Caller:  library/cipher.c
             *          library/pem.c
             *          library/ctr_drbg.c
             *
             * This module is required to support the TLS ciphersuites that use the AES
             * cipher.
             *
             * PEM_PARSE uses AES for decrypting encrypted keys.
             */
             #if ${config.driver.psa_crypto.mbedtls_aes_c}
            #define MBEDTLS_AES_C
            #endif

            /**
             * \def MBEDTLS_ASN1_PARSE_C
             *
             * Enable the generic ASN1 parser.
             *
             * Module:  library/asn1.c
             * Caller:  library/x509.c
             *          library/dhm.c
             *          library/pkcs12.c
             *          library/pkcs5.c
             *          library/pkparse.c
             */
             #if ${config.driver.psa_crypto.mbedtls_asn1_parse_c}
            #define MBEDTLS_ASN1_PARSE_C
            #endif

            /**
             * \def MBEDTLS_ASN1_WRITE_C
             *
             * Enable the generic ASN1 writer.
             *
             * Module:  library/asn1write.c
             * Caller:  library/ecdsa.c
             *          library/pkwrite.c
             *          library/x509_create.c
             *          library/x509write_crt.c
             *          library/x509write_csr.c
             */
             #if ${config.driver.psa_crypto.mbedtls_asn1_write_c}
            #define MBEDTLS_ASN1_WRITE_C
            #endif

            /**
             * \def MBEDTLS_BASE64_C
             *
             * Enable the Base64 module.
             *
             * Module:  library/base64.c
             * Caller:  library/pem.c
             *
             * This module is required for PEM support (required by X.509).
             */
             #if ${config.driver.psa_crypto.mbedtls_base64_c}
            #define MBEDTLS_BASE64_C
            #endif

            /**
             * \def MBEDTLS_BIGNUM_C
             *
             * Enable the multi-precision integer library.
             *
             * Module:  library/bignum.c
             * Caller:  library/dhm.c
             *          library/ecp.c
             *          library/ecdsa.c
             *          library/rsa.c
             *          library/rsa_alt_helpers.c
             *          library/ssl_tls.c
             *
             * This module is required for RSA, DHM and ECC (ECDH, ECDSA) support.
             */
             #if ${config.driver.psa_crypto.mbedtls_bignum_c}
            #define MBEDTLS_BIGNUM_C
            #endif

            /**
             * \def MBEDTLS_CAMELLIA_C
             *
             * Enable the Camellia block cipher.
             *
             * Module:  library/camellia.c
             * Caller:  library/cipher.c
             *
             * This module enables the following ciphersuites (if other requisites are
             * enabled as well):
             */
             #if ${config.driver.psa_crypto.mbedtls_camellia_c}
            #define MBEDTLS_CAMELLIA_C
            #endif

            /**
             * \def MBEDTLS_ARIA_C
             *
             * Enable the ARIA block cipher.
             *
             * Module:  library/aria.c
             * Caller:  library/cipher.c
             *
             * This module enables the following ciphersuites (if other requisites are
             * enabled as well):
             */
             #if ${config.driver.psa_crypto.mbedtls_aria_c}
            #define MBEDTLS_ARIA_C
            #endif

            /**
             * \def MBEDTLS_CCM_C
             *
             * Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher.
             *
             * Module:  library/ccm.c
             *
             * Requires: MBEDTLS_CIPHER_C, MBEDTLS_AES_C or MBEDTLS_CAMELLIA_C or
             *                             MBEDTLS_ARIA_C
             *
             * This module enables the AES-CCM ciphersuites, if other requisites are
             * enabled as well.
             */
             #if ${config.driver.psa_crypto.mbedtls_ccm_c}
            #define MBEDTLS_CCM_C
            #endif

            /**
             * \def MBEDTLS_CHACHA20_C
             *
             * Enable the ChaCha20 stream cipher.
             *
             * Module:  library/chacha20.c
             */
             #if ${config.driver.psa_crypto.mbedtls_chacha20_c}
            #define MBEDTLS_CHACHA20_C
            #endif

            /**
             * \def MBEDTLS_CHACHAPOLY_C
             *
             * Enable the ChaCha20-Poly1305 AEAD algorithm.
             *
             * Module:  library/chachapoly.c
             *
             * This module requires: MBEDTLS_CHACHA20_C, MBEDTLS_POLY1305_C
             */
             #if ${config.driver.psa_crypto.mbedtls_chachapoly_c}
            #define MBEDTLS_CHACHAPOLY_C
            #endif

            /**
             * \def MBEDTLS_CIPHER_C
             *
             * Enable the generic cipher layer.
             *
             * Module:  library/cipher.c
             * Caller:  library/ccm.c
             *          library/cmac.c
             *          library/gcm.c
             *          library/nist_kw.c
             *          library/pkcs12.c
             *          library/pkcs5.c
             *          library/psa_crypto_aead.c
             *          library/psa_crypto_mac.c
             *          library/ssl_ciphersuites.c
             *          library/ssl_msg.c
             *          library/ssl_ticket.c (unless MBEDTLS_USE_PSA_CRYPTO is enabled)
             *
             * Uncomment to enable generic cipher wrappers.
             */
             #if ${config.driver.psa_crypto.mbedtls_cipher_c}
            #define MBEDTLS_CIPHER_C
            #endif

             #if defined(MBEDTLS_AES_ALT)
            #define MBEDTLS_CIPHER_ALT
            #endif

            /**
             * \def MBEDTLS_CMAC_C
             *
             * Enable the CMAC (Cipher-based Message Authentication Code) mode for block
             * ciphers.
             *
             * \note When #MBEDTLS_CMAC_ALT is active, meaning that the underlying
             *       implementation of the CMAC algorithm is provided by an alternate
             *       implementation, that alternate implementation may opt to not support
             *       AES-192 or 3DES as underlying block ciphers for the CMAC operation.
             *
             * Module:  library/cmac.c
             *
             * Requires: MBEDTLS_CIPHER_C, MBEDTLS_AES_C or MBEDTLS_DES_C
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_cmac_c}
            #define MBEDTLS_CMAC_C
            #endif

            /**
             * \def MBEDTLS_CTR_DRBG_C
             *
             * Enable the CTR_DRBG AES-based random generator.
             * The CTR_DRBG generator uses AES-256 by default.
             * To use AES-128 instead, enable \c MBEDTLS_CTR_DRBG_USE_128_BIT_KEY above.
            *
            * \note To achieve a 256-bit security strength with CTR_DRBG,
            *       you must use AES-256 *and* use sufficient entropy.
            *       See ctr_drbg.h for more details.
             *
             * Module:  library/ctr_drbg.c
             * Caller:
             *
             * Requires: MBEDTLS_AES_C
             *
             * This module provides the CTR_DRBG AES random number generator.
             */
             #if ${config.driver.psa_crypto.mbedtls_ctr_drbg_c}
            #define MBEDTLS_CTR_DRBG_C
            #endif

            /**
             * \def MBEDTLS_CTR_DRBG_C_ALT
             *
             * Enable the CTR_DRBG AES-based random generator.
             * The CTR_DRBG generator uses software implementation of AES-256.
             *
             * \note To achieve a 256-bit security strength with CTR_DRBG,
             *       you must use AES-256 *and* use sufficient entropy.
             *
             * Module:  ctr_drbg_alt.c
             * Caller:
             *
             *
             * This module provides the CTR_DRBG AES random number generator.
             */
             #if ${config.driver.psa_crypto.mbedtls_ctr_drbg_c_alt}
              #define MBEDTLS_CTR_DRBG_C_ALT
             #endif

            /**
             * \def MBEDTLS_DES_C
             *
             * Enable the DES block cipher.
             *
             * Module:  library/des.c
             * Caller:  library/pem.c
             *          library/cipher.c
             *
             * PEM_PARSE uses DES/3DES for decrypting encrypted keys.
             *
             * \warning   DES is considered a weak cipher and its use constitutes a
             *            security risk. We recommend considering stronger ciphers instead.
             */
             #if ${config.driver.psa_crypto.mbedtls_des_c}
            #define MBEDTLS_DES_C
            #endif

            /**
             * \def MBEDTLS_DHM_C
             *
             * Enable the Diffie-Hellman-Merkle module.
             *
             * Module:  library/dhm.c
             * Caller:  library/ssl_tls.c
             *          library/ssl*_client.c
             *          library/ssl*_server.c
             *
             * This module is used by the following key exchanges:
             *      DHE-RSA, DHE-PSK
             *
             * \warning    Using DHE constitutes a security risk as it
             *             is not possible to validate custom DH parameters.
             *             If possible, it is recommended users should consider
             *             preferring other methods of key exchange.
             *             See dhm.h for more details.
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_dhm_c}
            #define MBEDTLS_DHM_C
            #endif

            /**
             * \def MBEDTLS_ECDH_C
             *
             * Enable the elliptic curve Diffie-Hellman library.
             *
             * Module:  library/ecdh.c
             * Caller:  library/ssl_cli.c
             *          library/ssl_srv.c
             *
             * This module is used by the following key exchanges:
             *      ECDHE-ECDSA, ECDHE-RSA, DHE-PSK
             *
             * Requires: MBEDTLS_ECP_C
             */
             #if ${config.driver.psa_crypto.mbedtls_ecdh_c}
            #define MBEDTLS_ECDH_C
            #if ${config.driver.psa_crypto.mbedtls_ecdh_alt}
            #define MBEDTLS_ECDH_ALT
            #endif
            #endif

            /**
             * \def MBEDTLS_ECDSA_C
             *
             * Enable the elliptic curve DSA library.
             *
             * Module:  library/ecdsa.c
             * Caller:
             *
             * This module is used by the following key exchanges:
             *      ECDHE-ECDSA
             *
             * Requires: MBEDTLS_ECP_C, MBEDTLS_ASN1_WRITE_C, MBEDTLS_ASN1_PARSE_C,
             *           and at least one MBEDTLS_ECP_DP_XXX_ENABLED for a
             *           short Weierstrass curve.
             */
             #if ${config.driver.psa_crypto.mbedtls_ecdsa_c}
            #define MBEDTLS_ECDSA_C
            #endif

            /**
             * \def MBEDTLS_ECJPAKE_C
             *
             * Enable the elliptic curve J-PAKE library.
             *
             * \note EC J-PAKE support is based on the Thread v1.0.0 specification.
             *       It has not been reviewed for compliance with newer standards such as
             *       Thread v1.1 or RFC 8236.
             *
             * Module:  library/ecjpake.c
             * Caller:
             *
             * This module is used by the following key exchanges:
             *      ECJPAKE
             *
             * Requires: MBEDTLS_ECP_C, MBEDTLS_MD_C
             */
             #if ${config.driver.psa_crypto.mbedtls_ecjpake_c}
            #define MBEDTLS_ECJPAKE_C
            #endif

            /**
             * \def MBEDTLS_ECP_C
             *
             * Enable the elliptic curve over GF(p) library.
             *
             * Module:  library/ecp.c
             * Caller:  library/ecdh.c
             *          library/ecdsa.c
             *          library/ecjpake.c
             *
             * Requires: MBEDTLS_BIGNUM_C and at least one MBEDTLS_ECP_DP_XXX_ENABLED
             */
             #if ${config.driver.psa_crypto.mbedtls_ecp_c}
            #define MBEDTLS_ECP_C
            #endif

            /**
             * \def MBEDTLS_ENTROPY_C
             *
             * Enable the platform-specific entropy code.
             *
             * Module:  library/entropy.c
             * Caller:
             *
             * Requires: MBEDTLS_SHA512_C or MBEDTLS_SHA256_C
             *
             * This module provides a generic entropy pool
             */
             #if ${config.driver.psa_crypto.mbedtls_entropy_c}
            #define MBEDTLS_ENTROPY_C
            #endif

            /**
             * \def MBEDTLS_ERROR_C
             *
             * Enable error code to error string conversion.
             *
             * Module:  library/error.c
             * Caller:
             *
             * This module enables mbedtls_strerror().
             */
             #if ${config.driver.psa_crypto.mbedtls_error_c}
            #define MBEDTLS_ERROR_C
            #endif

            /**
             * \def MBEDTLS_GCM_C
             *
             * Enable the Galois/Counter Mode (GCM).
             *
             * Module:  library/gcm.c
             *
             * Requires: MBEDTLS_CIPHER_C, MBEDTLS_AES_C or MBEDTLS_CAMELLIA_C or
             *                             MBEDTLS_ARIA_C
             *
             * This module enables the AES-GCM and CAMELLIA-GCM ciphersuites, if other
             * requisites are enabled as well.
             */
             #if ${config.driver.psa_crypto.mbedtls_gcm_c}
            #define MBEDTLS_GCM_C
            #endif

            /**
             * \def MBEDTLS_HKDF_C
             *
             * Enable the HKDF algorithm (RFC 5869).
             *
             * Module:  library/hkdf.c
             * Caller:
             *
             * Requires: MBEDTLS_MD_C
             *
             * This module adds support for the Hashed Message Authentication Code
             * (HMAC)-based key derivation function (HKDF).
             */
             #if ${config.driver.psa_crypto.mbedtls_hkdf_c}
            #define MBEDTLS_HKDF_C
            #endif

            /**
             * \def MBEDTLS_HMAC_DRBG_C
             *
             * Enable the HMAC_DRBG random generator.
             *
             * Module:  library/hmac_drbg.c
             * Caller:
             *
             * Requires: MBEDTLS_MD_C
             *
             * Uncomment to enable the HMAC_DRBG random number generator.
             */
             #if ${config.driver.psa_crypto.mbedtls_hmac_drbg_c}
            #define MBEDTLS_HMAC_DRBG_C
            #endif

            /**
             * \def MBEDTLS_NIST_KW_C
             *
             * Enable the Key Wrapping mode for 128-bit block ciphers,
             * as defined in NIST SP 800-38F. Only KW and KWP modes
             * are supported. At the moment, only AES is approved by NIST.
             *
             * Module:  library/nist_kw.c
             *
             * Requires: MBEDTLS_AES_C and MBEDTLS_CIPHER_C
             */
             #if ${config.driver.psa_crypto.mbedtls_nist_kw_c}
            #define MBEDTLS_NIST_KW_C
            #endif

            /**
             * \def MBEDTLS_MD_C
             *
             * Enable the generic message digest layer.
             *
             * Module:  library/md.c
             * Caller:  library/constant_time.c
             *          library/ecdsa.c
             *          library/ecjpake.c
             *          library/hkdf.c
             *          library/hmac_drbg.c
             *          library/pk.c
             *          library/pkcs5.c
             *          library/pkcs12.c
             *          library/psa_crypto_ecp.c
             *          library/psa_crypto_rsa.c
             *          library/rsa.c
             *          library/ssl_cookie.c
             *          library/ssl_msg.c
             *          library/ssl_tls.c
             *          library/x509.c
             *          library/x509_crt.c
             *          library/x509write_crt.c
             *          library/x509write_csr.c
             *
             * Uncomment to enable generic message digest wrappers.
             */
             #if ${config.driver.psa_crypto.mbedtls_md_c}
            #define MBEDTLS_MD_C
            #endif

            /**
             * \def MBEDTLS_MD5_C
             *
             * Enable the MD5 hash algorithm.
             *
             * Module:  library/md5.c
             * Caller:  library/md.c
             *          library/pem.c
             *          library/ssl_tls.c
             *
             * This module is required for TLS 1.2 depending on the handshake parameters.
             * Further, it is used for checking MD5-signed certificates, and for PBKDF1
             * when decrypting PEM-encoded encrypted keys.
             *
             * \warning   MD5 is considered a weak message digest and its use constitutes a
             *            security risk. If possible, we recommend avoiding dependencies on
             *            it, and considering stronger message digests instead.
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_md5_c}
            #define MBEDTLS_MD5_C
            #endif

            /**
             * \def MBEDTLS_MEMORY_BUFFER_ALLOC_C
             *
             * Enable the buffer allocator implementation that makes use of a (stack)
             * based buffer to 'allocate' dynamic memory. (replaces calloc() and free()
             * calls)
             *
             * Module:  library/memory_buffer_alloc.c
             *
             * Requires: MBEDTLS_PLATFORM_C
             *           MBEDTLS_PLATFORM_MEMORY (to use it within mbed TLS)
             *
             * Enable this module to enable the buffer memory allocator.
             */
             #if ${config.driver.psa_crypto.mbedtls_memory_buffer_alloc_c}
            #define MBEDTLS_MEMORY_BUFFER_ALLOC_C
            #endif

            /**
             * \def MBEDTLS_OID_C
             *
             * Enable the OID database.
             *
             * Module:  library/oid.c
             * Caller:  library/asn1write.c
             *          library/pkcs5.c
             *          library/pkparse.c
             *          library/pkwrite.c
             *          library/rsa.c
             *          library/x509.c
             *          library/x509_create.c
             *          library/x509_crl.c
             *          library/x509_crt.c
             *          library/x509_csr.c
             *          library/x509write_crt.c
             *          library/x509write_csr.c
             *
             * This modules translates between OIDs and internal values.
             */
             #if ${config.driver.psa_crypto.mbedtls_oid_c}
            #define MBEDTLS_OID_C
            #endif

            /**
             * \def MBEDTLS_PADLOCK_C
             *
             * Enable VIA Padlock support on x86.
             *
             * Module:  library/padlock.c
             * Caller:  library/aes.c
             *
             * Requires: MBEDTLS_HAVE_ASM
             *
             * This modules adds support for the VIA PadLock on x86.
             */

            //#define MBEDTLS_PADLOCK_C

            /**
             * \def MBEDTLS_PEM_PARSE_C
             *
             * Enable PEM decoding / parsing.
             *
             * Module:  library/pem.c
             * Caller:  library/dhm.c
             *          library/pkparse.c
             *          library/x509_crl.c
             *          library/x509_crt.c
             *          library/x509_csr.c
             *
             * Requires: MBEDTLS_BASE64_C
             *
             * This modules adds support for decoding / parsing PEM files.
             */
             #if ${config.driver.psa_crypto.mbedtls_pem_parse_c}
            #define MBEDTLS_PEM_PARSE_C
            #endif

            /**
             * \def MBEDTLS_PEM_WRITE_C
             *
             * Enable PEM encoding / writing.
             *
             * Module:  library/pem.c
             * Caller:  library/pkwrite.c
             *          library/x509write_crt.c
             *          library/x509write_csr.c
             *
             * Requires: MBEDTLS_BASE64_C
             *
             * This modules adds support for encoding / writing PEM files.
             */
             #if ${config.driver.psa_crypto.mbedtls_pem_write_c}
            #define MBEDTLS_PEM_WRITE_C
            #endif

            /**
             * \def MBEDTLS_PK_C
             *
             * Enable the generic public (asymmetric) key layer.
             *
             * Module:  library/pk.c
             * Caller:  library/psa_crypto_rsa.c
             *          library/ssl_tls.c
             *          library/ssl*_client.c
             *          library/ssl*_server.c
             *          library/x509.c
             *
             * Requires: MBEDTLS_MD_C, MBEDTLS_RSA_C or MBEDTLS_ECP_C
             *
             * Uncomment to enable generic public key wrappers.
             */
             #if ${config.driver.psa_crypto.mbedtls_pk_c}
            #define MBEDTLS_PK_C
            #endif

            /**
             * \def MBEDTLS_PK_PARSE_C
             *
             * Enable the generic public (asymmetric) key parser.
             *
             * Module:  library/pkparse.c
             * Caller:  library/x509_crt.c
             *          library/x509_csr.c
             *
             * Requires: MBEDTLS_PK_C
             *
             * Uncomment to enable generic public key parse functions.
             */
             #if ${config.driver.psa_crypto.mbedtls_pk_parse_c}
            #define MBEDTLS_PK_PARSE_C
            #endif

            /**
             * \def MBEDTLS_PK_WRITE_C
             *
             * Enable the generic public (asymmetric) key writer.
             *
             * Module:  library/pkwrite.c
             * Caller:  library/x509write.c
             *
             * Requires: MBEDTLS_PK_C
             *
             * Uncomment to enable generic public key write functions.
             */
             #if ${config.driver.psa_crypto.mbedtls_pk_write_c}
            #define MBEDTLS_PK_WRITE_C
            #endif

            /**
             * \def MBEDTLS_PKCS5_C
             *
             * Enable PKCS#5 functions.
             *
             * Module:  library/pkcs5.c
             *
             * Requires: MBEDTLS_CIPHER_C, MBEDTLS_MD_C
             *
             * This module adds support for the PKCS#5 functions.
             */
             #if ${config.driver.psa_crypto.mbedtls_pkcs5_c}
            #define MBEDTLS_PKCS5_C
            #endif

            /**
             * \def MBEDTLS_PKCS12_C
             *
             * Enable PKCS#12 PBE functions.
             * Adds algorithms for parsing PKCS#8 encrypted private keys
             *
             * Module:  library/pkcs12.c
             * Caller:  library/pkparse.c
             *
             * Requires: MBEDTLS_ASN1_PARSE_C, MBEDTLS_CIPHER_C, MBEDTLS_MD_C
             *
             * This module enables PKCS#12 functions.
             */
             #if ${config.driver.psa_crypto.mbedtls_pkcs12_c}
            #define MBEDTLS_PKCS12_C
            #endif

            /**
             * \def MBEDTLS_PLATFORM_C
             *
             * Enable the platform abstraction layer that allows you to re-assign
             * functions like calloc(), free(), snprintf(), printf(), fprintf(), exit().
             *
             * Enabling MBEDTLS_PLATFORM_C enables to use of MBEDTLS_PLATFORM_XXX_ALT
             * or MBEDTLS_PLATFORM_XXX_MACRO directives, allowing the functions mentioned
             * above to be specified at runtime or compile time respectively.
             *
             * \note This abstraction layer must be enabled on Windows (including MSYS2)
             * as other module rely on it for a fixed snprintf implementation.
             *
             * Module:  library/platform.c
             * Caller:  Most other .c files
             *
             * This module enables abstraction of common (libc) functions.
             */
             #if ${config.driver.psa_crypto.mbedtls_platform_c}
            #define MBEDTLS_PLATFORM_C
            #endif

            /**
             * \def MBEDTLS_POLY1305_C
             *
             * Enable the Poly1305 MAC algorithm.
             *
             * Module:  library/poly1305.c
             * Caller:  library/chachapoly.c
             */
             #if ${config.driver.psa_crypto.mbedtls_poly1305_c}
            #define MBEDTLS_POLY1305_C
            #endif

            /**
             * \def MBEDTLS_PSA_CRYPTO_C
             *
             * Enable the Platform Security Architecture cryptography API.
             *
             * Module:  library/psa_crypto.c
             *
             * Requires: MBEDTLS_CIPHER_C,
             *           either MBEDTLS_CTR_DRBG_C and MBEDTLS_ENTROPY_C,
             *           or MBEDTLS_HMAC_DRBG_C and MBEDTLS_ENTROPY_C,
             *           or MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG.
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_psa_crypto_c}
            #define MBEDTLS_PSA_CRYPTO_C
            #endif

            /**
             * \def MBEDTLS_PSA_CRYPTO_SE_C
             *
             * Enable dynamic secure element support in the Platform Security Architecture
             * cryptography API.
             *
             * \deprecated This feature is deprecated. Please switch to the driver
             *             interface enabled by #MBEDTLS_PSA_CRYPTO_DRIVERS.
             *
             * Module:  library/psa_crypto_se.c
             *
             * Requires: MBEDTLS_PSA_CRYPTO_C, MBEDTLS_PSA_CRYPTO_STORAGE_C
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_psa_crypto_se_c}
            #define MBEDTLS_PSA_CRYPTO_SE_C
            #endif

            /**
            * \def MBEDTLS_PSA_CRYPTO_ACCEL_DRV_C
            *
            * Enable the crypto accelerator support in the Platform Security Architecture
            * cryptography API.
            *
            * \warning This must be defined to use wrapped keys.
            * This must not be underfined even if PSA_CRYPTO_IS_WRAPPED_SUPPORT_REQUIRED()
            * is false for all keys because if the user then specifies vendor-type lifetime
            * the plaintext code will be invoked.
            *
            *
            * Requires: MBEDTLS_PSA_CRYPTO_C
            *
            */

            #define MBEDTLS_PSA_CRYPTO_ACCEL_DRV_C

            /**
             * \def MBEDTLS_PSA_CRYPTO_STORAGE_C
             *
             * Enable the Platform Security Architecture persistent key storage.
             *
             * Module:  library/psa_crypto_storage.c
             *
             * Requires: MBEDTLS_PSA_CRYPTO_C,
             *           either MBEDTLS_PSA_ITS_FILE_C or a native implementation of
             *           the PSA ITS interface
             */
             #if ${config.driver.psa_crypto.mbedtls_psa_crypto_storage_c}
            #define MBEDTLS_PSA_CRYPTO_STORAGE_C
            #endif

            /**
             * \def MBEDTLS_PSA_ITS_FILE_C
             *
             * Enable the emulation of the Platform Security Architecture
             * Internal Trusted Storage (PSA ITS) over files.
             *
             * Module:  library/psa_its_file.c
             *
             * Requires: MBEDTLS_FS_IO
             */
             #if ${config.driver.psa_crypto.mbedtls_psa_its_file_c}
            #define MBEDTLS_PSA_ITS_FILE_C
            #endif

            /**
             * \def MBEDTLS_RIPEMD160_C
             *
             * Enable the RIPEMD-160 hash algorithm.
             *
             * Module:  library/ripemd160.c
             * Caller:  library/md.c
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_ripemd160_c}
            #define MBEDTLS_RIPEMD160_C
            #endif

            /**
             * \def MBEDTLS_RSA_C
             *
             * Enable the RSA public-key cryptosystem.
             *
             * Module:  library/rsa.c
             *          library/rsa_alt_helpers.c
             * Caller:  library/pk.c
             *          library/psa_crypto.c
             *          library/ssl_tls.c
             *          library/ssl*_client.c
             *          library/ssl*_server.c
             *
             * This module is used by the following key exchanges:
             *      RSA, DHE-RSA, ECDHE-RSA, RSA-PSK
             *
             * Requires: MBEDTLS_BIGNUM_C, MBEDTLS_OID_C
             */
             #if ${config.driver.psa_crypto.mbedtls_rsa_c}
            #define MBEDTLS_RSA_C
            #endif

            /**
             * \def MBEDTLS_SHA1_C
             *
             * Enable the SHA1 cryptographic hash algorithm.
             *
             * Module:  library/sha1.c
             * Caller:  library/md.c
             *          library/psa_crypto_hash.c
             *
             * This module is required for TLS 1.2 depending on the handshake parameters,
             * and for SHA1-signed certificates.
             *
             * \warning   SHA-1 is considered a weak message digest and its use constitutes
             *            a security risk. If possible, we recommend avoiding dependencies
             *            on it, and considering stronger message digests instead.
             *
             */
             #if ${config.driver.psa_crypto.mbedtls_sha1_c}
            #define MBEDTLS_SHA1_C
            #endif

            /**
             * \def MBEDTLS_SHA224_C
             *
             * Enable the SHA-224 cryptographic hash algorithm.
             *
             * Requires: MBEDTLS_SHA256_C. The library does not currently support enabling
             *           SHA-224 without SHA-256.
             *
             * Module:  library/sha256.c
             * Caller:  library/md.c
             *          library/ssl_cookie.c
             *
             * This module adds support for SHA-224.
             */
             #if ${config.driver.psa_crypto.mbedtls_sha224_c}
            #define MBEDTLS_SHA224_C
            #endif

            /**
             * \def MBEDTLS_SHA256_C
             *
             * Enable the SHA-256 cryptographic hash algorithm.
             *
             * Requires: MBEDTLS_SHA224_C. The library does not currently support enabling
             *           SHA-256 without SHA-224.
             *
             * Module:  library/sha256.c
             * Caller:  library/entropy.c
             *          library/md.c
             *          library/ssl_cli.c
             *          library/ssl_srv.c
             *          library/ssl_tls.c
             *          library/ssl*_client.c
             *          library/ssl*_server.c
             *
             * This module adds support for SHA-256.
             * This module is required for the SSL/TLS 1.2 PRF function.
             */
             #if ${config.driver.psa_crypto.mbedtls_sha256_c}
            #define MBEDTLS_SHA256_C
            #endif

            /**
             * \def MBEDTLS_SHA256_USE_A64_CRYPTO_IF_PRESENT
             *
             * Enable acceleration of the SHA-256 and SHA-224 cryptographic hash algorithms
             * with the ARMv8 cryptographic extensions if they are available at runtime.
             * If not, the library will fall back to the C implementation.
             *
             * \note If MBEDTLS_SHA256_USE_A64_CRYPTO_IF_PRESENT is defined when building
             * for a non-Aarch64 build it will be silently ignored.
             *
             * \note The code uses Neon intrinsics, so \c CFLAGS must be set to a minimum
             * of \c -march=armv8-a+crypto.
             *
             * \warning MBEDTLS_SHA256_USE_A64_CRYPTO_IF_PRESENT cannot be defined at the
             * same time as MBEDTLS_SHA256_USE_A64_CRYPTO_ONLY.
             *
             * Requires: MBEDTLS_SHA256_C.
             *
             * Module:  library/sha256.c
             *
             * Uncomment to have the library check for the A64 SHA-256 crypto extensions
             * and use them if available.
             */
            //#define MBEDTLS_SHA256_USE_A64_CRYPTO_IF_PRESENT

            /**
             * \def MBEDTLS_SHA256_USE_A64_CRYPTO_ONLY
             *
             * Enable acceleration of the SHA-256 and SHA-224 cryptographic hash algorithms
             * with the ARMv8 cryptographic extensions, which must be available at runtime
             * or else an illegal instruction fault will occur.
             *
             * \note This allows builds with a smaller code size than with
             * MBEDTLS_SHA256_USE_A64_CRYPTO_IF_PRESENT
             *
             * \note The code uses Neon intrinsics, so \c CFLAGS must be set to a minimum
             * of \c -march=armv8-a+crypto.
             *
             * \warning MBEDTLS_SHA256_USE_A64_CRYPTO_ONLY cannot be defined at the same
             * time as MBEDTLS_SHA256_USE_A64_CRYPTO_IF_PRESENT.
             *
             * Requires: MBEDTLS_SHA256_C.
             *
             * Module:  library/sha256.c
             *
             * Uncomment to have the library use the A64 SHA-256 crypto extensions
             * unconditionally.
             */
            //#define MBEDTLS_SHA256_USE_A64_CRYPTO_ONLY

            /**
             * \def MBEDTLS_SHA384_C
             *
             * Enable the SHA-384 cryptographic hash algorithm.
             *
             * Requires: MBEDTLS_SHA512_C
             *
             * Module:  library/sha512.c
             * Caller:  library/md.c
             *          library/psa_crypto_hash.c
             *          library/ssl_tls.c
             *          library/ssl*_client.c
             *          library/ssl*_server.c
             *
             * Comment to disable SHA-384
             */
             #if ${config.driver.psa_crypto.mbedtls_sha384_c}
            #define MBEDTLS_SHA384_C
            #endif

            /**
             * \def MBEDTLS_SHA512_C
             *
             * Enable SHA-512 cryptographic hash algorithms.
             *
             * Module:  library/sha512.c
             * Caller:  library/entropy.c
             *          library/md.c
             *          library/ssl_tls.c
             *          library/ssl_cookie.c
             *
             * This module adds support for SHA-512.
             */
             #if ${config.driver.psa_crypto.mbedtls_sha512_c}
            #define MBEDTLS_SHA512_C
            #endif

            /**
             * \def MBEDTLS_SHA512_USE_A64_CRYPTO_IF_PRESENT
             *
             * Enable acceleration of the SHA-512 and SHA-384 cryptographic hash algorithms
             * with the ARMv8 cryptographic extensions if they are available at runtime.
             * If not, the library will fall back to the C implementation.
             *
             * \note If MBEDTLS_SHA512_USE_A64_CRYPTO_IF_PRESENT is defined when building
             * for a non-Aarch64 build it will be silently ignored.
             *
             * \note The code uses the SHA-512 Neon intrinsics, so requires GCC >= 8 or
             * Clang >= 7, and \c CFLAGS must be set to a minimum of
             * \c -march=armv8.2-a+sha3. An optimisation level of \c -O3 generates the
             * fastest code.
             *
             * \warning MBEDTLS_SHA512_USE_A64_CRYPTO_IF_PRESENT cannot be defined at the
             * same time as MBEDTLS_SHA512_USE_A64_CRYPTO_ONLY.
             *
             * Requires: MBEDTLS_SHA512_C.
             *
             * Module:  library/sha512.c
             *
             * Uncomment to have the library check for the A64 SHA-512 crypto extensions
             * and use them if available.
             */
            //#define MBEDTLS_SHA512_USE_A64_CRYPTO_IF_PRESENT

            /**
             * \def MBEDTLS_SHA512_USE_A64_CRYPTO_ONLY
             *
             * Enable acceleration of the SHA-512 and SHA-384 cryptographic hash algorithms
             * with the ARMv8 cryptographic extensions, which must be available at runtime
             * or else an illegal instruction fault will occur.
             *
             * \note This allows builds with a smaller code size than with
             * MBEDTLS_SHA512_USE_A64_CRYPTO_IF_PRESENT
             *
             * \note The code uses the SHA-512 Neon intrinsics, so requires GCC >= 8 or
             * Clang >= 7, and \c CFLAGS must be set to a minimum of
             * \c -march=armv8.2-a+sha3. An optimisation level of \c -O3 generates the
             * fastest code.
             *
             * \warning MBEDTLS_SHA512_USE_A64_CRYPTO_ONLY cannot be defined at the same
             * time as MBEDTLS_SHA512_USE_A64_CRYPTO_IF_PRESENT.
             *
             * Requires: MBEDTLS_SHA512_C.
             *
             * Module:  library/sha512.c
             *
             * Uncomment to have the library use the A64 SHA-512 crypto extensions
             * unconditionally.
             */
            //#define MBEDTLS_SHA512_USE_A64_CRYPTO_ONLY

            /**
             * \def MBEDTLS_THREADING_C
             *
             * Enable the threading abstraction layer.
             * By default mbed TLS assumes it is used in a non-threaded environment or that
             * contexts are not shared between threads. If you do intend to use contexts
             * between threads, you will need to enable this layer to prevent race
             * conditions. See also our Knowledge Base article about threading:
             * https://tls.mbed.org/kb/development/thread-safety-and-multi-threading
             *
             * Module:  library/threading.c
             *
             * This allows different threading implementations (self-implemented or
             * provided).
             *
             * You will have to enable either MBEDTLS_THREADING_ALT or
             * MBEDTLS_THREADING_PTHREAD.
             *
             * Enable this layer to allow use of mutexes within mbed TLS
             */
             #if ${config.driver.psa_crypto.mbedtls_threading_c}
            #define MBEDTLS_THREADING_C
            #endif

            /**
             * \def MBEDTLS_TIMING_C
             *
             * Enable the semi-portable timing interface.
             *
             * \note The provided implementation only works on POSIX/Unix (including Linux,
             * BSD and OS X) and Windows. On other platforms, you can either disable that
             * module and provide your own implementations of the callbacks needed by
             * \c mbedtls_ssl_set_timer_cb() for DTLS, or leave it enabled and provide
             * your own implementation of the whole module by setting
             * \c MBEDTLS_TIMING_ALT in the current file.
             *
             * \note The timing module will include time.h on suitable platforms
             *       regardless of the setting of MBEDTLS_HAVE_TIME, unless
             *       MBEDTLS_TIMING_ALT is used. See timing.c for more information.
             *
             * \note See also our Knowledge Base article about porting to a new
             * environment:
             * https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS
             *
             * Module:  library/timing.c
             */
             #if ${config.driver.psa_crypto.mbedtls_timing_c}
            #define MBEDTLS_TIMING_C
            #endif

            /**
             * \def MBEDTLS_VERSION_C
             *
             * Enable run-time version information.
             *
             * Module:  library/version.c
             *
             * This module provides run-time version information.
             */
             #if ${config.driver.psa_crypto.mbedtls_version_c}
            #define MBEDTLS_VERSION_C
            #endif


            /* \} name SECTION: mbed TLS modules */

            /**
            * \name SECTION: General configuration options
            *
            * This section contains Mbed TLS build settings that are not associated
            * with a particular module.
            *
            * \{
            */

            /**
            * \def MBEDTLS_CONFIG_FILE
            *
            * If defined, this is a header which will be included instead of
            * `"mbedtls/mbedtls_config.h"`.
            * This header file specifies the compile-time configuration of Mbed TLS.
            * Unlike other configuration options, this one must be defined on the
            * compiler command line: a definition in `mbedtls_config.h` would have
            * no effect.
            *
            * This macro is expanded after an #include directive. This is a popular but
            * non-standard feature of the C language, so this feature is only available
            * with compilers that perform macro expansion on an #include line.
            *
            * The value of this symbol is typically a path in double quotes, either
            * absolute or relative to a directory on the include search path.
            */
            //#define MBEDTLS_CONFIG_FILE "mbedtls/mbedtls_config.h"

            /**
            * \def MBEDTLS_USER_CONFIG_FILE
            *
            * If defined, this is a header which will be included after
            * `"mbedtls/mbedtls_config.h"` or #MBEDTLS_CONFIG_FILE.
            * This allows you to modify the default configuration, including the ability
            * to undefine options that are enabled by default.
            *
            * This macro is expanded after an #include directive. This is a popular but
            * non-standard feature of the C language, so this feature is only available
            * with compilers that perform macro expansion on an #include line.
            *
            * The value of this symbol is typically a path in double quotes, either
            * absolute or relative to a directory on the include search path.
            */
            //#define MBEDTLS_USER_CONFIG_FILE "/dev/null"

            /**
            * \def MBEDTLS_PSA_CRYPTO_CONFIG_FILE
            *
            * If defined, this is a header which will be included instead of
            * `"psa/crypto_config.h"`.
            * This header file specifies which cryptographic mechanisms are available
            * through the PSA API when #MBEDTLS_PSA_CRYPTO_CONFIG is enabled, and
            * is not used when #MBEDTLS_PSA_CRYPTO_CONFIG is disabled.
            *
            * This macro is expanded after an #include directive. This is a popular but
            * non-standard feature of the C language, so this feature is only available
            * with compilers that perform macro expansion on an #include line.
            *
            * The value of this symbol is typically a path in double quotes, either
            * absolute or relative to a directory on the include search path.
            */
            //#define MBEDTLS_PSA_CRYPTO_CONFIG_FILE "psa/crypto_config.h"

            /**
            * \def MBEDTLS_PSA_CRYPTO_USER_CONFIG_FILE
            *
            * If defined, this is a header which will be included after
            * `"psa/crypto_config.h"` or #MBEDTLS_PSA_CRYPTO_CONFIG_FILE.
            * This allows you to modify the default configuration, including the ability
            * to undefine options that are enabled by default.
            *
            * This macro is expanded after an #include directive. This is a popular but
            * non-standard feature of the C language, so this feature is only available
            * with compilers that perform macro expansion on an #include line.
            *
            * The value of this symbol is typically a path in double quotes, either
            * absolute or relative to a directory on the include search path.
            */
            //#define MBEDTLS_PSA_CRYPTO_USER_CONFIG_FILE "/dev/null"

            /** \} name SECTION: General configuration options */

            /**
             * \name SECTION: Module configuration options
             *
             * This section allows for the setting of module specific sizes and
             * configuration options. The default values are already present in the
             * relevant header files and should suffice for the regular use cases.
             *
             * Our advice is to enable options and change their values here
             * only if you have a good reason and know the consequences.
             * \{
             */
            /* The Doxygen documentation here is used when a user comments out a
             * setting and runs doxygen themselves. On the other hand, when we typeset
             * the full documentation including disabled settings, the documentation
             * in specific modules' header files is used if present. When editing this
             * file, make sure that each option is documented in exactly one place,
             * plus optionally a same-line Doxygen comment here if there is a Doxygen
             * comment in the specific module. */

            /* MPI / BIGNUM options */
            #if ${config.driver.psa_crypto.mbedtls_mpi_window_size}
            #define MBEDTLS_MPI_WINDOW_SIZE            ${config.driver.psa_crypto.mbedtls_mpi_window_size_value}/** Maximum windows size used. */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_mpi_max_size}
            #define MBEDTLS_MPI_MAX_SIZE            ${config.driver.psa_crypto.mbedtls_mpi_max_size_value}/** Maximum number of bytes for usable MPIs. */
            #endif

            /* CTR_DRBG options */
            #if ${config.driver.psa_crypto.mbedtls_ctr_drbg_entropy_len}
            #define MBEDTLS_CTR_DRBG_ENTROPY_LEN               ${config.driver.psa_crypto.mbedtls_ctr_drbg_entropy_len_value}/** Amount of entropy used per seed by default (48 with SHA-512, 32 with SHA-256) */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ctr_drbg_reseed_interval}
            #define MBEDTLS_CTR_DRBG_RESEED_INTERVAL        ${config.driver.psa_crypto.mbedtls_ctr_drbg_reseed_interval_value}/** Interval before reseed is performed by default */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ctr_drbg_max_input}
            #define MBEDTLS_CTR_DRBG_MAX_INPUT                ${config.driver.psa_crypto.mbedtls_ctr_drbg_max_input_value}/** Maximum number of additional input bytes */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ctr_drbg_max_request}
            #define MBEDTLS_CTR_DRBG_MAX_REQUEST             ${config.driver.psa_crypto.mbedtls_ctr_drbg_max_request_value}/** Maximum number of requested bytes per call */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ctr_drbg_max_seed_input}
            #define MBEDTLS_CTR_DRBG_MAX_SEED_INPUT           ${config.driver.psa_crypto.mbedtls_ctr_drbg_max_seed_input_value}/** Maximum size of (re)seed buffer */
            #endif

            /* HMAC_DRBG options */
            #if ${config.driver.psa_crypto.mbedtls_hmac_drbg_reseed_interval}
            #define MBEDTLS_HMAC_DRBG_RESEED_INTERVAL   ${config.driver.psa_crypto.mbedtls_hmac_drbg_reseed_interval_value}/** Interval before reseed is performed by default */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_hmac_drbg_max_input}
            #define MBEDTLS_HMAC_DRBG_MAX_INPUT           ${config.driver.psa_crypto.mbedtls_hmac_drbg_max_input_value}/** Maximum number of additional input bytes */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_hmac_drbg_max_request}
            #define MBEDTLS_HMAC_DRBG_MAX_REQUEST        ${config.driver.psa_crypto.mbedtls_hmac_drbg_max_request_value}/** Maximum number of requested bytes per call */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_hmac_drbg_max_seed_input}
            #define MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT      ${config.driver.psa_crypto.mbedtls_hmac_drbg_max_seed_input_value}/** Maximum size of (re)seed buffer */
            #endif

            /* ECP options */
            #if ${config.driver.psa_crypto.mbedtls_ecp_window_size}
            #define MBEDTLS_ECP_WINDOW_SIZE            ${config.driver.psa_crypto.mbedtls_ecp_window_size_value}/** Maximum window size used */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_ecp_fixed_point_optim}
            #define MBEDTLS_ECP_FIXED_POINT_OPTIM      ${config.driver.psa_crypto.mbedtls_ecp_fixed_point_optim_value}/** Enable fixed-point speed-up */
            #endif

            /* Entropy options */
            #if ${config.driver.psa_crypto.mbedtls_entropy_max_sources}
            #define MBEDTLS_ENTROPY_MAX_SOURCES                ${config.driver.psa_crypto.mbedtls_entropy_max_sources_value}/** Maximum number of sources supported */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_entropy_max_gather}
            #define MBEDTLS_ENTROPY_MAX_GATHER                ${config.driver.psa_crypto.mbedtls_entropy_max_gather_value}/** Maximum amount requested from entropy sources */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_entropy_min_hardware}
            #define MBEDTLS_ENTROPY_MIN_HARDWARE               ${config.driver.psa_crypto.mbedtls_entropy_min_hardware_value}/** Default minimum number of bytes required for the hardware entropy source mbedtls_hardware_poll() before entropy is released */
            #endif

            /* Memory buffer allocator options */
            #if ${config.driver.psa_crypto.mbedtls_memory_align_multiple}
            #define MBEDTLS_MEMORY_ALIGN_MULTIPLE      ${config.driver.psa_crypto.mbedtls_memory_align_multiple_value}/** Align on multiples of this value */
            #endif

            /* Platform options */
            #if ${config.driver.psa_crypto.mbedtls_platform_std_calloc}
            #define MBEDTLS_PLATFORM_STD_CALLOC        ${config.driver.psa_crypto.mbedtls_platform_std_calloc_value}/** Default allocator to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_free}
            #define MBEDTLS_PLATFORM_STD_FREE            ${config.driver.psa_crypto.mbedtls_platform_std_free_value}/** Default free to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_setbuf}
            #define MBEDTLS_PLATFORM_STD_SETBUF            ${config.driver.psa_crypto.mbedtls_platform_std_setbuf_value}/** Default exit to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_exit}
            #define MBEDTLS_PLATFORM_STD_EXIT            ${config.driver.psa_crypto.mbedtls_platform_std_exit_value}/** Default exit to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_time}
            #define MBEDTLS_PLATFORM_STD_TIME            ${config.driver.psa_crypto.mbedtls_platform_std_time_value}/** Default time to use, can be undefined. MBEDTLS_HAVE_TIME must be enabled */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_fprintf}
            #define MBEDTLS_PLATFORM_STD_FPRINTF      ${config.driver.psa_crypto.mbedtls_platform_std_fprintf_value}/** Default fprintf to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_printf}
            #define MBEDTLS_PLATFORM_STD_PRINTF        ${config.driver.psa_crypto.mbedtls_platform_std_printf_value}/** Default printf to use, can be undefined */
            #endif
            /* Note: your snprintf must correctly zero-terminate the buffer! */
            #if ${config.driver.psa_crypto.mbedtls_platform_std_snprintf}
            #define MBEDTLS_PLATFORM_STD_SNPRINTF    ${config.driver.psa_crypto.mbedtls_platform_std_snprintf_value}/** Default snprintf to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_exit_success}
            #define MBEDTLS_PLATFORM_STD_EXIT_SUCCESS       ${config.driver.psa_crypto.mbedtls_platform_std_exit_success_value}/** Default exit value to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_exit_failure}
            #define MBEDTLS_PLATFORM_STD_EXIT_FAILURE       ${config.driver.psa_crypto.mbedtls_platform_std_exit_failure_value}/** Default exit value to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_nv_seed_read}
            #define MBEDTLS_PLATFORM_STD_NV_SEED_READ   ${config.driver.psa_crypto.mbedtls_platform_std_nv_seed_read_value}/** Default nv_seed_read function to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_nv_seed_write}
            #define MBEDTLS_PLATFORM_STD_NV_SEED_WRITE  ${config.driver.psa_crypto.mbedtls_platform_std_nv_seed_write_value}/** Default nv_seed_write function to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_std_nv_seed_file}
            #define MBEDTLS_PLATFORM_STD_NV_SEED_FILE  ${config.driver.psa_crypto.mbedtls_platform_std_nv_seed_file_value}/** Seed file to read/write with default implementation */
            #endif

            /* To Use Function Macros MBEDTLS_PLATFORM_C must be enabled */
            /* MBEDTLS_PLATFORM_XXX_MACRO and MBEDTLS_PLATFORM_XXX_ALT cannot both be defined */
            #if ${config.driver.psa_crypto.mbedtls_platform_calloc_macro}
            #define MBEDTLS_PLATFORM_CALLOC_MACRO        ${config.driver.psa_crypto.mbedtls_platform_calloc_macro_value}/** Default allocator macro to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_free_macro}
            #define MBEDTLS_PLATFORM_FREE_MACRO            ${config.driver.psa_crypto.mbedtls_platform_free_macro_value}/** Default free macro to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_exit_macro}
            #define MBEDTLS_PLATFORM_EXIT_MACRO            ${config.driver.psa_crypto.mbedtls_platform_exit_macro_value}/** Default exit macro to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_setbuf_macro}
            #define MBEDTLS_PLATFORM_SETBUF_MACRO          ${config.driver.psa_crypto.mbedtls_platform_setbuf_macro_value}/** Default exit macro to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_time_macro}
            #define MBEDTLS_PLATFORM_TIME_MACRO            ${config.driver.psa_crypto.mbedtls_platform_time_macro_value}/** Default time macro to use, can be undefined. MBEDTLS_HAVE_TIME must be enabled */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_time_type_macro}
            #define MBEDTLS_PLATFORM_TIME_TYPE_MACRO       ${config.driver.psa_crypto.mbedtls_platform_time_type_macro_value}/** Default time macro to use, can be undefined. MBEDTLS_HAVE_TIME must be enabled */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_fprintf_macro}
            #define MBEDTLS_PLATFORM_FPRINTF_MACRO      ${config.driver.psa_crypto.mbedtls_platform_fprintf_macro_value}/** Default fprintf macro to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_printf_macro}
            #define MBEDTLS_PLATFORM_PRINTF_MACRO        ${config.driver.psa_crypto.mbedtls_platform_printf_macro_value}/** Default printf macro to use, can be undefined */
            #endif
            /* Note: your snprintf must correctly zero-terminate the buffer! */
            #if ${config.driver.psa_crypto.mbedtls_platform_snprintf_macro}
            #define MBEDTLS_PLATFORM_SNPRINTF_MACRO    ${config.driver.psa_crypto.mbedtls_platform_snprintf_macro_value}/** Default snprintf macro to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_vsnprintf_macro}
            #define MBEDTLS_PLATFORM_VSNPRINTF_MACRO    ${config.driver.psa_crypto.mbedtls_platform_vsnprintf_macro_value}/** Default vsnprintf macro to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_nv_seed_read_macro}
            #define MBEDTLS_PLATFORM_NV_SEED_READ_MACRO   ${config.driver.psa_crypto.mbedtls_platform_nv_seed_read_macro_value}/** Default nv_seed_read function to use, can be undefined */
            #endif
            #if ${config.driver.psa_crypto.mbedtls_platform_nv_seed_write_macro}
            #define MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO  ${config.driver.psa_crypto.mbedtls_platform_nv_seed_write_macro_value}/** Default nv_seed_write function to use, can be undefined */
            #endif

            /** \def MBEDTLS_CHECK_RETURN
             *
             * This macro is used at the beginning of the declaration of a function
             * to indicate that its return value should be checked. It should
             * instruct the compiler to emit a warning or an error if the function
             * is called without checking its return value.
             *
             * There is a default implementation for popular compilers in platform_util.h.
             * You can override the default implementation by defining your own here.
             *
             * If the implementation here is empty, this will effectively disable the
             * checking of functions' return values.
             */
             #if ${config.driver.psa_crypto.mbedtls_check_return}
            #define MBEDTLS_CHECK_RETURN __attribute__((__warn_unused_result__))
            #endif

            /** \def MBEDTLS_IGNORE_RETURN
             *
             * This macro requires one argument, which should be a C function call.
             * If that function call would cause a #MBEDTLS_CHECK_RETURN warning, this
             * warning is suppressed.
             */
             #if ${config.driver.psa_crypto.mbedtls_ignore_return}
            #define MBEDTLS_IGNORE_RETURN( result ) ((void) !(result))
            #endif

            /* PSA options */
            /**
             * Use HMAC_DRBG with the specified hash algorithm for HMAC_DRBG for the
             * PSA crypto subsystem.
             *
             * If this option is unset:
             * - If CTR_DRBG is available, the PSA subsystem uses it rather than HMAC_DRBG.
             * - Otherwise, the PSA subsystem uses HMAC_DRBG with either
             *   #MBEDTLS_MD_SHA512 or #MBEDTLS_MD_SHA256 based on availability and
             *   on unspecified heuristics.
             */
             #if ${config.driver.psa_crypto.mbedtls_psa_hmac_drbg_md_type}
            #define MBEDTLS_PSA_HMAC_DRBG_MD_TYPE MBEDTLS_MD_SHA256
            #endif

            /** \def MBEDTLS_PSA_KEY_SLOT_COUNT
             * Restrict the PSA library to supporting a maximum amount of simultaneously
             * loaded keys. A loaded key is a key stored by the PSA Crypto core as a
             * volatile key, or a persistent key which is loaded temporarily by the
             * library as part of a crypto operation in flight.
             *
             * If this option is unset, the library will fall back to a default value of
             * 32 keys.
             */
             #if ${config.driver.psa_crypto.mbedtls_psa_key_slot_count}
            #define MBEDTLS_PSA_KEY_SLOT_COUNT     ${config.driver.psa_crypto.mbedtls_psa_key_slot_count_value}/** Maximum number of simultaneous loaded keys. */
            #endif

            /**
             * Uncomment the macro to let mbed TLS use your alternate implementation of
             * mbedtls_platform_zeroize(). This replaces the default implementation in
             * platform_util.c.
             *
             * mbedtls_platform_zeroize() is a widely used function across the library to
             * zero a block of memory. The implementation is expected to be secure in the
             * sense that it has been written to prevent the compiler from removing calls
             * to mbedtls_platform_zeroize() as part of redundant code elimination
             * optimizations. However, it is difficult to guarantee that calls to
             * mbedtls_platform_zeroize() will not be optimized by the compiler as older
             * versions of the C language standards do not provide a secure implementation
             * of memset(). Therefore, MBEDTLS_PLATFORM_ZEROIZE_ALT enables users to
             * configure their own implementation of mbedtls_platform_zeroize(), for
             * example by using directives specific to their compiler, features from newer
             * C standards (e.g using memset_s() in C11) or calling a secure memset() from
             * their system (e.g explicit_bzero() in BSD).
             */
             #if ${config.driver.psa_crypto.mbedtls_platform_zeroize_alt}
            #define MBEDTLS_PLATFORM_ZEROIZE_ALT
            #endif

            /**
             * Uncomment the macro to let Mbed TLS use your alternate implementation of
             * mbedtls_platform_gmtime_r(). This replaces the default implementation in
             * platform_util.c.
             *
             * gmtime() is not a thread-safe function as defined in the C standard. The
             * library will try to use safer implementations of this function, such as
             * gmtime_r() when available. However, if Mbed TLS cannot identify the target
             * system, the implementation of mbedtls_platform_gmtime_r() will default to
             * using the standard gmtime(). In this case, calls from the library to
             * gmtime() will be guarded by the global mutex mbedtls_threading_gmtime_mutex
             * if MBEDTLS_THREADING_C is enabled. We recommend that calls from outside the
             * library are also guarded with this mutex to avoid race conditions. However,
             * if the macro MBEDTLS_PLATFORM_GMTIME_R_ALT is defined, Mbed TLS will
             * unconditionally use the implementation for mbedtls_platform_gmtime_r()
             * supplied at compile time.
             */
             #if ${config.driver.psa_crypto.mbedtls_platform_gmtime_r_alt}
            #define MBEDTLS_PLATFORM_GMTIME_R_ALT
            #endif

            /**
             * Enable the verified implementations of ECDH primitives from Project Everest
             * (currently only Curve25519). This feature changes the layout of ECDH
             * contexts and therefore is a compatibility break for applications that access
             * fields of a mbedtls_ecdh_context structure directly. See also
             * MBEDTLS_ECDH_LEGACY_CONTEXT in include/mbedtls/ecdh.h.
             */
             #if ${config.driver.psa_crypto.mbedtls_ecdh_variant_everest_enabled}
            #define MBEDTLS_ECDH_VARIANT_EVEREST_ENABLED
            #endif

            /** \} name SECTION: Module configuration options */

            #if defined (MBEDTLS_PSA_CRYPTO_STORAGE_C) &amp;&amp; defined (MBEDTLS_PSA_ITS_FILE_C)
            #ifdef MBEDTLS_PSA_ITS_CUSTOM_HEADER
            #include MBEDTLS_PSA_ITS_CUSTOM_HEADER
            #elif defined (MBEDTLS_PSA_CRYPTO_STORAGE_C) &amp;&amp; defined (MBEDTLS_PSA_ITS_FILE_C) &amp;&amp; defined (MBEDTLS_FS_IO)
            #include "rm_stdio_littlefs.h"
            #endif
            #endif

            /* Common macro for FSP header files. There is also a corresponding FSP_HEADER macro at the top of this file. */
            FSP_FOOTER

            #endif /* RM_PSA_CRYPTO_CFG_H */
        </content>
    </config>
    <module config="config.driver.psa_crypto" display="Security|MbedTLS (Crypto Only)" id="module.driver.psa_crypto" common="1" version="1" url="https://github.com/ARMmbed/mbed-crypto/blob/mbedcrypto-2.0.0/docs/getting_started.md">
        <constraint display="Requires HW Acceleration">
          "${interface.driver.rm_psa_crypto}" === "1"
        </constraint>
        <constraint display="A minimum heap of 0x400 is required to use ECC. To disable ECC, under Common|PKC|ECC, undefine MBEDTLS_ECP_C and anything else that uses ECC (MBEDTLS_ECDSA_C).">(("${config.bsp.common.heap}" &gt;= 0x0400)  || ("${config.driver.psa_crypto.mbedtls_ecp_c}" == "config.driver.psa_crypto.mbedtls_ecp_c.disabled")) || (testExists("${interface.rtos.rtos}") )
        </constraint>
        <constraint display="A minimum RTOS heap of 0x400 is required to use ECC. To disable ECC, under Common|PKC|ECC, undefine MBEDTLS_ECP_C and anything else that uses ECC (MBEDTLS_ECDSA_C). The heap size should be atleast 0x0400 under Thread|Common|Memory Allocation|Total Heap Size.">(("${config.awsfreertos.thread.configtotal_heap_size}" &gt;= 0x0400)  || ("${config.driver.psa_crypto.mbedtls_ecp_c}" == "config.driver.psa_crypto.mbedtls_ecp_c.disabled")) || ((!testExists("${interface.rtos.rtos}")))
        </constraint>
        <constraint display="A minimum heap of 0x1800 is required to use Software ECC.">(("${config.bsp.common.heap}" &gt;= 0x1800)  || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" != "config.driver.psa_crypto.ecp_alt.disabled")) &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" != "config.driver.psa_crypto.ecdsa_alt.disabled")) || (testExists("${interface.rtos.rtos}") )
        </constraint>
        <constraint display="A minimum RTOS heap of 0x1800 is required to use Software ECC.The thread stack should instead be at least 0x1000.">(("${config.awsfreertos.thread.configtotal_heap_size}" &gt;= 0x1800)  || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" != "config.driver.psa_crypto.ecp_alt.disabled")) &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" != "config.driver.psa_crypto.ecdsa_alt.disabled")) || (!testExists("${interface.rtos.rtos}"))
        </constraint>
        <constraint display="AES Wrapped key (Common|Hardware Acceleration|Key Format|AES|Plaintext and Wrapped) requires AES HW Acceleration enabled (Common|Hardware Acceleration|Cipher|AES|Use Hardware)">
        ("${config.driver.psa_crypto.mbedtls_cipher_mode_xts}" === "config.driver.psa_crypto.mbedtls_cipher_mode_xts.disabled") || ("${config.driver.psa_crypto.aes_alt}" === "config.driver.psa_crypto.aes_alt.enabled")
        </constraint>
        <constraint display="AES Wrapped key (Common|Hardware Acceleration|Key Format|AES|Plaintext and Wrapped) requires AES HW Acceleration enabled (Common|Hardware Acceleration|Cipher|AES|Use Hardware)">
        ("${config.driver.psa_crypto.aes_format}" === "config.driver.psa_crypto.aes_format.plaintext") || ("${config.driver.psa_crypto.aes_alt}" === "config.driver.psa_crypto.aes_alt.enabled")
        </constraint>
        <constraint display="ECC Wrapped key (Common|Hardware Acceleration|Key Format|ECC|Wrapped Only/Plaintext and Wrapped) requires ECC HW Acceleration enabled (Common|Hardware Acceleration|PKC|ECC/ECDSA|Use Hardware)">
        ("${config.driver.psa_crypto.ecc_format}" === "config.driver.psa_crypto.ecc_format.plaintext") || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" === "config.driver.psa_crypto.ecp_alt.enabled") &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" === "config.driver.psa_crypto.ecdsa_alt.enabled"))
        </constraint>
        <constraint display="RSA Wrapped key (Common|Hardware Acceleration|Key Format|RSA|Wrapped Only/Plaintext and Wrapped) requires RSA HW Acceleration enabled (Common|Hardware Acceleration|PKC|RSA|Use Hardware)">
        ("${config.driver.psa_crypto.mbedtls_rsa_alt}" === "config.driver.psa_crypto.rsa_alt.enabled") || ("${config.driver.psa_crypto.rsa_format}" === "config.driver.psa_crypto.rsa_format.plaintext")
        </constraint>
        <constraint display="SECP192R1 (Common|PKC|ECC|Curves) not supported by HW ECC (Common|Hardware Acceleration|PKC|ECC/ECDSA|Use Hardware).">
        (("${config.driver.psa_crypto.mbedtls_ecp_dp_secp192r1_enabled}" === "config.driver.psa_crypto.mbedtls_ecp_dp_secp192r1_enabled.disabled")) || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" === "config.driver.psa_crypto.ecp_alt.disabled") &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" === "config.driver.psa_crypto.ecdsa_alt.disabled"))
        </constraint>
        <constraint display="SECP224R1 (Common|PKC|ECC|Curves) not supported by HW ECC (Common|Hardware Acceleration|PKC|ECC/ECDSA|Use Hardware).">
        (("${config.driver.psa_crypto.mbedtls_ecp_dp_secp224r1_enabled}" === "config.driver.psa_crypto.mbedtls_ecp_dp_secp224r1_enabled.disabled")) || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" === "config.driver.psa_crypto.ecp_alt.disabled") &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" === "config.driver.psa_crypto.ecdsa_alt.disabled"))
        </constraint>
        <constraint display="SECP521R1 (Common|PKC|ECC|Curves) not supported by HW ECC (Common|Hardware Acceleration|PKC|ECC/ECDSA|Use Hardware).">
        (("${config.driver.psa_crypto.mbedtls_ecp_dp_secp521r1_enabled}" === "config.driver.psa_crypto.mbedtls_ecp_dp_secp521r1_enabled.disabled")) || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" === "config.driver.psa_crypto.ecp_alt.disabled") &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" === "config.driver.psa_crypto.ecdsa_alt.disabled"))
        </constraint>
        <constraint display="SECP192K1 (Common|PKC|ECC|Curves) not supported by HW ECC (Common|Hardware Acceleration|PKC|ECC/ECDSA|Use Hardware).">
        (("${config.driver.psa_crypto.mbedtls_ecp_dp_secp192k1_enabled}" === "config.driver.psa_crypto.mbedtls_ecp_dp_secp192k1_enabled.disabled")) || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" === "config.driver.psa_crypto.ecp_alt.disabled") &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" === "config.driver.psa_crypto.ecdsa_alt.disabled"))
        </constraint>
        <constraint display="SECP224K1 (Common|PKC|ECC|Curves) not supported by HW ECC (Common|Hardware Acceleration|PKC|ECC/ECDSA|Use Hardware).">
        (("${config.driver.psa_crypto.mbedtls_ecp_dp_secp224k1_enabled}" === "config.driver.psa_crypto.mbedtls_ecp_dp_secp224k1_enabled.disabled")) || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" === "config.driver.psa_crypto.ecp_alt.disabled") &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" === "config.driver.psa_crypto.ecdsa_alt.disabled"))
        </constraint>
        <constraint display="BP512R1 (Common|PKC|ECC|Curves) not supported by HW ECC (Common|Hardware Acceleration|PKC|ECC/ECDSA|Use Hardware).">
        (("${config.driver.psa_crypto.mbedtls_ecp_dp_bp512r1_enabled}" === "config.driver.psa_crypto.mbedtls_ecp_dp_bp512r1_enabled.disabled")) || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" === "config.driver.psa_crypto.ecp_alt.disabled") &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" === "config.driver.psa_crypto.ecdsa_alt.disabled"))
        </constraint>
        <constraint display="CURVE25519 (Common|PKC|ECC|Curves) not supported by HW ECC (Common|Hardware Acceleration|PKC|ECC/ECDSA|Use Hardware).">
        (("${config.driver.psa_crypto.mbedtls_ecp_dp_curve25519_enabled}" === "config.driver.psa_crypto.mbedtls_ecp_dp_curve25519_enabled.disabled")) || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" === "config.driver.psa_crypto.ecp_alt.disabled") &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" === "config.driver.psa_crypto.ecdsa_alt.disabled"))
        </constraint>
        <constraint display="CURVE448 (Common|PKC|ECC|Curves) not supported by HW ECC (Common|Hardware Acceleration|PKC|ECC/ECDSA|Use Hardware).">
        (("${config.driver.psa_crypto.mbedtls_ecp_dp_curve448_enabled}" === "config.driver.psa_crypto.mbedtls_ecp_dp_curve448_enabled.disabled")) || (("${config.driver.psa_crypto.mbedtls_ecp_alt}" === "config.driver.psa_crypto.ecp_alt.disabled") &amp;&amp; ("${config.driver.psa_crypto.mbedtls_ecdsa_alt}" === "config.driver.psa_crypto.ecdsa_alt.disabled"))
        </constraint>
        <constraint display="AES-GCM with complete HW support requires AES HW Acceleration enabled.">
        ("${config.driver.psa_crypto.mbedtls_gcm_alt}" === "config.driver.psa_crypto.aes_gcm_alt.disabled") || ("${config.driver.psa_crypto.aes_alt}" === "config.driver.psa_crypto.aes_alt.enabled")
        </constraint>
        <constraint display="A minimum heap of 0x1500 is required to use RSA. To disable RSA, under Common|PKC|RSA undefine MBEDTLS_RSA_C, and under Common|PKC, undefine MBEDTLS_PK_C, MBEDTLS_PK_PARSE_C, MBEDTLS_PK_WRITE_C.">(("${config.bsp.common.heap}" &gt;= 0x1500)  || ("${config.driver.psa_crypto.mbedtls_rsa_c}" == "config.driver.psa_crypto.mbedtls_rsa_c.disabled")) || (testExists("${interface.rtos.rtos}") )
        </constraint>
        <constraint display="A minimum RTOS heap of 0x1500 is required to use RSA. To disable RSA, under Common|PKC|RSA undefine MBEDTLS_RSA_C, and under Common|PKC, undefine MBEDTLS_PK_C, MBEDTLS_PK_PARSE_C, MBEDTLS_PK_WRITE_C. The heap size should be atleast 0x1500 under Thread|Common|Memory Allocation|Total Heap Size.">(("${config.awsfreertos.thread.configtotal_heap_size}" &gt;= 0x1500)  || ("${config.driver.psa_crypto.mbedtls_rsa_c}" == "config.driver.psa_crypto.mbedtls_rsa_c.disabled")) || ((!testExists("${interface.rtos.rtos}")))
        </constraint>
        <constraint display="A minimum heap of 0x200 is required to use AES. AES cannot be disabled.">(("${config.bsp.common.heap}" &gt;= 0x200)  || ("${config.driver.psa_crypto.mbedtls_aes_c}" == "config.driver.psa_crypto.mbedtls_aes_c.disabled")) || (testExists("${interface.rtos.rtos}") )
        </constraint>
        <constraint display="A minimum RTOS heap of 0x200 is required to use AES. AES cannot be disabled. The heap size should be atleast 0x200 under Thread|Common|Memory Allocation|Total Heap Size."> (("${config.awsfreertos.thread.configtotal_heap_size}" &gt;= 0x200)  || ("${config.driver.psa_crypto.mbedtls_aes_c}" == "config.driver.psa_crypto.mbedtls_aes_c.disabled")) ||  (!testExists("${interface.rtos.rtos}"))
        </constraint>
        <constraint display="A minimum stack of 4K (0x1000) is required. If used in an RTOS thread, the thread stack should instead be at least 0x1000.">(("${config.bsp.common.main}" &gt;= 0x1000)) || (testExists("${interface.rtos.rtos}") )
        </constraint>
        <constraint display="For persistent storage Storage|MBEDTLS_FS_IO, Storage|MBEDTLS_PSA_CRYPTO_STORAGE_C, and Storage|MBEDTLS_PSA_ITS_FILE_C all must be enabled otherwise they should be disabled.">
        (
        (("${config.driver.psa_crypto.mbedtls_fs_io}" === "config.driver.psa_crypto.mbedtls_fs_io.enabled" ) ||
        ("${config.driver.psa_crypto.mbedtls_psa_crypto_storage_c}" === "config.driver.psa_crypto.mbedtls_psa_crypto_storage_c.enabled" ) ||
        ("${config.driver.psa_crypto.mbedtls_psa_its_file_c}" === "config.driver.psa_crypto.mbedtls_psa_its_file_c.enabled" ))
        &amp;&amp;
        (("${config.driver.psa_crypto.mbedtls_fs_io}" === "config.driver.psa_crypto.mbedtls_fs_io.enabled" ) &amp;&amp;
        ("${config.driver.psa_crypto.mbedtls_psa_crypto_storage_c}" === "config.driver.psa_crypto.mbedtls_psa_crypto_storage_c.enabled" ) &amp;&amp;
        ("${config.driver.psa_crypto.mbedtls_psa_its_file_c}" === "config.driver.psa_crypto.mbedtls_psa_its_file_c.enabled" ))
        )
        ||
        (("${config.driver.psa_crypto.mbedtls_fs_io}" === "config.driver.psa_crypto.mbedtls_fs_io.disabled" ) &amp;&amp;
        ("${config.driver.psa_crypto.mbedtls_psa_crypto_storage_c}" === "config.driver.psa_crypto.mbedtls_psa_crypto_storage_c.disabled" ) &amp;&amp;
        ("${config.driver.psa_crypto.mbedtls_psa_its_file_c}" === "config.driver.psa_crypto.mbedtls_psa_its_file_c.disabled" ))
        ||
        (("${config.driver.psa_crypto.mbedtls_psa_crypto_storage_c}" === "config.driver.psa_crypto.mbedtls_psa_crypto_storage_c.enabled" ) &amp;&amp;
        ((testExists("${interface.driver.tfm}"))))
        </constraint>
        <constraint display="When persistent storage is enabled a lower level storage implementation must be used.">
            ("${config.driver.psa_crypto.mbedtls_psa_crypto_storage_c}" === "config.driver.psa_crypto.mbedtls_psa_crypto_storage_c.disabled" ) ||
            (testExists("${module.driver.rm_psa_crypto.requires.middleware.stdio_wrapper::module.middleware.stdio_wrapper}") || ((testExists("${interface.driver.tfm}"))))
        </constraint>
        <constraint display="LittleFS should not be added unless Storage|MBEDTLS_FS_IO, Storage|MBEDTLS_PSA_CRYPTO_STORAGE_C, and Storage|MBEDTLS_PSA_ITS_FILE_C are enabled.">
            (("${config.driver.psa_crypto.mbedtls_fs_io}" === "config.driver.psa_crypto.mbedtls_fs_io.enabled" ) &amp;&amp;
            ("${config.driver.psa_crypto.mbedtls_psa_crypto_storage_c}" === "config.driver.psa_crypto.mbedtls_psa_crypto_storage_c.enabled" ) &amp;&amp;
            ("${config.driver.psa_crypto.mbedtls_psa_its_file_c}" === "config.driver.psa_crypto.mbedtls_psa_its_file_c.enabled" ) ) ||
            !testExists("${module.driver.rm_psa_crypto.requires.middleware.stdio_wrapper::module.middleware.stdio_wrapper}")
        </constraint>
        <constraint display="LittleFS must have heap allocation enabled.">
        ("${config.arm.mbed.littlefs.no_malloc}" === "config.arm.mbed.littlefs.no_malloc.enabled")
        </constraint>
        <constraint display="Disable Platform Memory, under Common|Platform|MBEDTLS_PLATFORM_MEMORY, when not using an RTOS or enable Common|Platform|MBEDTLS_PLATFORM_STD_FREE and Common|Platform|MBEDTLS_PLATFORM_STD_CALLOC.">
            ("${config.driver.psa_crypto.mbedtls_platform_memory}" === "config.driver.psa_crypto.mbedtls_platform_memory.disabled")
            || (testExists("${interface.rtos.rtos}"))
            || (("${config.driver.psa_crypto.mbedtls_platform_std_calloc}" === "config.driver.psa_crypto.mbedtls_platform_std_calloc.enabled") &amp;&amp; ("${config.driver.psa_crypto.mbedtls_platform_std_free}" === "config.driver.psa_crypto.mbedtls_platform_std_free.enabled") )
            || ("${config.driver.psa_crypto.mbedtls_memory_buffer_alloc_c}" === "config.driver.psa_crypto.mbedtls_memory_buffer_alloc_c.enabled")
        </constraint>
        <constraint display="MBEDTLS_THREADING_C must be undefined under Common|General|MBEDTLS_THREADING_C unless FreeRTOS+TLS is present.">
        (("${config.driver.psa_crypto.mbedtls_threading_c}" === "config.driver.psa_crypto.mbedtls_threading_c.disabled")) || (testExists("${interface.aws.pkcs11}"))
        </constraint>
        <constraint display="MBEDTLS_THREADING_ALT must be undefined under Common|General|MBEDTLS_THREADING_ALT unless FreeRTOS+TLS is present.">
        (("${config.driver.psa_crypto.mbedtls_threading_alt}" === "config.driver.psa_crypto.mbedtls_threading_alt.disabled") ) || (testExists("${interface.aws.pkcs11}"))
        </constraint>
        <constraint display="Not supported in Azure RTOS, use NetX Crypto instead.">
            !testExists("${interface.rtos.tx}")
        </constraint>
        <requires id="module.driver.rm_psa_crypto" interface="interface.driver.rm_psa_crypto" visible="true" display="Mbed Crypto HW Acceleration" />
        <requires id="module.driver.rm_psa_crypto.requires.middleware.stdio_wrapper" interface="interface.stdio.storage" visible="true" find="false" display="Persistent Storage on LittleFS (Optional)" />
        <requires id="module.driver.rm_psa_crypto.requires.rtos" interface="interface.rtos.supports.mbedtls" visible="false" display="Requires FreeRTOS or Bare Metal project"/>
        <provides interface="interface.driver.psa_crypto" />
        <provides interface="interface.driver.mcuboot_crypto" />
        <includes>
            #include &quot;mbedtls/platform.h&quot;
            #include &quot;psa/crypto.h&quot;
            #include &quot;psa/crypto_extra.h&quot;
            #include &quot;rm_psa_crypto.h&quot;
        </includes>
        <declarations>
        </declarations>
    </module>
    <developerSupport>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>Provides MBEDTLS crypto APIs.</p></form>]]></description>
            <function display="Module Setup" id="psa_crypto_module_setup">
                <description><![CDATA[<form><p>Template to setup an MbedTLS crypto application.</p></form>]]></description>
            </function>
            <function display="Cipher" id="psa_crypto_cipher">
                <description><![CDATA[<form><p>Template to setup an MbedTLS Cipher application.</p></form>]]></description>
            </function>
            <function display="Asymmetric Cryptography" id="psa_crypto_asymmetric_cryptography">
                <description><![CDATA[<form><p>Template to setup an MbedTLS Asymmetric cryptography application.</p></form>]]></description>
            </function>
            <function display="Key Attributes" id="psa_crypto_key_attributes">
                <description><![CDATA[<form><p>Template to set key attributes in an MbedTLS crypto application.</p></form>]]></description>
            </function>
            <function display="Key Management" id="psa_crypto_key_management">
                <description><![CDATA[<form><p>Template for key management in an MbedTLS crypto application.</p></form>]]></description>
            </function>
            <function display="Key Agreement" id="psa_crypto_key_agreement">
                <description><![CDATA[<form><p>Template for key agreement in an MbedTLS crypto application.</p></form>]]></description>
            </function>
            <function display="Random Generation" id="psa_crypto_random_generation">
                <description><![CDATA[<form><p>Template for random generation in an MbedTLS crypto application.</p></form>]]></description>
            </function>
            <function display="Hash Operations" id="psa_crypto_hash_operations">
                <description><![CDATA[<form><p>Template for Hash operations in an MbedTLS crypto application.</p></form>]]></description>
            </function>
            <function display="MAC" id="psa_crypto_mac">
                <description><![CDATA[<form><p>Template for MAC operations in an MbedTLS crypto application.</p></form>]]></description>
            </function>
            <function display="Module De-Initialize" id="psa_crypto_module_deinitialize">
                <description><![CDATA[<form><p>Template to De-Initialize an MbedTLS crypto application.</p></form>]]></description>
            </function>
        </api>
        <template category="function_call" display="mbedtls_platform_setup" id="module.driver.psa_crypto.mbedtls_platform_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_module_setup"/>
            </moduleRef>
            <content>
mbedtls_platform_context ctx = {0};
status = mbedtls_platform_setup(&amp;ctx);
            </content>
        </template>
        <template category="function_call" display="psa_crypto_init" id="module.driver.psa_crypto.psa_crypto_init" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_module_setup"/>
            </moduleRef>
            <content>
status = psa_crypto_init();
            </content>
        </template>

        <template category="function_call" display="psa_cipher_encrypt_setup" id="module.driver.psa_crypto.psa_cipher_encrypt_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_cipher"/>
            </moduleRef>
            <content>
psa_cipher_operation_t cipher_enc_operation = PSA_CIPHER_OPERATION_INIT;
status = psa_cipher_encrypt_setup(&amp;cipher_enc_operation, key_handle, alg);
            </content>
        </template>
        <template category="function_call" display="psa_cipher_decrypt_setup" id="module.driver.psa_crypto.psa_cipher_decrypt_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_cipher"/>
            </moduleRef>
            <content>
psa_cipher_operation_t cipher_dec_operation = PSA_CIPHER_OPERATION_INIT;
status = psa_cipher_decrypt_setup(&amp;cipher_dec_operation, key_handle, alg);
            </content>
        </template>
        <template category="function_call" display="psa_cipher_generate_iv" id="module.driver.psa_crypto.psa_cipher_generate_iv" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_cipher"/>
            </moduleRef>
            <content>
status = psa_cipher_generate_iv(&amp;operation, iv, sizeof(iv), &amp;iv_length);
            </content>
        </template>
        <template category="function_call" display="psa_cipher_set_iv" id="module.driver.psa_crypto.psa_cipher_set_iv" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_cipher"/>
            </moduleRef>
            <content>
status = psa_cipher_set_iv(&amp;operation, iv, sizeof(iv));
            </content>
        </template>
        <template category="function_call" display="psa_cipher_update" id="module.driver.psa_crypto.psa_cipher_update" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_cipher"/>
            </moduleRef>
            <content>
status = psa_cipher_update(&amp;operation, input, input_length, output, output_size, &amp;output_length);
            </content>
        </template>
        <template category="function_call" display="psa_cipher_finish" id="module.driver.psa_crypto.psa_cipher_finish" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_cipher"/>
            </moduleRef>
            <content>
status = psa_cipher_finish(&amp;operation, output, output_size, &amp;output_length);
            </content>
        </template>
        <template category="function_call" display="psa_cipher_abort" id="module.driver.psa_crypto.psa_cipher_abort" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_cipher"/>
            </moduleRef>
            <content>
status = psa_cipher_abort(&amp;operation);
            </content>
        </template>
        <template category="function_call" display="psa_aead_encrypt" id="module.driver.psa_crypto.psa_aead_encrypt" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_cipher"/>
            </moduleRef>
            <content>
status = psa_aead_encrypt(key_handle, alg, nonce, sizeof(nonce), additional_data, sizeof(additional_data),
                          plaintext, sizeof(plaintext), ciphertext, sizeof(ciphertext), &amp;ciphertext_length);
            </content>
        </template>
        <template category="function_call" display="psa_aead_decrypt" id="module.driver.psa_crypto.psa_aead_decrypt" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_cipher"/>
            </moduleRef>
            <content>
status = psa_aead_decrypt(key_handle, alg, nonce, sizeof(nonce), additional_data, sizeof(additional_data),
                          ciphertext, ciphertext_length, plaintext, sizeof(plaintext), &amp;plaintext_length);
            </content>
        </template>


        <template category="function_call" display="psa_sign_hash" id="module.driver.psa_crypto.psa_sign_hash" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_asymmetric_cryptography"/>
            </moduleRef>
            <content>
status = psa_sign_hash(key_handle, alg, hash, sizeof(hash), signature, sizeof(signature), &amp;signature_length);
            </content>
        </template>
        <template category="function_call" display="psa_verify_hash" id="module.driver.psa_crypto.psa_verify_hash" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_asymmetric_cryptography"/>
            </moduleRef>
            <content>
status = psa_verify_hash(key_handle, alg, hash, sizeof(hash), signature, signature_length);
            </content>
        </template>

        <template category="function_call" display="psa_sign_message" id="module.driver.psa_crypto.psa_sign_message" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_asymmetric_cryptography"/>
            </moduleRef>
            <content>
status = psa_sign_hash(key_handle, alg, input, sizeof(input), signature, sizeof(signature), &amp;signature_length);
            </content>
        </template>
        <template category="function_call" display="psa_verify_message" id="module.driver.psa_crypto.psa_verify_message" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_asymmetric_cryptography"/>
            </moduleRef>
            <content>
status = psa_verify_message(key_handle, alg, input, sizeof(input), signature, signature_length);
            </content>
        </template>
        <template category="function_call" display="psa_asymmetric_encrypt" id="module.driver.psa_crypto.psa_asymmetric_encrypt" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_asymmetric_cryptography"/>
            </moduleRef>
            <content>
status = psa_asymmetric_encrypt(key_handle, alg, input, sizeof(input), salt, sizeof(salt),
                                output, sizeof(output), &amp;output_length);
            </content>
        </template>
        <template category="function_call" display="psa_asymmetric_decrypt" id="module.driver.psa_crypto.psa_asymmetric_decrypt" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_asymmetric_cryptography"/>
            </moduleRef>
            <content>
status = psa_asymmetric_decrypt(key_handle, alg, input, sizeof(input), salt, sizeof(salt),
                                output, sizeof(output), &amp;output_length);
            </content>
        </template>

        <template category="function_call" display="psa_set_key_usage_flags" id="module.driver.psa_crypto.psa_set_key_usage_flags" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_attributes"/>
            </moduleRef>
            <content>
/*
 *      Usage flags:
 *      PSA_KEY_USAGE_EXPORT, PSA_KEY_USAGE_COPY, PSA_KEY_USAGE_ENCRYPT, PSA_KEY_USAGE_DECRYPT,
 *      PSA_KEY_USAGE_SIGN_HASH, PSA_KEY_USAGE_VERIFY_HASH, PSA_KEY_USAGE_DERIVE
 */
psa_set_key_usage_flags(&amp;attributes, usage_flags);
            </content>
        </template>
        <template category="function_call" display="psa_set_key_algorithm" id="module.driver.psa_crypto.psa_set_key_algorithm" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_attributes"/>
            </moduleRef>
            <content>
/*
 *      Commonly used alg:
 *      PSA_ALG_SHA_256, PSA_ALG_CTR, PSA_ALG_CBC_NO_PADDING, PSA_ALG_CBC_PKCS7, PSA_ALG_CMAC,
 *      PSA_ALG_HMAC(PSA_ALG_SHA_256), PSA_ALG_CCM, PSA_ALG_GCM, PSA_ALG_RSA_PKCS1V15_SIGN_RAW,
 *      PSA_ALG_RSA_PKCS1V15_SIGN(PSA_ALG_SHA_256), PSA_ALG_RSA_PSS(PSA_ALG_SHA_256),
 *      PSA_ALG_RSA_PKCS1V15_CRYPT, PSA_ALG_RSA_OAEP(PSA_ALG_SHA_256), PSA_ALG_ECDH,
 *      PSA_ALG_ECDSA(PSA_ALG_SHA_256)
 */
psa_set_key_algorithm(&amp;attributes, alg);
            </content>
        </template>
        <template category="function_call" display="psa_set_key_type" id="module.driver.psa_crypto.psa_set_key_type" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_attributes"/>
            </moduleRef>
            <content>
/*
 *      Type:
 *      PSA_KEY_TYPE_RAW_DATA, PSA_KEY_TYPE_HMAC, PSA_KEY_TYPE_AES,
 *      PSA_KEY_TYPE_ECC_KEY_PAIR(curve), PSA_KEY_TYPE_ECC_KEY_PAIR_WRAPPED(curve), PSA_KEY_TYPE_ECC_PUBLIC_KEY(curve),
 *      PSA_KEY_TYPE_RSA_PUBLIC_KEY, PSA_KEY_TYPE_RSA_KEY_PAIR, PSA_KEY_TYPE_RSA_KEY_PAIR_WRAPPED,
 *
 *      Curve:
 *		PSA_ECC_FAMILY_SECP_R1, PSA_ECC_FAMILY_SECP_K1, PSA_ECC_FAMILY_BRAINPOOL_P_R1
 */
psa_set_key_type(&amp;attributes, type);
            </content>
        </template>
        <template category="function_call" display="psa_set_key_bits" id="module.driver.psa_crypto.psa_set_key_bits" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_attributes"/>
            </moduleRef>
            <content>
psa_set_key_bits(&amp;attributes, key_bits);
            </content>
        </template>
        <template category="function_call" display="psa_set_key_lifetime" id="module.driver.psa_crypto.psa_set_key_lifetime" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_attributes"/>
            </moduleRef>
            <content>
/*
 * lifetime : PSA_KEY_LIFETIME_VOLATILE, PSA_KEY_LIFETIME_PERSISTENT
 * To use persistent keys ,the file system must be initialized prior to calling the generate/import key functions.
 */
psa_set_key_lifetime(&amp;attributes, lifetime);
            </content>
        </template>
        <template category="function_call" display="psa_set_key_id" id="module.driver.psa_crypto.psa_set_key_id" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_attributes"/>
            </moduleRef>
            <content>
/* Set a user defined key id for persistent keys. */
 psa_set_key_id(&amp;attributes, key_id);
            </content>
        </template>

        <template category="function_call" display="psa_destroy_key" id="module.driver.psa_crypto.psa_destroy_key" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_management"/>
            </moduleRef>
            <content>
status = psa_destroy_key(key_handle);
            </content>
        </template>
        <template category="function_call" display="psa_get_key_attributes" id="module.driver.psa_crypto.psa_get_key_attributes" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_management"/>
            </moduleRef>
            <content>
psa_key_attributes_t read_attributes = PSA_KEY_ATTRIBUTES_INIT;
status = psa_get_key_attributes(key_handle, &amp;read_attributes);
            </content>
        </template>
        <template category="function_call" display="psa_export_key" id="module.driver.psa_crypto.psa_export_key" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_management"/>
            </moduleRef>
            <content>
status = psa_export_key(key_handle, data, sizeof(data), &amp;data_length);
            </content>
        </template>
        <template category="function_call" display="psa_import_key" id="module.driver.psa_crypto.psa_import_key" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_management"/>
            </moduleRef>
            <content>
status = psa_import_key(&amp;attributes, data, data_length, &amp;key_handle);
            </content>
        </template>
        <template category="function_call" display="psa_generate_key" id="module.driver.psa_crypto.psa_generate_key" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_management"/>
            </moduleRef>
            <content>
status = psa_generate_key(&amp;attributes, &amp;key_handle);
            </content>
        </template>
        <template category="function_call" display="psa_export_public_key" id="module.driver.psa_crypto.psa_export_public_key" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_management"/>
            </moduleRef>
            <content>
status = psa_export_public_key(key_handle, data, sizeof(data), &amp;data_length);
            </content>
        </template>
        <template category="function_call" display="psa_open_key" id="module.driver.psa_crypto.psa_open_key" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_management"/>
            </moduleRef>
            <content>
status = psa_open_key(key, &amp;key_handle);
            </content>
        </template>
        <template category="function_call" display="psa_close_key" id="module.driver.psa_crypto.psa_close_key" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_management"/>
            </moduleRef>
            <content>
status = psa_close_key(key_handle);
            </content>
        </template>

        <template category="function_call" display="psa_raw_key_agreement" id="module.driver.psa_crypto.psa_raw_key_agreement" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_key_agreement"/>
            </moduleRef>
            <content>
status = psa_raw_key_agreement(alg, private_key, peer_key, peer_key_length, output, sizeof(output), &amp;output_length);
            </content>
        </template>

        <template category="function_call" display="psa_generate_random" id="module.driver.psa_crypto.psa_generate_random" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_random_generation"/>
            </moduleRef>
            <content>
status = psa_generate_random(input, sizeof(input));
            </content>
        </template>


        <template category="function_call" display="psa_hash_setup" id="module.driver.psa_crypto.psa_hash_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_hash_operations"/>
            </moduleRef>
            <content>
psa_hash_operation_t hash_operation = {0};
status = psa_hash_setup(&amp;hash_operation, alg);
            </content>
        </template>
        <template category="function_call" display="psa_hash_update" id="module.driver.psa_crypto.psa_hash_update" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_hash_operations"/>
            </moduleRef>
            <content>
status = psa_hash_update(&amp;operation, input, sizeof(input));
            </content>
        </template>
        <template category="function_call" display="psa_hash_verify" id="module.driver.psa_crypto.psa_hash_verify" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_hash_operations"/>
            </moduleRef>
            <content>
status = psa_hash_verify(&amp;operation, expected_hash, expected_hash_len);
            </content>
        </template>
        <template category="function_call" display="psa_hash_finish" id="module.driver.psa_crypto.psa_hash_finish" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_hash_operations"/>
            </moduleRef>
            <content>
status = psa_hash_finish(&amp;operation, &amp;hash, sizeof(hash), &amp;hash_length);
            </content>
        </template>
        <template category="function_call" display="psa_hash_abort" id="module.driver.psa_crypto.psa_hash_abort" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_hash_operations"/>
            </moduleRef>
            <content>
status = psa_hash_abort(&amp;operation);
            </content>
        </template>
        <template category="function_call" display="psa_hash_clone" id="module.driver.psa_crypto.psa_hash_clone" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_hash_operations"/>
            </moduleRef>
            <content>
status = psa_hash_clone(&amp;operation, &amp;cloned_operation);
            </content>
        </template>


        <template category="function_call" display="psa_mac_sign_setup" id="module.driver.psa_crypto.psa_mac_sign_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_mac"/>
            </moduleRef>
            <content>
psa_mac_operation_t mac_sign_operation = PSA_MAC_OPERATION_INIT;
status = psa_mac_sign_setup(&amp;mac_sign_operation, key_handle, alg);
            </content>
        </template>
        <template category="function_call" display="psa_mac_verify_setup" id="module.driver.psa_crypto.psa_mac_verify_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_mac"/>
            </moduleRef>
            <content>
psa_mac_operation_t mac_verify_operation = PSA_MAC_OPERATION_INIT;
status = psa_mac_verify_setup(&amp;mac_verify_operation, key_handle, alg);
            </content>
        </template>
        <template category="function_call" display="psa_mac_update" id="module.driver.psa_crypto.psa_mac_update" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_mac"/>
            </moduleRef>
            <content>
status = psa_mac_update(&amp;operation, input, input_size);
            </content>
        </template>
        <template category="function_call" display="psa_mac_sign_finish" id="module.driver.psa_crypto.psa_mac_sign_finish" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_mac"/>
            </moduleRef>
            <content>
status = psa_mac_sign_finish(&amp;operation, mac, sizeof(mac), &amp;mac_length);
            </content>
        </template>
        <template category="function_call" display="psa_mac_verify_finish" id="module.driver.psa_crypto.psa_mac_verify_finish" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_mac"/>
            </moduleRef>
            <content>
status = psa_mac_verify_finish(&amp;verify_operation, mac, mac_length);
            </content>
        </template>

        <template category="function_call" display="mbedtls_platform_teardown" id="module.driver.psa_crypto.mbedtls_platform_teardown" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_module_deinitialize"/>
            </moduleRef>
            <content>
mbedtls_platform_teardown(&amp;ctx);
            </content>
        </template>
        <template category="function_call" display="mbedtls_psa_crypto_free" id="module.driver.psa_crypto.mbedtls_psa_crypto_free" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.psa_crypto">
                <function id="psa_crypto_module_deinitialize"/>
            </moduleRef>
            <content>
mbedtls_psa_crypto_free();
            </content>
        </template>

    </developerSupport>

</raModuleDescription>
