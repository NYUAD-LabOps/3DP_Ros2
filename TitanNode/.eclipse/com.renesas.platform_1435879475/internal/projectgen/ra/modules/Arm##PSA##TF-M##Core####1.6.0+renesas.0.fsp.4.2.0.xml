<?xml version="1.0" encoding="UTF-8"?>
<raModuleDescription>
  <config id="config.driver.tfm" path="arm/tfm/rm_tfm_cfg.h" version="0">
    <property default="config.driver.tfm.sci_uart_debug.disabled" description="Defines CFG_UART_DEBUG_ENABLE." display="Debug|SCI UART Debug" id="config.driver.tfm.sci_uart_debug">
      <option display="Disabled" id="config.driver.tfm.sci_uart_debug.disabled" value="0" />
      <option display="Enabled" id="config.driver.tfm.sci_uart_debug.enabled" value="1" />
    </property>
    <property default="" description="Add a path to the mcuboot_config.h file from the bootloader project. It is used to provide the flash layout configuration." display="General|Bootloader mcuboot_config.h" id="config.driver.tfm.mcuboot_config">
      <constraint display="Header with flash layout information is required">("${config.driver.tfm.mcuboot_config}".length != 0)
      </constraint>
    </property>
    <property default="config.driver.tfm.tfm_log_level.off" description="Defines TFM_LOG_LEVEL." display="Debug|Debug log level" id="config.driver.tfm.tfm_log_level">
      <option display="TFM_LOG_LEVEL_OFF" id="config.driver.tfm.tfm_log_level.off" value="0" />
      <option display="TFM_LOG_LEVEL_ERROR" id="config.driver.tfm.tfm_log_level.error" value="1" />
      <option display="TFM_LOG_LEVEL_INFO" id="config.driver.tfm.tfm_log_level.info" value="2" />
      <option display="TFM_LOG_LEVEL_DEBUG" id="config.driver.tfm.tfm_log_level.debug" value="3" />
    </property>
    <property default="0x4000" description="Size of the buffer to be used by crypto service" display="General|TFM_CRYPTO_ENGINE_BUF_SIZE" id="config.driver.tfm.tfm_crypto_engine_buf_size">
      <constraint display="Value must be an integer">testInteger("${config.driver.tfm.tfm_crypto_engine_buf_size}")
      </constraint>
    </property>
    <property default="0x1400" description="Size of the buffer to be used to receive data from non-secure app" display="General|TFM_CRYPTO_IOVEC_BUFFER_SIZE" id="config.driver.tfm.tfm_crypto_iovec_buffer_size">
      <constraint display="Value must be an integer">testInteger("${config.driver.tfm.tfm_crypto_iovec_buffer_size}")
      </constraint>
    </property>
    <property default="0x20000" description="Size of RAM used by secure image." display="Flash Layout|FLASH_SECURE_RAM_SIZE" id="config.driver.tfm.cfg_secure_ram_size">
      <constraint display="Value must be an integer between 0x00000000 and 0x0003FFFF">testInteger("${config.driver.tfm.cfg_secure_ram_size}") &amp;&amp;
(("${config.driver.tfm.cfg_secure_ram_size}" &gt;= 0x00000003) &amp;&amp;("${config.driver.tfm.cfg_secure_ram_size}" &lt;= 0x0003FFFF))
      </constraint>
    </property>
    <property default="BSP_FEATURE_FLASH_DATA_FLASH_START" description="Data Flash address to store ITS data." display="Flash Layout|FLASH_ITS_AREA_OFFSET" id="config.driver.tfm.cfg_data_flash_its_area_offset">
    </property>
    <property default="0xFC0" description="Size of data flash area used to store ITS data." display="Flash Layout|FLASH_ITS_AREA_SIZE" id="config.driver.tfm.flash_its_area_size">
      <constraint display="Value must be an integer">testInteger("${config.driver.tfm.flash_its_area_size}")
      </constraint>
    </property>
    <property default="0x08000FC0" description="Data Flash address to store non-volatile counter data." display="Flash Layout|FLASH_NV_COUNTERS_AREA_OFFSET" id="config.driver.tfm.cfg_data_flash_nv_counters_area_offset">
      <constraint display="Value must be an integer">testInteger("${config.driver.tfm.cfg_data_flash_nv_counters_area_offset}")
      </constraint>
    </property>
    <property default="0x40" description="Size of data flash area used to store counter data." display="Flash Layout|FLASH_NV_COUNTERS_AREA_SIZE" id="config.driver.tfm.flash_nv_counters_area_size">
      <constraint display="Value must be an integer">testInteger("${config.driver.tfm.flash_nv_counters_area_size}")
      </constraint>
    </property>
    <content>
        /*-----------------------------------------------------------
         * TFM Configuration file.
         *----------------------------------------------------------*/

        #include "bsp_api.h"

        /* Common macro for FSP header files. There is also a corresponding FSP_FOOTER macro at the end of this file. */
        FSP_HEADER

        #define RM_TFM_PORT_MCUBOOT_CFG "${config.driver.tfm.mcuboot_config}"
        #include RM_TFM_PORT_MCUBOOT_CFG

        #if (${config.driver.tfm.tfm_log_level})
        #define TFM_CORE_DEBUG (${config.driver.tfm.tfm_log_level})
        #endif

        #define TFM_SPM_LOG_LEVEL (${config.driver.tfm.tfm_log_level})
        #define TFM_PARTITION_LOG_LEVEL (${config.driver.tfm.tfm_log_level})

        #define CFG_UART_DEBUG_ENABLE (${config.driver.tfm.sci_uart_debug})

        #define CFG_SECURE_RAM_SIZE            (${config.driver.tfm.cfg_secure_ram_size})

        #define CFG_DATA_FLASH_NV_COUNTERS_AREA_OFFSET (${config.driver.tfm.cfg_data_flash_nv_counters_area_offset})
        #define CFG_DATA_FLASH_NV_COUNTERS_AREA_SIZE (${config.driver.tfm.flash_nv_counters_area_size})

        #define CFG_DATA_FLASH_OTP_NV_COUNTERS_AREA_OFFSET (CFG_DATA_FLASH_NV_COUNTERS_AREA_OFFSET + \ 
                                                            CFG_DATA_FLASH_NV_COUNTERS_AREA_SIZE)

        #define BL2


        #ifdef MCUBOOT_MEASURED_BOOT
        #define BOOT_DATA_AVAILABLE
        #endif


        //TFM Config

        #define CONFIG_TFM_ENABLE_CTX_MGMT
        #define CONFIG_TFM_ENABLE_MEMORY_PROTECT
        #define TFM_LVL (2)
        #define TFM_PARTITION_CRYPTO
        #define TFM_PARTITION_INITIAL_ATTESTATION
        #define TFM_PARTITION_INTERNAL_TRUSTED_STORAGE
        #define TFM_PARTITION_FIRMWARE_UPDATE
        #define TFM_PARTITION_PLATFORM
        #define TFM_PSA_API
        #define CONFIG_TFM_CONN_HANDLE_MAX_NUM    3
        #define CONFIG_TFM_BUILDING_SPE
        #define PLATFORM_DEFAULT_OTP
        #define OTP_WRITEABLE
        #define CONFIG_TFM_PARTITION_META
        #define TFM_DUMMY_PROVISIONING

        //initial_attestation

        #define T_COSE_DISABLE_CONTENT_TYPE
        #define T_COSE_DISABLE_ES384
        #define T_COSE_DISABLE_ES512
        #define T_COSE_DISABLE_SIGN_VERIFY_TESTS
        #define T_COSE_USE_PSA_CRYPTO
        #define T_COSE_USE_PSA_CRYPTO_FROM_TFM


        //its

        #define CFG_DATA_FLASH_ITS_AREA_OFFSET  (${config.driver.tfm.cfg_data_flash_its_area_offset})
        #define CFG_DATA_FLASH_ITS_AREA_SIZE    (${config.driver.tfm.flash_its_area_size})

        #ifndef CFG_TFM_ITS_SECTORS_PER_BLOCK
        #define CFG_TFM_ITS_SECTORS_PER_BLOCK   (8)
        #endif

        #ifndef CFG_TFM_ITS_MAX_ASSET_SIZE
        #define CFG_TFM_ITS_MAX_ASSET_SIZE      (512)
        #endif

        #ifndef CFG_TFM_ITS_NUM_ASSETS
        #define CFG_TFM_ITS_NUM_ASSETS          (4)
        #endif

        #define ITS_VALIDATE_METADATA_FROM_FLASH

        #ifndef CFG_TFM_ITS_DONT_CREATE_FLASH_LAYOUT
        #define ITS_CREATE_FLASH_LAYOUT
        #endif

        #define TFM_CRYPTO_ENGINE_MBEDTLS

        #define TFM_CRYPTO_IOVEC_BUFFER_SIZE   (${config.driver.tfm.tfm_crypto_iovec_buffer_size})
        #define TFM_CRYPTO_ENGINE_BUF_SIZE     (${config.driver.tfm.tfm_crypto_engine_buf_size})

        #ifndef PSA_CRYPTO_SECURE
        #define PSA_CRYPTO_SECURE (1)
        #endif

        /* Common macro for FSP header files. There is also a corresponding FSP_HEADER macro at the top of this file. */
        FSP_FOOTER
        </content>
  </config>
  <module config="config.driver.tfm" display="Security|Trusted Firmware-M" id="module.driver.tfm" common="1" version="1" url="https://tf-m-user-guide.trustedfirmware.org/">
    <constraint display="Requires HW Acceleration">
          "${interface.driver.rm_tfm_port}" === "1"
    </constraint>
    <constraint display="Cannot be used in a non-secure project">
            "${_project.nonsecure}" !== "1"
    </constraint>
    <requires id="module.driver.rm_tfm_port" interface="interface.driver.rm_tfm_port" visible="true" display="TFM Port" />
    <requires id="module.middleware.mcuboot_image_utilities" interface="interface.middleware.mcuboot_image_utilities" visible="true" display="MCUboot Image Utilities" />
    <requires id="module.driver.tfm.requires._project.secure" interface="_project.secure" visible="false" display="Requires secure project" />
    <provides interface="interface.driver.tfm" />
    <includes>
        #include "rm_tfm_port.h"
    </includes>
  </module>
</raModuleDescription>
