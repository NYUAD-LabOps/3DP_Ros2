<?xml version="1.0" encoding="UTF-8"?>
<raModuleDescription>
    <config id="config.azure.nxd" path="fsp_cfg/azure/nxd/nx_user.h" version="0">
        <property id="config.azure.nxd_src.error_checking" display="Common|Error Checking" default="config.azure.nxd_src.error_checking.enabled" description="When disabled, this option bypasses the basic NetX Duo error checking. This define is typically used after the application is fully debugged.">
            <option id="config.azure.nxd_src.error_checking.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.error_checking.disabled" display="Disabled" value="#define NX_DISABLE_ERROR_CHECKING" />
        </property>
        <property id="config.azure.nxd_src.ip_packet_filter" display="Common|IP Packet Filter" default="config.azure.nxd_src.ip_packet_filter.disabled" description="When enabled, this option enables IP packet filter feature. By default IP packet filter feature is not compiled in.">
            <option id="config.azure.nxd_src.ip_packet_filter.enabled" display="Enabled" value="#define NX_ENABLE_IP_PACKET_FILTER" />
            <option id="config.azure.nxd_src.ip_packet_filter.disabled" display="Disabled (default)" value="" />
        </property>
        <property id="config.azure.nxd_src.ip_static_routing" display="Common|IP Static Routing" default="config.azure.nxd_src.ip_static_routing.disabled" description="When enabled, this option enables IP static routing feature. By default IP static routing feature is not compiled in.">
            <option id="config.azure.nxd_src.ip_static_routing.enabled" display="Enabled" value="#define NX_ENABLE_IP_STATIC_ROUTING" />
            <option id="config.azure.nxd_src.ip_static_routing.disabled" display="Disabled (default)" value="" />
        </property>
        <property default="" display="Common|Physical Header" id="config.azure.nxd_src.physical_header" description="This define specifies the size of the physical packet header. The default value is 16 (based on a typical 16-byte Ethernet header).">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.physical_header}".length === 0) || ("${config.azure.nxd_src.physical_header}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Physical Trailer" id="config.azure.nxd_src.physical_trailer" description="This define specifies the size of the physical packet trailer and is typically used to reserve storage for things like Ethernet CRCs, etc.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.physical_trailer}".length === 0) || ("${config.azure.nxd_src.physical_trailer}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.arp_defend_by_reply" display="Common|ARP Defend By Reply" default="config.azure.nxd_src.arp_defend_by_reply.disabled" description="When enabled, ARP reply is sent when address conflict occurs.">
            <option id="config.azure.nxd_src.arp_defend_by_reply.enabled" display="Enabled" value="#define NX_ARP_DEFEND_BY_REPLY" />
            <option id="config.azure.nxd_src.arp_defend_by_reply.disabled" display="Disabled (default)" value="" />
        </property>
        <property id="config.azure.nxd_src.arp_mac_change_notification" display="Common|ARP Mac Change Notification" default="config.azure.nxd_src.arp_mac_change_notification.disabled" description="To use the ARP collision hander to check for invalid ARP messages matching existing entries in the table (man in the middle attack), enable this feature.">
            <option id="config.azure.nxd_src.arp_mac_change_notification.enabled" display="Enabled" value="#define NX_ARP_MAC_CHANGE_NOTIFICATION_ENABLE" />
            <option id="config.azure.nxd_src.arp_mac_change_notification.disabled" display="Disabled (default)" value="" />
        </property>
        <property default="" display="Common|ARP Expiration Rate" id="config.azure.nxd_src.arp_expiration_rate" description="This define specifies the number of seconds ARP entries remain valid. The default value of 0 disables aging of ARP entries.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.arp_expiration_rate}".length === 0) || ("${config.azure.nxd_src.arp_expiration_rate}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|ARP Update Rate" id="config.azure.nxd_src.arp_update_rate" description="This define specifies the number of seconds between ARP retries. The default value is 10, which represents 10 seconds.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.arp_update_rate}".length === 0) || ("${config.azure.nxd_src.arp_update_rate}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|TCP ACK Timer Rate" id="config.azure.nxd_src.tcp_ack_timer_rate" description="This define specifies how the number of system ticks (TX_TIMER_TICKS_PER_SECOND) is divided to calculate the timer rate for the TCP delayed ACK processing. The default value is 5, which represents 200ms.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_ack_timer_rate}".length === 0) || ("${config.azure.nxd_src.tcp_ack_timer_rate}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|TCP Fast Timer Rate" id="config.azure.nxd_src.tcp_fast_timer_rate" description="This define specifies how the number of system ticks (TX_TIMER_TICKS_PER_SECOND) is divided to calculate the fast TCP timer rate. The fast TCP timer is used to drive various TCP timers, including the delayed ACK timer. The default value is 10, which represents 100ms.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_fast_timer_rate}".length === 0) || ("${config.azure.nxd_src.tcp_fast_timer_rate}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|TCP Transmit Timer Rate" id="config.azure.nxd_src.tcp_transmit_timer_rate" description="This define specifies how the number of system ticks (TX_TIMER_TICKS_PER_SECOND) is divided to calculate the timer rate for the TCP transmit retry processing. The default value is 1, which represents 1 second.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_transmit_timer_rate}".length === 0) || ("${config.azure.nxd_src.tcp_transmit_timer_rate}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|TCP Keepalive Initial" id="config.azure.nxd_src.tcp_keepalive_initial" description="This define specifies how many seconds of inactivity before the keepalive timer activates. The default value is 7200, which represents 2 hours.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_keepalive_initial}".length === 0) || ("${config.azure.nxd_src.tcp_keepalive_initial}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|TCP Keepalive Retry Interval" id="config.azure.nxd_src.tcp_keepalive_retry" description="This define specifies how many seconds between retries of the keepalive timer assuming the other side of the connection is not responding. The default value is 75, which represents 75 seconds between retries.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_keepalive_retry}".length === 0) || ("${config.azure.nxd_src.tcp_keepalive_retry}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|ARP Maximum Retries" id="config.azure.nxd_src.arp_maximum_retries" description="This define specifies the maximum number of ARP retries made without an ARP response. The default value is 18.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.arp_maximum_retries}".length === 0) || ("${config.azure.nxd_src.arp_maximum_retries}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|ARP Maximum Queue Depth" id="config.azure.nxd_src.arp_max_queue_depth" description="This defines specifies the maximum number of packets that can be queued while waiting for an ARP response. The default value is 4.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.arp_max_queue_depth}".length === 0) || ("${config.azure.nxd_src.arp_max_queue_depth}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.arp_auto_arp_entry" display="Common|ARP Auto ARP Entry" default="config.azure.nxd_src.arp_auto_arp_entry.enabled" description="When disabled, this option disables entering ARP request information in the ARP cache.">
            <option id="config.azure.nxd_src.arp_auto_arp_entry.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.arp_auto_arp_entry.disabled" display="Disabled" value="#define NX_ARP_DISABLE_AUTO_ARP_ENTRY" />
        </property>
        <property default="" display="Common|Maximum Multicast Groups" id="config.azure.nxd_src.max_multicast_groups" description="This define specifies the maximum number of multicast groups that can be joined. The default value is 7.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.max_multicast_groups}".length === 0) || ("${config.azure.nxd_src.max_multicast_groups}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Maximum Listen Requests" id="config.azure.nxd_src.max_listen_requests" description="This define specifies the maximum number of TCP server listen requests. The default value is 10.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.max_listen_requests}".length === 0) || ("${config.azure.nxd_src.max_listen_requests}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.tcp_keepalive" display="Common|TCP Keepalive" default="config.azure.nxd_src.tcp_keepalive.disabled" description="When enabled, this option enables the optional TCP keepalive timer.">
            <option id="config.azure.nxd_src.tcp_keepalive.enabled" display="Enabled" value="#define NX_TCP_ENABLE_KEEPALIVE" />
            <option id="config.azure.nxd_src.tcp_keepalive.disabled" display="Disabled (default)" value="" />
        </property>
        <property id="config.azure.nxd_src.tcp_window_scaling" display="Common|TCP Window Scaling" default="config.azure.nxd_src.tcp_window_scaling.disabled" description="When enabled, this option enables the TCP window scaling feature. (RFC 1323). Default disabled.">
            <option id="config.azure.nxd_src.tcp_window_scaling.enabled" display="Enabled" value="#define NX_TCP_ENABLE_WINDOW_SCALING" />
            <option id="config.azure.nxd_src.tcp_window_scaling.disabled" display="Disabled (default)" value="" />
        </property>
        <property id="config.azure.nxd_src.tcp_immediate_ack" display="Common|TCP Immediate ACK" default="config.azure.nxd_src.tcp_immediate_ack.disabled" description="When enabled, this option enables the optional TCP immediate ACK response processing.">
            <option id="config.azure.nxd_src.tcp_immediate_ack.enabled" display="Enabled" value="#define NX_TCP_IMMEDIATE_ACK" />
            <option id="config.azure.nxd_src.tcp_immediate_ack.disabled" display="Disabled (default)" value="" />
        </property>
        <property default="" display="Common|TCP ACK Every N Packets" id="config.azure.nxd_src.tcp_ack_every_n_packets" description="The default value is disabled. To enable this feature, input a positive number.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_ack_every_n_packets}".length === 0) || ("${config.azure.nxd_src.tcp_ack_every_n_packets}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|TCP Maximum Retries" id="config.azure.nxd_src.tcp_maximum_retries" description="This define specifies how many transmit retires are allowed before the connection is deemed broken. The default value is 10.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_maximum_retries}".length === 0) || ("${config.azure.nxd_src.tcp_maximum_retries}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|TCP Maximum TX Queue" id="config.azure.nxd_src.tcp_maximum_tx_queue" description="This define specifies the maximum depth of the TCP transmit queue before TCP send requests are suspended or rejected. The default value is 20, which means that a maximum of 20 packets can be in the transmit queue at any given time.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_maximum_tx_queue}".length === 0) || ("${config.azure.nxd_src.tcp_maximum_tx_queue}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|TCP Retry Shift" id="config.azure.nxd_src.tcp_retry_shift" description="This define specifies how the retransmit timeout period changes between successive retries. If this value is 0, the initial retransmit timeout is the same as subsequent retransmit timeouts. If this value is 1, each successive retransmit is twice as long. The default value is 0.">
            <constraint display="Value must be a non-negative integer">("${config.azure.nxd_src.tcp_retry_shift}".length === 0) || ("${config.azure.nxd_src.tcp_retry_shift}" &gt;= 0)</constraint>
        </property>
        <property default="" display="Common|TCP Keepalive Retries" id="config.azure.nxd_src.tcp_keepalive_retries" description="This define specifies how many keepalive retries are allowed before the connection is deemed broken. The default value is 10.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_keepalive_retries}".length === 0) || ("${config.azure.nxd_src.tcp_keepalive_retries}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.driver_deferred_processing" display="Common|Driver Deferred Processing" default="config.azure.nxd_src.driver_deferred_processing.disabled" description="When enabled, this option enables deferred driver packet handling. This allows the driver to place a raw packet on the IP instance and have the driver's real processing routine called from the NetX Duo internal IP helper thread.">
            <option id="config.azure.nxd_src.driver_deferred_processing.enabled" display="Enabled" value="#define NX_DRIVER_DEFERRED_PROCESSING" />
            <option id="config.azure.nxd_src.driver_deferred_processing.disabled" display="Disabled (default)" value="" />
        </property>
        <property id="config.azure.nxd_src.loopback_interface" display="Common|Loopback Interface" default="config.azure.nxd_src.loopback_interface.enabled" description="When disabled, this option disables NetX Duo support on the 127.0.0.1 loopback interface. 127.0.0.1 loopback interface is enabled by default.">
            <option id="config.azure.nxd_src.loopback_interface.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.loopback_interface.disabled" display="Disabled" value="#define NX_DISABLE_LOOPBACK_INTERFACE" />
        </property>
        <property default="" display="Common|Maximum Physical Interfaces" id="config.azure.nxd_src.max_physical_interfaces" description="This option defines the number of physical network interfaces to support. Default is one">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.max_physical_interfaces}".length === 0) || ("${config.azure.nxd_src.max_physical_interfaces}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.fragmentation" display="Common|Fragmentation support" default="config.azure.nxd_src.fragmentation.enabled" description="When disabled, this option disables all IP fragmentation logic.">
            <option id="config.azure.nxd_src.fragmentation.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.fragmentation.disabled" display="Disabled" value="#define NX_DISABLE_FRAGMENTATION" />
        </property>
        <property id="config.azure.nxd_src.ip_rx_checksum" display="Common|IP RX Checksum" default="config.azure.nxd_src.ip_rx_checksum.enabled" description="When disabled, this option disables checksum logic on received IP packets. This is useful if the link-layer has reliable checksum or CRC logic.">
            <option id="config.azure.nxd_src.ip_rx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.ip_rx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_IP_RX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.ip_tx_checksum" display="Common|IP TX Checksum" default="config.azure.nxd_src.ip_tx_checksum.enabled" description="When disabled, this option disables checksum logic on transmitted IP packets.">
            <option id="config.azure.nxd_src.ip_tx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.ip_tx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_IP_TX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.tcp_rx_checksum" display="Common|TCP RX Checksum" default="config.azure.nxd_src.tcp_rx_checksum.enabled" description="When disabled, this option disables checksum logic on received TCP packets.">
            <option id="config.azure.nxd_src.tcp_rx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.tcp_rx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_TCP_RX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.tcp_tx_checksum" display="Common|TCP TX Checksum" default="config.azure.nxd_src.tcp_tx_checksum.enabled" description="When disabled, this option disables checksum logic on transmitted TCP packets.">
            <option id="config.azure.nxd_src.tcp_tx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.tcp_tx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_TCP_TX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.udp_rx_checksum" display="Common|UDP RX Checksum" default="config.azure.nxd_src.udp_rx_checksum.enabled" description="When disabled, this option disables checksum logic on received UDP packets.">
            <option id="config.azure.nxd_src.udp_rx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.udp_rx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_UDP_RX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.udp_tx_checksum" display="Common|UDP TX Checksum" default="config.azure.nxd_src.udp_tx_checksum.enabled" description="When disabled, this option disables checksum logic on transmitted UDP packets.">
            <option id="config.azure.nxd_src.udp_tx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.udp_tx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_UDP_TX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.reset_disconnect" display="Common|Reset Disconnect" default="config.azure.nxd_src.reset_disconnect.enabled" description="When disabled, this option disables the reset processing during disconnect.">
            <option id="config.azure.nxd_src.reset_disconnect.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.reset_disconnect.disabled" display="Disabled" value="#define NX_DISABLE_RESET_DISCONNECT" />
        </property>
        <property id="config.azure.nxd_src.rx_size_checking" display="Common|RX Size Checking" default="config.azure.nxd_src.rx_size_checking.enabled" description="When disabled, the addition size checking on received packets is disabled.">
            <option id="config.azure.nxd_src.rx_size_checking.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.rx_size_checking.disabled" display="Disabled" value="#define NX_DISABLE_RX_SIZE_CHECKING" />
        </property>
        <property id="config.azure.nxd_src.arp_info" display="Common|ARP Info" default="config.azure.nxd_src.arp_info.enabled" description="When disabled, ARP information gathering is disabled.">
            <option id="config.azure.nxd_src.arp_info.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.arp_info.disabled" display="Disabled" value="#define NX_DISABLE_ARP_INFO" />
        </property>
        <property id="config.azure.nxd_src.ip_info" display="Common|IP Info" default="config.azure.nxd_src.ip_info.enabled" description="When disabled, IP information gathering is disabled.">
            <option id="config.azure.nxd_src.ip_info.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.ip_info.disabled" display="Disabled" value="#define NX_DISABLE_IP_INFO" />
        </property>
        <property id="config.azure.nxd_src.icmp_info" display="Common|ICMP Info" default="config.azure.nxd_src.icmp_info.enabled" description="When disabled, ICMP information gathering is disabled.">
            <option id="config.azure.nxd_src.icmp_info.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmp_info.disabled" display="Disabled" value="#define NX_DISABLE_ICMP_INFO" />
        </property>
        <property id="config.azure.nxd_src.igmpv2" display="Common|IGMPv2" default="config.azure.nxd_src.igmpv2.enabled" description="When disabled, NetX Duo employs version 1 of the IGMP protocol">
            <option id="config.azure.nxd_src.igmpv2.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.igmpv2.disabled" display="Disabled" value="#define NX_DISABLE_IGMPV2" />
        </property>
        <property id="config.azure.nxd_src.igmp_info" display="Common|IGMP Info" default="config.azure.nxd_src.igmp_info.enabled" description="When disabled, IGMP information gathering is disabled.">
            <option id="config.azure.nxd_src.igmp_info.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.igmp_info.disabled" display="Disabled" value="#define NX_DISABLE_IGMP_INFO" />
        </property>
        <property id="config.azure.nxd_src.packet_info" display="Common|Packet Info" default="config.azure.nxd_src.packet_info.enabled" description="When disabled, packet information gathering is disabled.">
            <option id="config.azure.nxd_src.packet_info.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.packet_info.disabled" display="Disabled" value="#define NX_DISABLE_PACKET_INFO" />
        </property>
        <property id="config.azure.nxd_src.rarp_info" display="Common|RARP Info" default="config.azure.nxd_src.rarp_info.enabled" description="When disabled, RARP information gathering is disabled.">
            <option id="config.azure.nxd_src.rarp_info.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.rarp_info.disabled" display="Disabled" value="#define NX_DISABLE_RARP_INFO" />
        </property>
        <property id="config.azure.nxd_src.tcp_info" display="Common|TCP Info" default="config.azure.nxd_src.tcp_info.enabled" description="When disabled, TCP information gathering is disabled.">
            <option id="config.azure.nxd_src.tcp_info.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.tcp_info.disabled" display="Disabled" value="#define NX_DISABLE_TCP_INFO" />
        </property>
        <property id="config.azure.nxd_src.udp_info" display="Common|UDP Info" default="config.azure.nxd_src.udp_info.enabled" description="When disabled, UDP information gathering is disabled.">
            <option id="config.azure.nxd_src.udp_info.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.udp_info.disabled" display="Disabled" value="#define NX_DISABLE_UDP_INFO" />
        </property>
        <property id="config.azure.nxd_src.extended_notify_support" display="Common|Extended Notify Support" default="config.azure.nxd_src.extended_notify_support.disabled" description="When enabled, extended notify support is enabled. This feature adds additional callback/notify services to NetX Duo API for notifying the host of socket events, such as TCP connection and disconnect completion. The default is that the extended notify feature is enabled.">
            <option id="config.azure.nxd_src.extended_notify_support.enabled" display="Enabled" value="#define NX_ENABLE_EXTENDED_NOTIFY_SUPPORT" />
            <option id="config.azure.nxd_src.extended_notify_support.disabled" display="Disabled (default)" value="" />
        </property>
        <property id="config.azure.nxd_src.natd" display="Common|NAT" default="config.azure.nxd_src.natd.disabled" description="When enabled, NAT is enabled. The default is NAT disabled.">
            <option id="config.azure.nxd_src.natd.enabled" display="Enabled" value="#define NX_NAT_ENABLE" />
            <option id="config.azure.nxd_src.natd.disabled" display="Disabled (default)" value="" />
        </property>
        <property default="" display="Common|Packet Header Pad Size" id="config.azure.nxd_src.packet_header_pad_size" description="When set, NX_PACKET structure is padded for alignment purpose. The default is no padding.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.packet_header_pad_size}".length === 0) || ("${config.azure.nxd_src.packet_header_pad_size}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|TCP MSS Minimum" id="config.azure.nxd_src.tcp_mss_minimum" description="Define the value of the TCP minimum acceptable MSS for the host to accept the connection">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_mss_minimum}".length === 0) || ("${config.azure.nxd_src.tcp_mss_minimum}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.source_address_check" display="Common|Source Address Check" default="config.azure.nxd_src.source_address_check.disabled" description="When enabled, the source address of incoming packet is checked. The default is disabled.">
            <option id="config.azure.nxd_src.source_address_check.enabled" display="Enabled" value="#define NX_ENABLE_SOURCE_ADDRESS_CHECK" />
            <option id="config.azure.nxd_src.source_address_check.disabled" display="Disabled (default)" value="" />
        </property>
        <property default="" display="Common|ARP Defend Interval" id="config.azure.nxd_src.arp_defend_interval" description="Define the ARP defend interval. The default value is 10 seconds.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.arp_defend_interval}".length === 0) || ("${config.azure.nxd_src.arp_defend_interval}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|TCP Maximum Out Of Order Packets" id="config.azure.nxd_src.tcp_max_out_of_order_packets" description="This specifies the maximum out of order packets that can be received without removing packets from the queue starting with the most recent. By default it is not defined.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.tcp_max_out_of_order_packets}".length === 0) || ("${config.azure.nxd_src.tcp_max_out_of_order_packets}" &gt; 0)</constraint>
        </property>
        <property default="config.azure.nxd_src.feature_nx_ipv6.enabled" display="Common|NetX Duo IPV6 Support" id="config.azure.nxd_src.feature_nx_ipv6">
            <option display="Disabled" id="config.azure.nxd_src.feature_nx_ipv6.disabled" value="#define NX_DISABLE_IPV6"/>
            <option display="Enabled (default)" id="config.azure.nxd_src.feature_nx_ipv6.enabled" value=""/>
        </property>
        <property id="config.azure.nxd_src.ipv6_address_change_notify" display="Common|Notify when the IPv6 address is changed" default="config.azure.nxd_src.ipv6_address_change_notify.disabled" description="">
            <option id="config.azure.nxd_src.ipv6_address_change_notify.enabled" display="Enabled" value="#define NX_ENABLE_IPV6_ADDRESS_CHANGE_NOTIFY" />
            <option id="config.azure.nxd_src.ipv6_address_change_notify.disabled" display="Disabled (default)" value="" />
        </property>
        <property id="config.azure.nxd_src.ipv6_path_mtu_discovery" display="Common|Allow discover maximum MTU in the path" default="config.azure.nxd_src.ipv6_path_mtu_discovery.disabled" description="">
            <option id="config.azure.nxd_src.ipv6_path_mtu_discovery.enabled" display="Enabled" value="#define NX_ENABLE_IPV6_PATH_MTU_DISCOVERY" />
            <option id="config.azure.nxd_src.ipv6_path_mtu_discovery.disabled" display="Disabled (default)" value="" />
        </property>
        <property default="" display="Common|Wait before resetting target's path MTU in destination table (seconds)" id="config.azure.nxd_src.path_mtu_increase_wait_interval" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.path_mtu_increase_wait_interval}".length === 0) || ("${config.azure.nxd_src.path_mtu_increase_wait_interval}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|IPv6 routing table entry limit" id="config.azure.nxd_src.ipv6_default_router_table_size" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.ipv6_default_router_table_size}".length === 0) || ("${config.azure.nxd_src.ipv6_default_router_table_size}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|IPv6 destination table entry limit" id="config.azure.nxd_src.ipv6_destination_table_size" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.ipv6_destination_table_size}".length === 0) || ("${config.azure.nxd_src.ipv6_destination_table_size}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Maximum time allowed to reassemble IP fragment" id="config.azure.nxd_src.ip_max_reassembly_time" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.ip_max_reassembly_time}".length === 0) || ("${config.azure.nxd_src.ip_max_reassembly_time}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Maximum time allowed to reassemble IPv4 fragment" id="config.azure.nxd_src.ipv4_max_reassembly_time" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.ipv4_max_reassembly_time}".length === 0) || ("${config.azure.nxd_src.ipv4_max_reassembly_time}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Maximum time allowed to reassemble IPv6 fragment" id="config.azure.nxd_src.ipv6_max_reassembly_time" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.ipv6_max_reassembly_time}".length === 0) || ("${config.azure.nxd_src.ipv6_max_reassembly_time}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.ipv6_multicast" display="Common|IPv6 multicast join/leave function support" default="config.azure.nxd_src.ipv6_multicast.disabled" description="">
            <option id="config.azure.nxd_src.ipv6_multicast.enabled" display="Enabled" value="#define NX_ENABLE_IPV6_MULTICAST" />
            <option id="config.azure.nxd_src.ipv6_multicast.disabled" display="Disabled (default)" value="" />
        </property>
        <property default="" display="Common|Size of the prefix table for router advertisements" id="config.azure.nxd_src.ipv6_prefix_list_table_size" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.ipv6_prefix_list_table_size}".length === 0) || ("${config.azure.nxd_src.ipv6_prefix_list_table_size}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.ipv6_stateless_autoconfig_control" display="Common|Stateless address auto-configuration support" default="config.azure.nxd_src.ipv6_stateless_autoconfig_control.disabled" description="">
            <option id="config.azure.nxd_src.ipv6_stateless_autoconfig_control.enabled" display="Enabled" value="#define NX_IPV6_STATELESS_AUTOCONFIG_CONTROL" />
            <option id="config.azure.nxd_src.ipv6_stateless_autoconfig_control.disabled" display="Disabled (default)" value="" />
        </property>
        <property default="" display="Common|IPv6 address pool entry limit" id="config.azure.nxd_src.max_ipv6_addresses" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.max_ipv6_addresses}".length === 0) || ("${config.azure.nxd_src.max_ipv6_addresses}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Delay before the first stale cache entry solicitation (seconds)" id="config.azure.nxd_src.delay_first_probe_time" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.delay_first_probe_time}".length === 0) || ("${config.azure.nxd_src.delay_first_probe_time}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.ipv6_dad" display="Common|Duplicate Address Detection support" default="config.azure.nxd_src.ipv6_dad.enabled" description="">
            <option id="config.azure.nxd_src.ipv6_dad.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.ipv6_dad.disabled" display="Disabled" value="#define NX_DISABLE_IPV6_DAD" />
        </property>
        <property default="" display="Common|Neighbor Solicitation message count before interface address marked valid" id="config.azure.nxd_src.ipv6_dad_transmits" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.ipv6_dad_transmits}".length === 0) || ("${config.azure.nxd_src.ipv6_dad_transmits}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.ipv6_purge_unused_cache_entries" display="Common|Retain older cache table entries till timeout option" default="config.azure.nxd_src.ipv6_purge_unused_cache_entries.disabled" description="">
            <option id="config.azure.nxd_src.ipv6_purge_unused_cache_entries.enabled" display="Enabled" value="" />
            <option id="config.azure.nxd_src.ipv6_purge_unused_cache_entries.disabled" display="Disabled (default)" value="#define NX_DISABLE_IPV6_PURGE_UNUSED_CACHE_ENTRIES" />
        </property>
        <property default="" display="Common|IPv6 Neighbor Cache table entry limit." id="config.azure.nxd_src.ipv6_neighbor_cache_size" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.ipv6_neighbor_cache_size}".length === 0) || ("${config.azure.nxd_src.ipv6_neighbor_cache_size}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Neighbor Solicitation message count for IPv6 Neighbor Discovery protocol" id="config.azure.nxd_src.max_multicast_solicit" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.max_multicast_solicit}".length === 0) || ("${config.azure.nxd_src.max_multicast_solicit}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Neighbor Solicitation message count to determine neighbor’s reachability" id="config.azure.nxd_src.max_unicast_solicit" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.max_unicast_solicit}".length === 0) || ("${config.azure.nxd_src.max_unicast_solicit}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Maximum entries in ND cache queue" id="config.azure.nxd_src.nd_max_queue_depth" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.nd_max_queue_depth}".length === 0) || ("${config.azure.nxd_src.nd_max_queue_depth}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Duration for address to be 'reachable' with no packets received from it (seconds)" id="config.azure.nxd_src.reachable_time" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.reachable_time}".length === 0) || ("${config.azure.nxd_src.reachable_time}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Delay between solicitation packets (milliseconds)" id="config.azure.nxd_src.retrans_timer" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.retrans_timer}".length === 0) || ("${config.azure.nxd_src.retrans_timer}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.icmpv6_error_message" display="Common|ICMPv6 error message in response to invalid packet support" default="config.azure.nxd_src.icmpv6_error_message.enabled" description="">
            <option id="config.azure.nxd_src.icmpv6_error_message.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmpv6_error_message.disabled" display="Disabled" value="#define NX_DISABLE_ICMPV6_ERROR_MESSAGE" />
        </property>
        <property id="config.azure.nxd_src.icmpv6_redirect_process" display="Common|ICMPv6 redirect packet processing support" default="config.azure.nxd_src.icmpv6_redirect_process.enabled" description="">
            <option id="config.azure.nxd_src.icmpv6_redirect_process.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmpv6_redirect_process.disabled" display="Disabled" value="#define NX_DISABLE_ICMPV6_REDIRECT_PROCESS" />
        </property>
        <property id="config.azure.nxd_src.icmpv6_router_advertisement_process" display="Common|IPv6 router advertisement packet processing support" default="config.azure.nxd_src.icmpv6_router_advertisement_process.enabled" description="">
            <option id="config.azure.nxd_src.icmpv6_router_advertisement_process.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmpv6_router_advertisement_process.disabled" display="Disabled" value="#define NX_DISABLE_ICMPV6_ROUTER_ADVERTISEMENT_PROCESS" />
        </property>
        <property id="config.azure.nxd_src.icmpv6_router_solicitation" display="Common|Periodic IPv6 router solicitation messages support" default="config.azure.nxd_src.icmpv6_router_solicitation.enabled" description="">
            <option id="config.azure.nxd_src.icmpv6_router_solicitation.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmpv6_router_solicitation.disabled" display="Disabled" value="#define NX_DISABLE_ICMPV6_ROUTER_SOLICITATION" />
        </property>
        <property default="" display="Common|Maximum host router solicitations till no response is received" id="config.azure.nxd_src.icmpv6_max_rtr_solicitations" description="Maximum host router solicitations till no response is received. If no response is received, the host concludes no router is present">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.icmpv6_max_rtr_solicitations}".length === 0) || ("${config.azure.nxd_src.icmpv6_max_rtr_solicitations}" &gt; 0)</constraint>
        </property>
        <property default="" display="Common|Interval between two router solicitation messages" id="config.azure.nxd_src.icmpv6_rtr_solicitation_interval" description="">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.icmpv6_rtr_solicitation_interval}".length === 0) || ("${config.azure.nxd_src.icmpv6_rtr_solicitation_interval}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.nxd_src.icmpv4_rx_checksum" display="Common|Checksum computation support on received ICMPv4 packets" default="config.azure.nxd_src.icmpv4_rx_checksum.enabled" description="">
            <option id="config.azure.nxd_src.icmpv4_rx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmpv4_rx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_ICMPV4_RX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.icmpv6_rx_checksum" display="Common|Checksum computation support on received ICMPv6 packets" default="config.azure.nxd_src.icmpv6_rx_checksum.enabled" description="">
            <option id="config.azure.nxd_src.icmpv6_rx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmpv6_rx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_ICMPV6_RX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.icmp_rx_checksum" display="Common|Checksum computation support on received ICMP packets" default="config.azure.nxd_src.icmp_rx_checksum.enabled" description="">
            <option id="config.azure.nxd_src.icmp_rx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmp_rx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_ICMP_RX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.icmpv4_tx_checksum" display="Common|Checksum computation support on transmitted ICMPv4 packets" default="config.azure.nxd_src.icmpv4_tx_checksum.enabled" description="">
            <option id="config.azure.nxd_src.icmpv4_tx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmpv4_tx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_ICMPV4_TX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.icmpv6_tx_checksum" display="Common|Checksum computation support on transmitted ICMPv6 packets" default="config.azure.nxd_src.icmpv6_tx_checksum.enabled" description="">
            <option id="config.azure.nxd_src.icmpv6_tx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmpv6_tx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_ICMPV6_TX_CHECKSUM" />
        </property>
        <property id="config.azure.nxd_src.icmp_tx_checksum" display="Common|Checksum computation support on transmitted ICMP packets" default="config.azure.nxd_src.icmp_tx_checksum.enabled" description="">
            <option id="config.azure.nxd_src.icmp_tx_checksum.enabled" display="Enabled (default)" value="" />
            <option id="config.azure.nxd_src.icmp_tx_checksum.disabled" display="Disabled" value="#define NX_DISABLE_ICMP_TX_CHECKSUM" />
        </property>
        <property default="" display="Common|Packet Alignment" id="config.azure.nxd_src.packet_alignment" description="If defined, the packet header and payload are aligned automatically to the value specified in the symbol. By default it is not defined.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.nxd_src.packet_alignment}".length === 0) || ("${config.azure.nxd_src.packet_alignment}" &gt; 0)</constraint>
        </property>
        <property default="rand" display="Common|Random Number Generator" id="config.azure.nxd_src.rand" description="Function used as the random number generator by NetX Duo.">
            <constraint display="Name must be a valid C symbol">testSymbol("${config.azure.nxd_src.rand}")</constraint>
        </property>
        <property default="srand" display="Common|Seed Random Number Generator" id="config.azure.nxd_src.srand" description="Function used to seed the random number generator used by NetX Duo.">
            <constraint display="Name must be a valid C symbol">testSymbol("${config.azure.nxd_src.srand}")</constraint>
        </property>
        <property default="config.azure.nxd_dhcp_common.tos.normal" display="DHCP|Common|IPv4|Type of Service for UDP requests" id="config.azure.nxd_dhcp_common.tos">
            <option display="Normal" id="config.azure.nxd_dhcp_common.tos.normal" value="NX_IP_NORMAL"/>
            <option display="Minimum delay" id="config.azure.nxd_dhcp_common.tos.min_delay" value="NX_IP_MIN_DELAY"/>
            <option display="Maximum data" id="config.azure.nxd_dhcp_common.tos.max_data" value="NX_IP_MAX_DATA"/>
            <option display="Maximum reliability" id="config.azure.nxd_dhcp_common.tos.max_reliable" value="NX_IP_MAX_RELIABLE"/>
            <option display="Minimum cost" id="config.azure.nxd_dhcp_common.tos.min_cost" value="NX_IP_MIN_COST"/>
        </property>
        <property default="config.azure.nxd_dhcp_common.fragment_option.dont_fragment" display="DHCP|Common|IPv4|Fragmentation option" id="config.azure.nxd_dhcp_common.fragment_option">
            <option display="Don't fragment" id="config.azure.nxd_dhcp_common.fragment_option.dont_fragment" value="NX_DONT_FRAGMENT"/>
            <option display="Fragment okay" id="config.azure.nxd_dhcp_common.fragment_option.fragment_okay" value="NX_FRAGMENT_OKAY"/>
        </property>
        <property default="128" display="DHCP|Common|IPv4|Time to live" id="config.azure.nxd_dhcp_common.time_to_live">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_common.time_to_live}")  &amp;&amp; ("${config.azure.nxd_dhcp_common.time_to_live}" &gt;= 0)
            </constraint>
        </property>
        <property default="5" display="DHCP|Common|IPv4|Packet Queue depth" id="config.azure.nxd_dhcp_common.queue_depth">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_common.queue_depth}")  &amp;&amp; ("${config.azure.nxd_dhcp_common.queue_depth}" &gt;= 0)
            </constraint>
        </property>
        <property default="3" display="DHCP|Client|IPv4|Internal thread priority" id="config.azure.nxd_dhcp_client.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.priority}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="4096" display="DHCP|Client|IPv4|Internal thread stack size (bytes)" id="config.azure.nxd_dhcp_client.thread_stack_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.thread_stack_size}")  &amp;&amp; (("${config.azure.nxd_dhcp_client.thread_stack_size}" % 8) == 0)
            </constraint>
        </property>
        <property default="1" display="DHCP|Client|IPv4|Timeout between DHCP messages processed (seconds)" id="config.azure.nxd_dhcp_client.time_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.time_interval}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.time_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_dhcp_client.bootp.disable" display="DHCP|Client|IPv4|Use BOOTP" id="config.azure.nxd_dhcp_client.bootp">
            <option display="Disable" id="config.azure.nxd_dhcp_client.bootp.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_dhcp_client.bootp.enable" value="#define NX_DHCP_ENABLE_BOOTP"/>
        </property>
        <property default="config.azure.nxd_dhcp_client.send_arp_probe.disable" display="DHCP|Client|IPv4|Send ARP probe" id="config.azure.nxd_dhcp_client.send_arp_probe">
            <option display="Disable" id="config.azure.nxd_dhcp_client.send_arp_probe.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_dhcp_client.send_arp_probe.enable" value="#define NX_DHCP_CLIENT_SEND_ARP_PROBE"/>
        </property>
        <property default="1" display="DHCP|Client|IPv4|ARP probe wait time (seconds)" description="Requires 'Send ARP probe' enabled" id="config.azure.nxd_dhcp_client.arp_probe_wait">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.arp_probe_wait}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.arp_probe_wait}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="DHCP|Client|IPv4|Minimum ARP probe wait time (seconds)" description="Requires 'Send ARP probe' enabled" id="config.azure.nxd_dhcp_client.arp_probe_min">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.arp_probe_min}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.arp_probe_min}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="DHCP|Client|IPv4|Maximum ARP probe wait time (seconds)" description="Requires 'Send ARP probe' enabled" id="config.azure.nxd_dhcp_client.arp_probe_max">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.arp_probe_max}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.arp_probe_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="DHCP|Client|IPv4|ARP probe count" description="Requires 'Send ARP probe' enabled" id="config.azure.nxd_dhcp_client.arp_probe_num">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.arp_probe_num}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.arp_probe_num}" &gt;= 0)
            </constraint>
        </property>
        <property default="64" display="DHCP|Client|IPv4|Maximum retransmission timeout (seconds)" id="config.azure.nxd_dhcp_client.max_retrans_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.max_retrans_timeout}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.max_retrans_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="60" display="DHCP|Client|IPv4|Minimum renew timeout (seconds)" id="config.azure.nxd_dhcp_client.min_renew_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.min_renew_timeout}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.min_renew_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="4" display="DHCP|Client|IPv4|Minimum retransmission timeout (seconds)" id="config.azure.nxd_dhcp_client.min_retrans_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.min_retrans_timeout}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.min_retrans_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_dhcp_client.client_restore_state.disable" display="DHCP|Client|IPv4|Persistent client state" id="config.azure.nxd_dhcp_client.client_restore_state">
            <option display="Disable" id="config.azure.nxd_dhcp_client.client_restore_state.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_dhcp_client.client_restore_state.enable" value="#define NX_DHCP_CLIENT_RESTORE_STATE"/>
        </property>
        <property default="config.azure.nxd_dhcp_client.send_max_dhcp_message_option.disable" display="DHCP|Client|IPv4|Maximum message size support" id="config.azure.nxd_dhcp_client.send_max_dhcp_message_option">
            <option display="Disable" id="config.azure.nxd_dhcp_client.send_max_dhcp_message_option.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_dhcp_client.send_max_dhcp_message_option.enable" value="#define NX_DHCP_CLIENT_SEND_MAX_DHCP_MESSAGE_OPTION"/>
        </property>
        <property default="312" display="DHCP|Client|IPv4|DHCP options buffer size (bytes)" id="config.azure.nxd_dhcp_client.buffer_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.buffer_size}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.buffer_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="DHCP|Client|IPv4|Maximum number of network interfaces for DHCP client" id="config.azure.nxd_dhcp_client.max_records" description="Specify the Maximum number of network interfaces for DHCP client">
            <constraint display="Value must be a non-negative integer, Incase of non default value make sure to attach the NetX Duo Source module">
                testInteger("${config.azure.nxd_dhcp_client.max_records}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.max_records}" &gt;= 1)
            </constraint>
        </property>
        <property default="10" display="DHCP|Client|IPv4|Wait before restarting the configuration process (seconds)" description="wait time before restarting the configuration process when DHCP detects that the address is already in use" id="config.azure.nxd_dhcp_client.restart_wait">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_client.restart_wait}")  &amp;&amp; ("${config.azure.nxd_dhcp_client.restart_wait}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_http_common.tos.normal" display="HTTP|Common|Type of Service" id="config.azure.nxd_http_common.tos">
            <option display="Normal" id="config.azure.nxd_http_common.tos.normal" value="NX_IP_NORMAL"/>
            <option display="Minimum delay" id="config.azure.nxd_http_common.tos.min_delay" value="NX_IP_MIN_DELAY"/>
            <option display="Maximum data" id="config.azure.nxd_http_common.tos.max_data" value="NX_IP_MAX_DATA"/>
            <option display="Maximum reliability" id="config.azure.nxd_http_common.tos.max_reliable" value="NX_IP_MAX_RELIABLE"/>
            <option display="Minimum cost" id="config.azure.nxd_http_common.tos.min_cost" value="NX_IP_MIN_COST"/>
        </property>
        <property default="config.azure.nxd_http_common.fragment_option.dont_fragment" display="HTTP|Common|Fragmentation option" id="config.azure.nxd_http_common.fragment_option">
            <option display="Don't fragment" id="config.azure.nxd_http_common.fragment_option.dont_fragment" value="NX_DONT_FRAGMENT"/>
            <option display="Fragment okay" id="config.azure.nxd_http_common.fragment_option.fragment_okay" value="NX_FRAGMENT_OKAY"/>
        </property>
        <property default="128" display="HTTP|Common|Time to live" id="config.azure.nxd_http_common.time_to_live">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_common.time_to_live}")  &amp;&amp; ("${config.azure.nxd_http_common.time_to_live}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_http_common.digest.disable" display="HTTP|Common|MD5 Support" id="config.azure.nxd_http_common.digest">
            <option display="Disable" id="config.azure.nxd_http_common.digest.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_http_common.digest.enable" value="#define NX_HTTP_DIGEST_ENABLE"/>
        </property>
        <property default="40" display="HTTP|Common|Maximum resource name length (bytes)" id="config.azure.nxd_http_common.max_resource">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_common.max_resource}")  &amp;&amp; ("${config.azure.nxd_http_common.max_resource}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="HTTP|Common|Maximum password length (bytes)" id="config.azure.nxd_http_common.max_password">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_common.max_password}")  &amp;&amp; ("${config.azure.nxd_http_common.max_password}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="HTTP|Common|Maximum username length (bytes)" id="config.azure.nxd_http_common.max_name">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_common.max_name}")  &amp;&amp; ("${config.azure.nxd_http_common.max_name}" &gt;= 0)
            </constraint>
        </property>
        <property default="600" display="HTTP|Client|Minimum packet size (bytes)" id="config.azure.nxd_http_client.min_packet_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_client.min_packet_size}")  &amp;&amp; ("${config.azure.nxd_http_client.min_packet_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="HTTP|Client|Operation timeout (seconds)" id="config.azure.nxd_http_client.timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_client.timeout}")  &amp;&amp; ("${config.azure.nxd_http_client.timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_dns_client.control_tos.normal" display="DNS|Client|DNS Control Type of Service" id="config.azure.nxd_dns_client.control_tos">
            <option display="Normal" id="config.azure.nxd_dns_client.control_tos.normal" value="NX_IP_NORMAL"/>
            <option display="Minimum delay" id="config.azure.nxd_dns_client.control_tos.min_delay" value="NX_IP_MIN_DELAY"/>
            <option display="Maximum data" id="config.azure.nxd_dns_client.control_tos.max_data" value="NX_IP_MAX_DATA"/>
            <option display="Maximum reliability" id="config.azure.nxd_dns_client.control_tos.max_reliable" value="NX_IP_MAX_RELIABLE"/>
            <option display="Minimum cost" id="config.azure.nxd_dns_client.control_tos.min_cost" value="NX_IP_MIN_COST"/>
        </property>
        <property default="config.azure.nxd_dns_client.fragment_option.dont_fragment" display="DNS|Client|Socket fragmentation option" id="config.azure.nxd_dns_client.fragment_option">
            <option display="Dont fragment" id="config.azure.nxd_dns_client.fragment_option.dont_fragment" value="NX_DONT_FRAGMENT"/>
            <option display="Fragment okay" id="config.azure.nxd_dns_client.fragment_option.fragment_okay" value="NX_FRAGMENT_OKAY"/>
        </property>
        <property default="128" display="DNS|Client|Time to live" id="config.azure.nxd_dns_client.time_to_live">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dns_client.time_to_live}")  &amp;&amp; ("${config.azure.nxd_dns_client.time_to_live}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_dns_client.dns_server_ip_version.ipv4" display="DNS|Client|Client DNS IP version" id="config.azure.nxd_dns_client.dns_server_ip_version">
            <option display="IPv4" id="config.azure.nxd_dns_client.dns_server_ip_version.ipv4" value="NX_IPV4_HEADER"/>
            <option display="IPv6" id="config.azure.nxd_dns_client.dns_server_ip_version.ipv6" value="NX_IPV6_HEADER"/>
        </property>
        <property default="5" display="DNS|Client|Maximum number of DNS Servers in the Client server list" id="config.azure.nxd_dns_client.max_servers">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dns_client.max_servers}")  &amp;&amp; ("${config.azure.nxd_dns_client.max_servers}" &gt;= 0)
            </constraint>
        </property>
        <property default="512" display="DNS|Client|Maximum DNS queries size (bytes)" id="config.azure.nxd_dns_client.message_max">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dns_client.message_max}")  &amp;&amp; ("${config.azure.nxd_dns_client.message_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="3" display="DNS|Client|Maximum retries for a server" id="config.azure.nxd_dns_client.max_retries">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dns_client.max_retries}")  &amp;&amp; ("${config.azure.nxd_dns_client.max_retries}" &gt;= 0)
            </constraint>
        </property>
        <property default="64" display="DNS|Client|Maximum duration to retransmit a DNS query (seconds)" id="config.azure.nxd_dns_client.max_retrans_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dns_client.max_retrans_timeout}")  &amp;&amp; ("${config.azure.nxd_dns_client.max_retrans_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="DNS|Client|Packet allocate timeout (seconds)" id="config.azure.nxd_dns_client.packet_allocate_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dns_client.packet_allocate_timeout}")  &amp;&amp; ("${config.azure.nxd_dns_client.packet_allocate_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_dns_client.ip_gateway_and_dns_server.disable" display="DNS|Client|Client has DNS and Gateway server" id="config.azure.nxd_dns_client.ip_gateway_and_dns_server">
            <option display="Disable" id="config.azure.nxd_dns_client.ip_gateway_and_dns_server.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_dns_client.ip_gateway_and_dns_server.enable" value="#define NX_DNS_IP_GATEWAY_AND_DNS_SERVER"/>
        </property>
        <property default="config.azure.nxd_dns_client.client_clear_queue.disable" display="DNS|Client|Clear previous DNS queries from queue" id="config.azure.nxd_dns_client.client_clear_queue">
            <option display="Disable" id="config.azure.nxd_dns_client.client_clear_queue.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_dns_client.client_clear_queue.enable" value="#define NX_DNS_CLIENT_CLEAR_QUEUE"/>
        </property>
        <property default="config.azure.nxd_dns_client.enable_extended_rr_types.disable" display="DNS|Client|Extended RR types support" id="config.azure.nxd_dns_client.enable_extended_rr_types">
            <option display="Disable" id="config.azure.nxd_dns_client.enable_extended_rr_types.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_dns_client.enable_extended_rr_types.enable" value="#define NX_DNS_ENABLE_EXTENDED_RR_TYPES"/>
        </property>
        <property default="config.azure.nxd_dns_client.cache_enable.disable" display="DNS|Client|Cache support" id="config.azure.nxd_dns_client.cache_enable">
            <option display="Disable" id="config.azure.nxd_dns_client.cache_enable.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_dns_client.cache_enable.enable" value="#define NX_DNS_CACHE_ENABLE"/>
        </property>
        <property default="config.azure.nxd_telnet_common.control_tos.normal" display="Telnet|Common|Type of service for TCP requests" id="config.azure.nxd_telnet_common.control_tos">
            <option display="Normal" id="config.azure.nxd_telnet_common.control_tos.normal" value="NX_IP_NORMAL"/>
            <option display="Minimum delay" id="config.azure.nxd_telnet_common.control_tos.min_delay" value="NX_IP_MIN_DELAY"/>
            <option display="Maximum data" id="config.azure.nxd_telnet_common.control_tos.max_data" value="NX_IP_MAX_DATA"/>
            <option display="Maximum reliability" id="config.azure.nxd_telnet_common.control_tos.max_reliable" value="NX_IP_MAX_RELIABLE"/>
            <option display="Minimum cost" id="config.azure.nxd_telnet_common.control_tos.min_cost" value="NX_IP_MIN_COST"/>
        </property>
        <property default="config.azure.nxd_telnet_common.fragment_option.dont_fragment" display="Telnet|Common|Fragmentation option" id="config.azure.nxd_telnet_common.fragment_option">
            <option display="Don't fragment" id="config.azure.nxd_telnet_common.fragment_option.dont_fragment" value="NX_DONT_FRAGMENT"/>
            <option display="Fragment okay" id="config.azure.nxd_telnet_common.fragment_option.fragment_okay" value="NX_FRAGMENT_OKAY"/>
        </property>
        <property default="23" display="Telnet|Common|Server TCP port number" id="config.azure.nxd_telnet_common.telnet_server_port">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_telnet_common.telnet_server_port}")  &amp;&amp; ("${config.azure.nxd_telnet_common.telnet_server_port}" &gt;= 0)
            </constraint>
        </property>
        <property default="128" display="Telnet|Common|Time to live" id="config.azure.nxd_telnet_common.time_to_live">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_telnet_common.time_to_live}")  &amp;&amp; ("${config.azure.nxd_telnet_common.time_to_live}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="AutoIP|Wait before sending first probe (seconds)" id="config.azure.nxd_auto_ip.probe_wait">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_auto_ip.probe_wait}")  &amp;&amp; ("${config.azure.nxd_auto_ip.probe_wait}" &gt;= 0)
            </constraint>
        </property>
        <property default="3" display="AutoIP|ARP probes to send" id="config.azure.nxd_auto_ip.probe_num">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_auto_ip.probe_num}")  &amp;&amp; ("${config.azure.nxd_auto_ip.probe_num}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="AutoIP|Minimum wait between probes (seconds)" id="config.azure.nxd_auto_ip.probe_min">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_auto_ip.probe_min}")  &amp;&amp; ("${config.azure.nxd_auto_ip.probe_min}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="AutoIP|Maximum wait between probes (seconds)" id="config.azure.nxd_auto_ip.probe_max">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_auto_ip.probe_max}")  &amp;&amp; ("${config.azure.nxd_auto_ip.probe_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="AutoIP|Maximum conflicts before increasing processing delay" id="config.azure.nxd_auto_ip.max_conflicts">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_auto_ip.max_conflicts}")  &amp;&amp; ("${config.azure.nxd_auto_ip.max_conflicts}" &gt;= 0)
            </constraint>
        </property>
        <property default="60" display="AutoIP|Wait extend after maximum conflicts (seconds)" id="config.azure.nxd_auto_ip.rate_limit_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_auto_ip.rate_limit_interval}")  &amp;&amp; ("${config.azure.nxd_auto_ip.rate_limit_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="AutoIP|Wait before announcement (seconds)" id="config.azure.nxd_auto_ip.announce_wait">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_auto_ip.announce_wait}")  &amp;&amp; ("${config.azure.nxd_auto_ip.announce_wait}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="AutoIP|Number of ARP announces" id="config.azure.nxd_auto_ip.announce_num">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_auto_ip.announce_num}")  &amp;&amp; ("${config.azure.nxd_auto_ip.announce_num}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="AutoIP|Wait between announces (seconds)" id="config.azure.nxd_auto_ip.announce_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_auto_ip.announce_interval}")  &amp;&amp; ("${config.azure.nxd_auto_ip.announce_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="AutoIP|Wait between defense announces (seconds)" id="config.azure.nxd_auto_ip.defend_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_auto_ip.defend_interval}")  &amp;&amp; ("${config.azure.nxd_auto_ip.defend_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_web_http_common.tos.normal" display="Web HTTP|Common|Type of Service" id="config.azure.nxd_web_http_common.tos">
            <option display="Normal" id="config.azure.nxd_web_http_common.tos.normal" value="NX_IP_NORMAL"/>
            <option display="Minimum delay" id="config.azure.nxd_web_http_common.tos.min_delay" value="NX_IP_MIN_DELAY"/>
            <option display="Maximum data" id="config.azure.nxd_web_http_common.tos.max_data" value="NX_IP_MAX_DATA"/>
            <option display="Maximum reliability" id="config.azure.nxd_web_http_common.tos.max_reliable" value="NX_IP_MAX_RELIABLE"/>
            <option display="Minimum cost" id="config.azure.nxd_web_http_common.tos.min_cost" value="NX_IP_MIN_COST"/>
        </property>
        <property default="config.azure.nxd_web_http_common.fragment_option.dont_fragment" display="Web HTTP|Common|Fragmentation option" id="config.azure.nxd_web_http_common.fragment_option">
            <option display="Don't fragment" id="config.azure.nxd_web_http_common.fragment_option.dont_fragment" value="NX_DONT_FRAGMENT"/>
            <option display="Fragment okay" id="config.azure.nxd_web_http_common.fragment_option.fragment_okay" value="NX_FRAGMENT_OKAY"/>
        </property>
        <property default="config.azure.nxd_web_http_common.digest.disable" display="Web HTTP|Common|MD5 Support" id="config.azure.nxd_web_http_common.digest">
            <option display="Disable" id="config.azure.nxd_web_http_common.digest.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_web_http_common.digest.enable" value="#define NX_WEB_HTTP_DIGEST_ENABLE"/>
        </property>
        <property default="128" display="Web HTTP|Common|Time to live" id="config.azure.nxd_web_http_common.time_to_live">
            <constraint display="Value must be a non-negative integer from 0 to 255">
                testInteger("${config.azure.nxd_web_http_common.time_to_live}")  &amp;&amp; ("${config.azure.nxd_web_http_common.time_to_live}" &gt;= 0)  &amp;&amp; ("${config.azure.nxd_web_http_common.time_to_live}" &lt;= 255)
            </constraint>
        </property>
        <property default="20" display="Web HTTP|Common|Maximum password length (bytes)" id="config.azure.nxd_web_http_common.max_password">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_common.max_password}")  &amp;&amp; ("${config.azure.nxd_web_http_common.max_password}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="Web HTTP|Common|Maximum username length (bytes)" id="config.azure.nxd_web_http_common.max_name">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_common.max_name}")  &amp;&amp; ("${config.azure.nxd_web_http_common.max_name}" &gt;= 0)
            </constraint>
        </property>
        <property default="300" display="Web HTTP|Client|Minimum packet size (bytes)" id="config.azure.nxd_web_http_client.min_packet_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_client.min_packet_size}")  &amp;&amp; ("${config.azure.nxd_web_http_client.min_packet_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_web_http_client.secure.disable" display="Web HTTP|Client|HTTPS Support" id="config.azure.nxd_web_http_client.secure">
            <option display="Enable" id="config.azure.nxd_web_http_client.secure.enable" value="1"/>
            <option display="Disable" id="config.azure.nxd_web_http_client.secure.disable" value="0"/>
        </property>
        <property default="1460" display="SMTP|Client|TCP window size (bytes)" id="config.azure.nxd_smtp_client.client_tcp_window_size" description="This should be set to below the MTU size of the underlying Ethernet hardware and allow room for IP and TCP headers">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.client_tcp_window_size}")  &amp;&amp; ("${config.azure.nxd_smtp_client.client_tcp_window_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="SMTP|Client|Packet allocation timeout (seconds)" id="config.azure.nxd_smtp_client.client_packet_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.client_packet_timeout}")  &amp;&amp; ("${config.azure.nxd_smtp_client.client_packet_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="SMTP|Client|TCP socket connect timeout (seconds)" id="config.azure.nxd_smtp_client.client_connection_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.client_connection_timeout}")  &amp;&amp; ("${config.azure.nxd_smtp_client.client_connection_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="5" display="SMTP|Client|TCP socket disconnect timeout (seconds)" id="config.azure.nxd_smtp_client.client_disconnect_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.client_disconnect_timeout}")  &amp;&amp; ("${config.azure.nxd_smtp_client.client_disconnect_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="SMTP|Client|Server greeting reply timeout (seconds)" id="config.azure.nxd_smtp_client.greeting_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.greeting_timeout}")  &amp;&amp; ("${config.azure.nxd_smtp_client.greeting_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="SMTP|Client|Command timeout (seconds)" id="config.azure.nxd_smtp_client.envelope_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.envelope_timeout}")  &amp;&amp; ("${config.azure.nxd_smtp_client.envelope_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="30" display="SMTP|Client|Mail data request timeout (seconds)" id="config.azure.nxd_smtp_client.message_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.message_timeout}")  &amp;&amp; ("${config.azure.nxd_smtp_client.message_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="5" display="SMTP|Client|TCP socket send completion timeout (seconds)" id="config.azure.nxd_smtp_client.client_send_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.client_send_timeout}")  &amp;&amp; ("${config.azure.nxd_smtp_client.client_send_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="200" display="SMTP|Client|Server challenge maximum string length (bytes)" id="config.azure.nxd_smtp_client.server_challenge_max_string">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.server_challenge_max_string}")  &amp;&amp; ("${config.azure.nxd_smtp_client.server_challenge_max_string}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="SMTP|Client|Maximum password length (bytes)" id="config.azure.nxd_smtp_client.max_password">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.max_password}")  &amp;&amp; ("${config.azure.nxd_smtp_client.max_password}" &gt;= 0)
            </constraint>
        </property>
        <property default="40" display="SMTP|Client|Maximum username length (bytes)" id="config.azure.nxd_smtp_client.client_max_username">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_smtp_client.client_max_username}")  &amp;&amp; ("${config.azure.nxd_smtp_client.client_max_username}" &gt;= 0)
            </constraint>
        </property>
        <property default="3" display="DHCP|Client|IPv6|Internal thread priority" id="config.azure.nxd_dhcpv6_client.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_client.priority}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_client.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="TX_WAIT_FOREVER" display="DHCP|Client|IPv6|Time out for obtaining DHCPv6 client mutex (ticks)" id="config.azure.nxd_dhcpv6_client.mutex_wait">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_client.mutex_wait}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_client.mutex_wait}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="DHCP|Client|IPv6|Time interval between current IP address lease time update (seconds)" id="config.azure.nxd_dhcpv6_client.ip_lifetime_timer_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_client.ip_lifetime_timer_interval}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_client.ip_lifetime_timer_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="DHCP|Client|IPv6|Maximum IA addresses allowed in client record" id="config.azure.nxd_dhcpv6_client.max_ia_address">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_client.max_ia_address}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_client.max_ia_address}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="DHCP|Client|IPv6|Number of DNS servers the client will store" id="config.azure.nxd_dhcpv6_client.num_dns_servers">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_client.num_dns_servers}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_client.num_dns_servers}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="DHCP|Client|IPv6|Number of time servers the client will store" id="config.azure.nxd_dhcpv6_client.num_time_servers">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_client.num_time_servers}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_client.num_time_servers}" &gt;= 0)
            </constraint>
        </property>
        <property default="32" display="DHCP|Client|IPv6|Domain name buffer size (bytes)" id="config.azure.nxd_dhcpv6_client.domain_name_buffer_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_client.domain_name_buffer_size}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_client.domain_name_buffer_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="16" display="DHCP|Client|IPv6|Current time zone information buffer size (bytes)" id="config.azure.nxd_dhcpv6_client.time_zone_buffer_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_client.time_zone_buffer_size}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_client.time_zone_buffer_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="100" display="DHCP|Client|IPv6|Maximum DHCPv6 server messages buffer size (bytes)" id="config.azure.nxd_dhcpv6_client.max_message_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_client.max_message_size}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_client.max_message_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_dhcpv6_common.tos.normal" display="DHCP|Common|IPv6|Type of Service for UDP requests" id="config.azure.nxd_dhcpv6_common.tos">
            <option display="Normal" id="config.azure.nxd_dhcpv6_common.tos.normal" value="NX_IP_NORMAL"/>
            <option display="Minimum delay" id="config.azure.nxd_dhcpv6_common.tos.min_delay" value="NX_IP_MIN_DELAY"/>
            <option display="Maximum data" id="config.azure.nxd_dhcpv6_common.tos.max_data" value="NX_IP_MAX_DATA"/>
            <option display="Maximum reliability" id="config.azure.nxd_dhcpv6_common.tos.max_reliable" value="NX_IP_MAX_RELIABLE"/>
            <option display="Minimum cost" id="config.azure.nxd_dhcpv6_common.tos.min_cost" value="NX_IP_MIN_COST"/>
        </property>
        <property default="128" display="DHCP|Common|IPv6|Time to live" id="config.azure.nxd_dhcpv6_common.time_to_live">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_common.time_to_live}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_common.time_to_live}" &gt;= 0)
            </constraint>
        </property>
        <property default="5" display="DHCP|Common|IPv6|Packet Queue depth" id="config.azure.nxd_dhcpv6_common.queue_depth">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_common.queue_depth}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_common.queue_depth}" &gt;= 0)
            </constraint>
        </property>
        <property default="3" display="DHCP|Common|IPv6|Packet allocation timeout (seconds)" id="config.azure.nxd_dhcpv6_common.packet_time_out">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_common.packet_time_out}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_common.packet_time_out}" &gt;= 0)
            </constraint>
        </property>
        <property default="3" display="DHCP|Common|IPv6|Interval for active session time update (seconds)" id="config.azure.nxd_dhcpv6_common.session_timer_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_common.session_timer_interval}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_common.session_timer_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="DHCP|Server|IPv4|Internal thread priority" id="config.azure.nxd_dhcp_server.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.priority}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="DHCP|Server|IPv4|Packet allocate timeout (seconds)" id="config.azure.nxd_dhcp_server.packet_alloc_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.packet_alloc_timeout}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.packet_alloc_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="DHCP|Server|IPv4|Fast periodic timer interval to check session inactivity timeout (seconds)" id="config.azure.nxd_dhcp_server.fast_periodic_time_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.fast_periodic_time_interval}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.fast_periodic_time_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="DHCP|Server|IPv4|DHCP Client Session timeout - multiple of Fast periodic interval (seconds)" id="config.azure.nxd_dhcp_server.client_session_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.client_session_timeout}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.client_session_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="0xFFFFFFFF" display="DHCP|Server|IPv4|Client IP address default lease time (seconds)" id="config.azure.nxd_dhcp_server.default_lease_time">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.default_lease_time}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.default_lease_time}" &gt;= 0)
            </constraint>
        </property>
        <property default="1000" display="DHCP|Server|IPv4|Slow periodic timer interval to check IP lease expiration (seconds)" id="config.azure.nxd_dhcp_server.slow_periodic_time_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.slow_periodic_time_interval}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.slow_periodic_time_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="12" display="DHCP|Server|IPv4|Size of the array to contain options in client request (units)" id="config.azure.nxd_dhcp_server.client_options_max" description="This is size of the array in the DHCP Client instance for holding the all the requested options in the parameter request list in the current session">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.client_options_max}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.client_options_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="1 3 6" display="DHCP|Server|IPv4|Server option list (optional - use space for separation) " id="config.azure.nxd_dhcp_server.optional_server_option_list">
        </property>
        <property default="3" display="DHCP|Server|IPv4|Server option list size (optional)" id="config.azure.nxd_dhcp_server.optional_server_option_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.optional_server_option_size}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.optional_server_option_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="32" display="DHCP|Server|IPv4|Size of the server host name buffer (bytes)" id="config.azure.nxd_dhcp_server.server_hostname_max">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.server_hostname_max}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.server_hostname_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="32" display="DHCP|Server|IPv4|Size of the current client hostname buffer (bytes)" id="config.azure.nxd_dhcp_server.client_hostname_max">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.client_hostname_max}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.client_hostname_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="DHCP|Server|IPv4|Maximum size of an IP addresses list (units)" id="config.azure.nxd_dhcp_server.ip_address_max_list_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.ip_address_max_list_size}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.ip_address_max_list_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="50" display="DHCP|Server|IPv4|Size of client record table (units)" id="config.azure.nxd_dhcp_server.client_record_table_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.client_record_table_size}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.client_record_table_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="548" display="DHCP|Server|IPv4|Size of the BOOT buffer (bytes)" id="config.azure.nxd_dhcp_server.boot_buffer_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcp_server.boot_buffer_size}")  &amp;&amp; ("${config.azure.nxd_dhcp_server.boot_buffer_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="DHCP|Server|IPv6|Internal thread priority" id="config.azure.nxd_dhcpv6_server.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.priority}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="60" display="DHCP|Server|IPv6|Client lease time expiration check interval (seconds)" id="config.azure.nxd_dhcpv6_server.ip_lease_timer_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.ip_lease_timer_interval}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.ip_lease_timer_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="DHCP|Server|IPv6|DHCPv6 packet receive timeout (seconds)" id="config.azure.nxd_dhcpv6_server.packet_wait_option">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.packet_wait_option}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.packet_wait_option}" &gt;= 0)
            </constraint>
        </property>
        <property default="0" display="DHCP|Server|IPv6|Server preference ranking for clients" id="config.azure.nxd_dhcpv6_server.preference_value" description="0 - client is free to choose &lt;= preference value &lt;= 255 - use this server)">
            <constraint display="Value must be in range 0 - 255">
                testInteger("${config.azure.nxd_dhcpv6_server.preference_value}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.preference_value}" &gt;= 0) &amp;&amp; ("${config.azure.nxd_dhcpv6_server.preference_value}" &lt;= 255)
            </constraint>
        </property>
        <property default="6" display="DHCP|Server|IPv6|Maximum options to extract from a client message" id="config.azure.nxd_dhcpv6_server.max_option_request_options">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.max_option_request_options}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.max_option_request_options}" &gt;= 0)
            </constraint>
        </property>
        <property default="2000" display="DHCP|Server|IPv6|Server interval for first client IP address renewal attempt (seconds)" id="config.azure.nxd_dhcpv6_server.t1_time">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.t1_time}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.t1_time}" &gt;= 0)
            </constraint>
        </property>
        <property default="3000" display="DHCP|Server|IPv6|Server interval for second client IP address renewal attempt (seconds)" id="config.azure.nxd_dhcpv6_server.t2_time">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.t2_time}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.t2_time}" &gt;= 0)
            </constraint>
        </property>
        <property default="2 * NX_DHCPV6_DEFAULT_T1_TIME" display="DHCP|Server|IPv6|Time interval after which client IP is deprecated (seconds)" id="config.azure.nxd_dhcpv6_server.default_preferred_time">
        </property>
        <property default="2 * NX_DHCPV6_DEFAULT_PREFERRED_TIME" display="DHCP|Server|IPv6|Time interval after which leased IP is invalid (seconds)" id="config.azure.nxd_dhcpv6_server.default_valid_time">
        </property>
        <property default="100" display="DHCP|Server|IPv6|Maximum server status option message size (bytes)" id="config.azure.nxd_dhcpv6_server.status_message_max">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.status_message_max}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.status_message_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="100" display="DHCP|Server|IPv6|Maximum Size of the Server’s IP lease table (count)" id="config.azure.nxd_dhcpv6_server.max_leases">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.max_leases}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.max_leases}" &gt;= 0)
            </constraint>
        </property>
        <property default="120" display="DHCP|Server|IPv6|Size of the Server’s Client record table (count)" id="config.azure.nxd_dhcpv6_server.max_clients" description="This value should be less than or equal to the value - Maximum Size of the Server’s IP lease table">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.max_clients}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.max_clients}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_dhcpv6_server.fragment_option.dont_fragment" display="DHCP|Server|IPv6|Server socket fragmentation option" id="config.azure.nxd_dhcpv6_server.fragment_option">
            <option display="Dont fragment" id="config.azure.nxd_dhcpv6_server.fragment_option.dont_fragment" value="NX_DONT_FRAGMENT"/>
            <option display="Fragment okay" id="config.azure.nxd_dhcpv6_server.fragment_option.fragment_okay" value="NX_FRAGMENT_OKAY"/>
        </property>
        <property default="abcdeffghijklmnopqrstuvwxyz" display="DHCP|Server|IPv6|Vendor assigned unique ID" id="config.azure.nxd_dhcpv6_server.duid_vendor_assigned_id">
        </property>
        <property default="0x12345678" display="DHCP|Server|IPv6|Private vendor ID" id="config.azure.nxd_dhcpv6_server.duid_vendor_private_id">
        </property>
        <property default="48" display="DHCP|Server|IPv6|Size of Vendor ID buffer (bytes)" id="config.azure.nxd_dhcpv6_server.duid_vendor_assigned_length">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.duid_vendor_assigned_length}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.duid_vendor_assigned_length}" &gt;= 0)
            </constraint>
        </property>
        <property default="IA OPTION GRANTED" display="DHCP|Server|IPv6|Client request success message : granted" id="config.azure.nxd_dhcpv6_server.success_granted">
        </property>
        <property default="IA OPTION NOT GRANTED-FAILURE UNSPECIFIED" display="DHCP|Server|IPv6|Client request failure message : Failure unspecified" id="config.azure.nxd_dhcpv6_server.failure_unspecified">
        </property>
        <property default="IA OPTION NOT GRANTED-NO ADDRESSES AVAILABLE" display="DHCP|Server|IPv6|Client request failure message : No addresses available" id="config.azure.nxd_dhcpv6_server.failure_no_addresses">
        </property>
        <property default="IA OPTION NOT GRANTED-INVALID CLIENT REQUEST" display="DHCP|Server|IPv6|Client request failure message : Invalid client request" id="config.azure.nxd_dhcpv6_server.failure_invalid_request">
        </property>
        <property default="IA OPTION NOT GRANTED-CLIENT NOT ON LINK" display="DHCP|Server|IPv6|Client request failure message : Client not on link" id="config.azure.nxd_dhcpv6_server.failure_not_on_link">
        </property>
        <property default="IA OPTION NOT GRANTED-CLIENT MUST USE MULTICAST" display="DHCP|Server|IPv6|Client request failure message : Client must use multicast" id="config.azure.nxd_dhcpv6_server.failure_use_multicast">
        </property>
        <property default="20" display="DHCP|Server|IPv6|Session inactivity timeout(seconds)" id="config.azure.nxd_dhcpv6_server.session_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_dhcpv6_server.session_timeout}")  &amp;&amp; ("${config.azure.nxd_dhcpv6_server.session_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="16" display="Telnet|Server|Internal thread priority" id="config.azure.nxd_telnet_server_v2.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_telnet_server_v2.priority}")  &amp;&amp; ("${config.azure.nxd_telnet_server_v2.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="4" display="Telnet|Server|Maximum clients to serve simultaneously" id="config.azure.nxd_telnet_server_v2.max_client">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_telnet_server_v2.max_client}")  &amp;&amp; ("${config.azure.nxd_telnet_server_v2.max_client}" &gt;= 0)
            </constraint>
        </property>
        <property default="2048" display="Telnet|Server|Socket window size (bytes)" id="config.azure.nxd_telnet_server_v2.control_window_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_telnet_server_v2.control_window_size}")  &amp;&amp; ("${config.azure.nxd_telnet_server_v2.control_window_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="Telnet|Server|Server time out (seconds)" id="config.azure.nxd_telnet_server_v2.server_timeout" description="Duration internal services will suspend for">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_telnet_server_v2.server_timeout}")  &amp;&amp; ("${config.azure.nxd_telnet_server_v2.server_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="600" display="Telnet|Server|Client inactivity timeout (seconds)" id="config.azure.nxd_telnet_server_v2.server_activity_timeout" description="Client inactivity duration for disconnection">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_telnet_server_v2.server_activity_timeout}")  &amp;&amp; ("${config.azure.nxd_telnet_server_v2.server_activity_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="60" display="Telnet|Server|Timeout check period (seconds)" id="config.azure.nxd_telnet_server_v2.server_timeout_period" description="Client activity timeout check interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_telnet_server_v2.server_timeout_period}")  &amp;&amp; ("${config.azure.nxd_telnet_server_v2.server_timeout_period}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_telnet_server_v2.telnet_server_option.enable" display="Telnet|Server|Option negotiation" id="config.azure.nxd_telnet_server_v2.telnet_server_option">
            <option display="Disable" id="config.azure.nxd_telnet_server_v2.telnet_server_option.disable" value="#define NX_TELNET_SERVER_OPTION_DISABLE"/>
            <option display="Enable" id="config.azure.nxd_telnet_server_v2.telnet_server_option.enable" value=""/>
        </property>
        <property default="config.azure.nxd_telnet_server_v2.user_create_packet_pool.disable" display="Telnet|Server|Use application packet pool" id="config.azure.nxd_telnet_server_v2.user_create_packet_pool">
            <option display="Disable" id="config.azure.nxd_telnet_server_v2.user_create_packet_pool.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_telnet_server_v2.user_create_packet_pool.enable" value="#define NX_TELNET_SERVER_USER_CREATE_PACKET_POOL"/>
        </property>
        <property default="300" display="Telnet|Server|Packet size in the pool (bytes)" id="config.azure.nxd_telnet_server_v2.packet_payload" description="Telnet Server only creates this packet pool if 'Option negotiation' is enabled">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_telnet_server_v2.packet_payload}")  &amp;&amp; ("${config.azure.nxd_telnet_server_v2.packet_payload}" &gt;= 0)
            </constraint>
        </property>
        <property default="2048" display="Telnet|Server|Total packet pool size (bytes)" id="config.azure.nxd_telnet_server_v2.packet_pool_size" description="Telnet Server only creates this packet pool if NX_TELNET_SERVER_OPTION_DISABLE">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_telnet_server_v2.packet_pool_size}")  &amp;&amp; ("${config.azure.nxd_telnet_server_v2.packet_pool_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="2048" display="SNTP|Client|Internal thread stack size (bytes)" id="config.azure.nxd_sntp_client.stack_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.stack_size}")  &amp;&amp; (("${config.azure.nxd_sntp_client.stack_size}" % 8) == 0)
            </constraint>
        </property>
        <property default="TX_NO_TIME_SLICE" id="config.azure.nxd_sntp_client.time_slice" display="SNTP|Client|SNTP client thread time slicing interval (ticks)" description="Number of timer-ticks this thread is allowed to run before other ready threads of the same priority are given a chance to run. Legal time-slice values range from 1 to 0xFFFFFFFF (inclusive). A value of TX_NO_TIME_SLICE (a value of 0) disables time-slicing of this thread.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.time_slice}")  &amp;&amp; ("${config.azure.nxd_sntp_client.time_slice}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="SNTP|Client|Internal thread priority" id="config.azure.nxd_sntp_client.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.priority}")  &amp;&amp; ("${config.azure.nxd_sntp_client.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="SNTP Client socket" display="SNTP|Client|UDP socket name" id="config.azure.nxd_sntp_client.udp_socket_name">
        </property>
        <property default="123" display="SNTP|Client|UDP port number" id="config.azure.nxd_sntp_client.client_udp_port">
            <constraint display="Value must be between 1 to 65535">
                testInteger("${config.azure.nxd_sntp_client.client_udp_port}")  &amp;&amp; ("${config.azure.nxd_sntp_client.client_udp_port}" &gt;= 1)&amp;&amp; ("${config.azure.nxd_sntp_client.client_udp_port}" &lt;= 65535)
            </constraint>
        </property>
        <property default="123" display="SNTP|Client|Server UDP port" id="config.azure.nxd_sntp_client.server_udp_port">
            <constraint display="Value must be between 1 to 65535">
                testInteger("${config.azure.nxd_sntp_client.server_udp_port}")  &amp;&amp; ("${config.azure.nxd_sntp_client.server_udp_port}" &gt;= 1)&amp;&amp; ("${config.azure.nxd_sntp_client.server_udp_port}" &lt;= 65535)
            </constraint>
        </property>
        <property default="128" display="SNTP|Client|Time to live" id="config.azure.nxd_sntp_client.time_to_live">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.time_to_live}")  &amp;&amp; ("${config.azure.nxd_sntp_client.time_to_live}" &gt;= 0)
            </constraint>
        </property>
        <property default="5" display="SNTP|Client|Maximum UDP packets queue depth (units)" id="config.azure.nxd_sntp_client.queue_depth">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.queue_depth}")  &amp;&amp; ("${config.azure.nxd_sntp_client.queue_depth}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="SNTP|Client|Packet allocation timeout (seconds)" id="config.azure.nxd_sntp_client.packet_time_out">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.packet_time_out}")  &amp;&amp; ("${config.azure.nxd_sntp_client.packet_time_out}" &gt;= 0)
            </constraint>
        </property>
        <property default="3" display="SNTP|Client|SNTP version to use" id="config.azure.nxd_sntp_client.ntp_version">
            <constraint display="Value must be 3 or 4">
                testInteger("${config.azure.nxd_sntp_client.ntp_version}")  &amp;&amp; ("${config.azure.nxd_sntp_client.ntp_version}" &gt;= 3)  &amp;&amp; ("${config.azure.nxd_sntp_client.ntp_version}" &lt;= 4)
            </constraint>
        </property>
        <property default="3" display="SNTP|Client|NTP minimum version" id="config.azure.nxd_sntp_client.ntp_min_version">
            <constraint display="Value must be 3 or 4">
                testInteger("${config.azure.nxd_sntp_client.ntp_min_version}")  &amp;&amp; ("${config.azure.nxd_sntp_client.ntp_min_version}" &gt;= 3)  &amp;&amp; ("${config.azure.nxd_sntp_client.ntp_min_version}" &lt;= 4)
            </constraint>
        </property>
        <property default="2" display="SNTP|Client|Lowest level server stratum client accepts" id="config.azure.nxd_sntp_client.min_server_stratum">
            <constraint display="Value must be a valid non-negative integer with configurable value 1 to 15.">
                testInteger("${config.azure.nxd_sntp_client.min_server_stratum}")  &amp;&amp; ("${config.azure.nxd_sntp_client.min_server_stratum}" &gt;= 1) &amp;&amp; ("${config.azure.nxd_sntp_client.min_server_stratum}" &lt;= 15)
            </constraint>
        </property>
        <property default="10" display="SNTP|Client|Minimum time difference that triggers adjustment (milliseconds)" id="config.azure.nxd_sntp_client.min_time_adjustment">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.min_time_adjustment}")  &amp;&amp; ("${config.azure.nxd_sntp_client.min_time_adjustment}" &gt;= 0)
            </constraint>
        </property>
        <property default="180000" display="SNTP|Client|Maximum time adjustment allowed to local clock time (milliseconds)" id="config.azure.nxd_sntp_client.max_time_adjustment">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.max_time_adjustment}")  &amp;&amp; ("${config.azure.nxd_sntp_client.max_time_adjustment}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_sntp_client.ignore_max_adjust_startup.enable" display="SNTP|Client|Ignore maximum time adjust limit at startup" id="config.azure.nxd_sntp_client.ignore_max_adjust_startup">
            <option display="True" id="config.azure.nxd_sntp_client.ignore_max_adjust_startup.enable" value="NX_TRUE"/>
            <option display="False" id="config.azure.nxd_sntp_client.ignore_max_adjust_startup.disable" value="NX_FALSE"/>
        </property>
        <property default="7200" display="SNTP|Client|Maximum time lapse without valid update (seconds)" id="config.azure.nxd_sntp_client.max_time_lapse">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.max_time_lapse}")  &amp;&amp; ("${config.azure.nxd_sntp_client.max_time_lapse}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="SNTP|Client|'Update time remaining' timer update interval (seconds)" id="config.azure.nxd_sntp_client.update_timeout_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.update_timeout_interval}")  &amp;&amp; ("${config.azure.nxd_sntp_client.update_timeout_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="3600" display="SNTP|Client|Starting poll interval for unicast update request (seconds)" id="config.azure.nxd_sntp_client.unicast_poll_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.unicast_poll_interval}")  &amp;&amp; ("${config.azure.nxd_sntp_client.unicast_poll_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="SNTP|Client|Poll interval increment after failed time update" id="config.azure.nxd_sntp_client.exp_backoff_rate">
            <constraint display="Value must be less than or equal to time lapse">
                testInteger("${config.azure.nxd_sntp_client.exp_backoff_rate}")  &amp;&amp; ("${config.azure.nxd_sntp_client.exp_backoff_rate}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_sntp_client.rtt_required.disable" display="SNTP|Client|Calculate round trip time of messages" id="config.azure.nxd_sntp_client.rtt_required">
            <option display="True" id="config.azure.nxd_sntp_client.rtt_required.enable" value="NX_TRUE"/>
            <option display="False" id="config.azure.nxd_sntp_client.rtt_required.disable" value="NX_FALSE"/>
        </property>
        <property default="50000" display="SNTP|Client|Maximum server clock inaccuracy to accept (to disable set 0)" id="config.azure.nxd_sntp_client.maximum_root_dispersion">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.maximum_root_dispersion}")  &amp;&amp; ("${config.azure.nxd_sntp_client.maximum_root_dispersion}" &gt;= 0)
            </constraint>
        </property>
        <property default="3" display="SNTP|Client|Invalid message limit to mark server invalid" id="config.azure.nxd_sntp_client.invalid_update_limit">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.invalid_update_limit}")  &amp;&amp; ("${config.azure.nxd_sntp_client.invalid_update_limit}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_sntp_client.randomize_on_startup.disable" display="SNTP|Client|Randomize update request interval on startup" id="config.azure.nxd_sntp_client.randomize_on_startup">
            <option display="True" id="config.azure.nxd_sntp_client.randomize_on_startup.enable" value="NX_TRUE"/>
            <option display="False" id="config.azure.nxd_sntp_client.randomize_on_startup.disable" value="NX_FALSE"/>
        </property>
        <property default="1" display="SNTP|Client|Internal Task sleep interval (ticks)" id="config.azure.nxd_sntp_client.client_sleep_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.client_sleep_interval}")  &amp;&amp; ("${config.azure.nxd_sntp_client.client_sleep_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="2016" display="SNTP|Client|Current calendar year" id="config.azure.nxd_sntp_client.cur_year">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_sntp_client.cur_year}")  &amp;&amp; ("${config.azure.nxd_sntp_client.cur_year}" &gt;= 0)
            </constraint>
        </property>
        <property default="64" display="TFTP|Common|Maximum error string length (bytes)" id="config.azure.nxd_tftp_common.error_string_max">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_tftp_common.error_string_max}")  &amp;&amp; ("${config.azure.nxd_tftp_common.error_string_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="128" display="TFTP|Common|Time to live" id="config.azure.nxd_tftp_common.time_to_live">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_tftp_common.time_to_live}")  &amp;&amp; ("${config.azure.nxd_tftp_common.time_to_live}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_tftp_common.tos.normal" display="TFTP|Common|Type of Service for UDP requests" id="config.azure.nxd_tftp_common.tos">
            <option display="Normal" id="config.azure.nxd_tftp_common.tos.normal" value="NX_IP_NORMAL"/>
            <option display="Minimum delay" id="config.azure.nxd_tftp_common.tos.min_delay" value="NX_IP_MIN_DELAY"/>
            <option display="Maximum data" id="config.azure.nxd_tftp_common.tos.max_data" value="NX_IP_MAX_DATA"/>
            <option display="Maximum reliability" id="config.azure.nxd_tftp_common.tos.max_reliable" value="NX_IP_MAX_RELIABLE"/>
            <option display="Minimum cost" id="config.azure.nxd_tftp_common.tos.min_cost" value="NX_IP_MIN_COST"/>
        </property>
        <property default="config.azure.nxd_tftp_common.fragment_option.dont_fragment" display="TFTP|Common|Fragmentation option" id="config.azure.nxd_tftp_common.fragment_option">
            <option display="Don't fragment" id="config.azure.nxd_tftp_common.fragment_option.dont_fragment" value="NX_DONT_FRAGMENT"/>
            <option display="Fragment okay" id="config.azure.nxd_tftp_common.fragment_option.fragment_okay" value="NX_FRAGMENT_OKAY"/>
        </property>
        <property default="NX_ANY_PORT" display="TFTP|Client|Source port to use" id="config.azure.nxd_tftp_client.source_port">
            <constraint display="Value must be a non-negative integer">
                (testInteger("${config.azure.nxd_tftp_client.source_port}")  &amp;&amp; ("${config.azure.nxd_tftp_client.source_port}" &gt;= 0)) || "NX_ANY_PORT" == "${config.azure.nxd_tftp_client.source_port}"
            </constraint>
        </property>
        <property default="config.azure.nxd_mqtt_client.secure.disable" display="MQTT|Client|NX Secure" id="config.azure.nxd_mqtt_client.secure">
            <option display="Enable" id="config.azure.nxd_mqtt_client.secure.enable" value="1"/>
            <option display="Disable" id="config.azure.nxd_mqtt_client.secure.disable" value="0"/>
        </property>
        <property default="config.azure.nxd_mqtt_client.cloud.disable" display="MQTT|Client|Cloud Enable" id="config.azure.nxd_mqtt_client.cloud">
            <option display="Enable" id="config.azure.nxd_mqtt_client.cloud.enable" value="#define NXD_MQTT_CLOUD_ENABLE" />
            <option display="Disable" id="config.azure.nxd_mqtt_client.cloud.disable" value=""/>
        </property>
        <property default="1" display="MQTT|Client|Keepalive Timer Rate (s)" id="module.azure.nxd_mqtt_client.mqtt_keepalive_timer_rate">
        </property>
        <property default="1" display="MQTT|Client|Ping Timeout Delay (s)" id="module.azure.nxd_mqtt_client.mqtt_ping_timeout_delay">
        </property>
        <property default="0xFFFFFFFF" display="MQTT|Client|Socket Timeout (in timer ticks) " id="config.azure.nxd_mqtt_client.mqtt_socket_timeout">
            <constraint display="Value must be a non-negative integer and greater than zero. The default value (0xFFFFFFFF) is wait forever">
            testInteger("${config.azure.nxd_mqtt_client.mqtt_socket_timeout}") &amp;&amp; ("${config.azure.nxd_mqtt_client.mqtt_socket_timeout}" &gt; 0) &amp;&amp; ("${config.azure.nxd_mqtt_client.mqtt_socket_timeout}" &lt; 4294967296)
            </constraint>
        </property>
        <property default="3" display="NAT|Minimum count for translation entry" id="config.azure.nxd_nat.min_entry_count">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_nat.min_entry_count}")  &amp;&amp; ("${config.azure.nxd_nat.min_entry_count}" &gt;= 0)
            </constraint>
        </property>
        <property default="240" display="NAT|Timeout for translation entry (seconds)" id="config.azure.nxd_nat.entry_response_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_nat.entry_response_timeout}")  &amp;&amp; ("${config.azure.nxd_nat.entry_response_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="20000" display="NAT|Minimum assigned port number for outbound TCP packets" id="config.azure.nxd_nat.start_tcp_port">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_nat.start_tcp_port}")  &amp;&amp; ("${config.azure.nxd_nat.start_tcp_port}" &gt;= 0)
            </constraint>
        </property>
        <property default="30000" display="NAT|Maximum assigned port number for outbound TCP packets" id="config.azure.nxd_nat.end_tcp_port">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_nat.end_tcp_port}")  &amp;&amp; ("${config.azure.nxd_nat.end_tcp_port}" &gt;= 0)
            </constraint>
        </property>
        <property default="20000" display="NAT|Minimum assigned port number for outbound UDP packets" id="config.azure.nxd_nat.start_udp_port">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_nat.start_udp_port}")  &amp;&amp; ("${config.azure.nxd_nat.start_udp_port}" &gt;= 0)
            </constraint>
        </property>
        <property default="30000" display="NAT|Maximum assigned port number for outbound UDP packets" id="config.azure.nxd_nat.end_udp_port">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_nat.end_udp_port}")  &amp;&amp; ("${config.azure.nxd_nat.end_udp_port}" &gt;= 0)
            </constraint>
        </property>
        <property default="20000" display="NAT|Minimum ICMP query identifier" id="config.azure.nxd_nat.start_icmp_query_id" description="Minimum ICMP query identifier for assigning to outbound ICMP packets">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_nat.start_icmp_query_id}")  &amp;&amp; ("${config.azure.nxd_nat.start_icmp_query_id}" &gt;= 0)
            </constraint>
        </property>
        <property default="30000" display="NAT|Maximum ICMP query identifier" id="config.azure.nxd_nat.end_icmp_query_id" description="Maximum ICMP query identifier for assigning to outbound ICMP packets">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_nat.end_icmp_query_id}")  &amp;&amp; ("${config.azure.nxd_nat.end_icmp_query_id}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_ftp_common.control_tos.normal" display="FTP|Common|Control Type of Service" id="config.azure.nxd_ftp_common.control_tos">
            <option display="Normal" id="config.azure.nxd_ftp_common.control_tos.normal" value="NX_IP_NORMAL"/>
            <option display="Minimum delay" id="config.azure.nxd_ftp_common.control_tos.min_delay" value="NX_IP_MIN_DELAY"/>
            <option display="Maximum data" id="config.azure.nxd_ftp_common.control_tos.max_data" value="NX_IP_MAX_DATA"/>
            <option display="Maximum reliability" id="config.azure.nxd_ftp_common.control_tos.max_reliable" value="NX_IP_MAX_RELIABLE"/>
            <option display="Minimum cost" id="config.azure.nxd_ftp_common.control_tos.min_cost" value="NX_IP_MIN_COST"/>
        </property>
        <property default="config.azure.nxd_ftp_common.data_tos.normal" display="FTP|Common|Data Type of Service" id="config.azure.nxd_ftp_common.data_tos">
            <option display="Normal" id="config.azure.nxd_ftp_common.data_tos.normal" value="NX_IP_NORMAL"/>
            <option display="Minimum delay" id="config.azure.nxd_ftp_common.data_tos.min_delay" value="NX_IP_MIN_DELAY"/>
            <option display="Maximum data" id="config.azure.nxd_ftp_common.data_tos.max_data" value="NX_IP_MAX_DATA"/>
            <option display="Maximum reliability" id="config.azure.nxd_ftp_common.data_tos.max_reliable" value="NX_IP_MAX_RELIABLE"/>
            <option display="Minimum cost" id="config.azure.nxd_ftp_common.data_tos.min_cost" value="NX_IP_MIN_COST"/>
        </property>
        <property default="config.azure.nxd_ftp_common.fragment_option.dont_fragment" display="FTP|Common|Fragmentation option" id="config.azure.nxd_ftp_common.fragment_option">
            <option display="Don't fragment" id="config.azure.nxd_ftp_common.fragment_option.dont_fragment" value="NX_DONT_FRAGMENT"/>
            <option display="Fragment okay" id="config.azure.nxd_ftp_common.fragment_option.fragment_okay" value="NX_FRAGMENT_OKAY"/>
        </property>
        <property default="128" display="FTP|Common|Time to live" id="config.azure.nxd_ftp_common.time_to_live">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_common.time_to_live}")  &amp;&amp; ("${config.azure.nxd_ftp_common.time_to_live}" &gt;= 0)
            </constraint>
        </property>
        <property default="60" display="FTP|Common|Duration between client inactivity check (seconds)" id="config.azure.nxd_ftp_common.timeout_period">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_common.timeout_period}")  &amp;&amp; ("${config.azure.nxd_ftp_common.timeout_period}" &gt;= 0)
            </constraint>
        </property>
        <property default="NX_ANY_PORT" display="FTP|Client|TCP socket to use" id="module.azure.nxd_ftp_client.source_port">
            <constraint display="Value must be a non-negative integer">
                (testInteger("${module.azure.nxd_ftp_client.source_port}")  &amp;&amp; ("${module.azure.nxd_ftp_client.source_port}" &gt; 0)) || "NX_ANY_PORT" == "${module.azure.nxd_ftp_client.source_port}"
            </constraint>
        </property>
        <property default="4096" display="SNMP|Agent|Internal thread stack size (bytes)" id="config.azure.nxd_snmp_agent.stack_size">
            <constraint display="Value must be a non-negative integer">
        testInteger("${config.azure.nxd_snmp_agent.stack_size}")  &amp;&amp; (("${config.azure.nxd_snmp_agent.stack_size}" % 8) == 0)
            </constraint>
        </property>
        <property default="16" display="SNMP|Agent|SNMP agent priority" id="config.azure.nxd_snmp_agent.nxd_snmp_agent_priority">
            <constraint display="Value must be a non-negative integer">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_agent_priority}")  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_agent_priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_snmp_agent.nxd_snmp_type_of_service.normal" display="SNMP|Agent|Type of service for SNMP responses" id="config.azure.nxd_snmp_agent.nxd_snmp_type_of_service">
            <option display="Normal" id="config.azure.nxd_snmp_agent.nxd_snmp_type_of_service.normal" value="NX_IP_NORMAL"/>
            <option display="Minimum Delay" id="config.azure.nxd_snmp_agent.nxd_snmp_type_of_service.min_delay" value="NX_IP_MIN_DELAY"/>
            <option display="Maximum Data" id="config.azure.nxd_snmp_agent.nxd_snmp_type_of_service.max_data" value="NX_IP_MAX_DATA"/>
            <option display="Maximum Reliability" id="config.azure.nxd_snmp_agent.nxd_snmp_type_of_service.max_reliability" value="NX_IP_MAX_RELIABLE"/>
            <option display="Minimum Cost" id="config.azure.nxd_snmp_agent.nxd_snmp_type_of_service.min_cost" value="NX_IP_MIN_COST"/>
        </property>
        <property default="config.azure.nxd_snmp_agent.nxd_snmp_fragment_option.dont" display="SNMP|Agent|Fragment enable for SNMP PDU requests" id="config.azure.nxd_snmp_agent.nxd_snmp_fragment_option">
            <option display="Fragment" id="config.azure.nxd_snmp_agent.nxd_snmp_fragment_option.okay" value="NX_FRAGMENT_OKAY"/>
            <option display="Dont Fragment" id="config.azure.nxd_snmp_agent.nxd_snmp_fragment_option.dont" value="NX_DONT_FRAGMENT"/>
        </property>
        <property default="128" display="SNMP|Agent|SNMP socket time to live" id="config.azure.nxd_snmp_agent.nxd_snmp_time_to_live">
            <constraint display="Value must be between 1 to 255">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_time_to_live}") &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_time_to_live}" &gt;= 1)  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_time_to_live}" &lt;= 255)
            </constraint>
        </property>
        <property default="100" display="SNMP|Agent|Agent timeout" id="config.azure.nxd_snmp_agent.nxd_snmp_agent_timeout">
            <constraint display="Value must be between 100 to 1500">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_agent_timeout}") &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_agent_timeout}" &gt;= 100)  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_agent_timeout}" &lt;= 1500)
            </constraint>
        </property>
        <property default="255" display="SNMP|Agent|Max octet string size" id="config.azure.nxd_snmp_agent.nxd_snmp_max_octet_string">
            <constraint display="Value must be between 64 to 1500">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_max_octet_string}") &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_max_octet_string}" &gt;= 64)  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_max_octet_string}" &lt;= 1500)
            </constraint>
        </property>
        <property default="32" display="SNMP|Agent|Max context string size" id="config.azure.nxd_snmp_agent.nxd_snmp_max_context_string">
            <constraint display="Value must be between 32 to 255">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_max_context_string}") &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_max_context_string}" &gt;= 32)  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_max_context_string}" &lt;= 255)
            </constraint>
        </property>
        <property default="64" display="SNMP|Agent|Max User name Size" id="config.azure.nxd_snmp_agent.nxd_snmp_max_user_name">
            <constraint display="Value must be between 20 to 255">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_max_user_name}") &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_max_user_name}" &gt;= 20)  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_max_user_name}" &lt;= 255)
            </constraint>
        </property>
        <property default="64" display="SNMP|Agent|Max security Key Size" id="config.azure.nxd_snmp_agent.nxd_snmp_max_security_key">
            <constraint display="Value must be between 20 to 255">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_max_security_key}") &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_max_security_key}" &gt;= 20)  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_max_security_key}" &lt;= 255)
            </constraint>
        </property>
        <property default="560" display="SNMP|Agent|Minimum SNMP packet size" id="config.azure.nxd_snmp_agent.nxd_snmp_min_packet_size">
            <constraint display="Value must be between 560 to 1500">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_min_packet_size}")  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_min_packet_size}" &gt;= 560)&amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_min_packet_size}" &lt;= 1500)
            </constraint>
        </property>
        <property default="161" display="SNMP|Agent|UDP port number" id="config.azure.nxd_snmp_agent.nxd_snmp_agent_port">
            <constraint display="Value must be between 1 to 65535">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_agent_port}")  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_agent_port}" &gt;= 1)&amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_agent_port}" &lt;= 65535)
            </constraint>
        </property>
        <property default="162" display="SNMP|Agent|Trap destination port" id="config.azure.nxd_snmp_agent.nxd_snmp_manager_trap_port">
            <constraint display="Value must be between 1 to 65535">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_manager_trap_port}") &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_manager_trap_port}" &gt;= 1)  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_manager_trap_port}" &lt;= 65535)
            </constraint>
        </property>
        <property default="64" display="SNMP|Agent|Max trap Key Size" id="config.azure.nxd_snmp_agent.nxd_snmp_max_trap_key">
            <constraint display="Value must be between 20 to 255">
        testInteger("${config.azure.nxd_snmp_agent.nxd_snmp_max_trap_key}") &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_max_trap_key}" &gt;= 20)  &amp;&amp; ("${config.azure.nxd_snmp_agent.nxd_snmp_max_trap_key}" &lt;= 255)
            </constraint>
        </property>
        <property default="config.azure.nxd_snmp_agent.enable_v1.enable" display="SNMP|Agent|SNMP Version 1" id="config.azure.nxd_snmp_agent.enable_v1">
            <option display="Enable" id="config.azure.nxd_snmp_agent.enable_v1.enable" value=""/>
            <option display="Disable" id="config.azure.nxd_snmp_agent.enable_v1.disable" value="#define NX_SNMP_DISABLE_V1"/>
        </property>
        <property default="config.azure.nxd_snmp_agent.enable_v2.enable" display="SNMP|Agent|SNMP Version 2" id="config.azure.nxd_snmp_agent.enable_v2">
            <option display="Enable" id="config.azure.nxd_snmp_agent.enable_v2.enable" value=""/>
            <option display="Disable" id="config.azure.nxd_snmp_agent.enable_v2.disable" value="#define NX_SNMP_DISABLE_V2"/>
        </property>
        <property default="config.azure.nxd_snmp_agent.enable_v3.enable" display="SNMP|Agent|SNMP Version 3" id="config.azure.nxd_snmp_agent.enable_v3">
            <option display="Enable" id="config.azure.nxd_snmp_agent.enable_v3.enable" value=""/>
            <option display="Disable" id="config.azure.nxd_snmp_agent.enable_v3.disable" value="#define NX_SNMP_DISABLE_V3"/>
        </property>
        <property default="2000" display="POP3|Client|Maximum buffer size to store messages (bytes)" id="config.azure.nxd_pop3_client.mail_buffer_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_pop3_client.mail_buffer_size}")  &amp;&amp; ("${config.azure.nxd_pop3_client.mail_buffer_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="POP3|Client|Packet time out (seconds)" id="config.azure.nxd_pop3_client.packet_time_out">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_pop3_client.packet_time_out}")  &amp;&amp; ("${config.azure.nxd_pop3_client.packet_time_out}" &gt;= 0)
            </constraint>
        </property>
        <property default="30" display="POP3|Client|Connection time out (seconds)" id="config.azure.nxd_pop3_client.connection_time_out">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_pop3_client.connection_time_out}")  &amp;&amp; ("${config.azure.nxd_pop3_client.connection_time_out}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="POP3|Client|Disconnect time out (seconds)" id="config.azure.nxd_pop3_client.disconnect_time_out">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_pop3_client.disconnect_time_out}")  &amp;&amp; ("${config.azure.nxd_pop3_client.disconnect_time_out}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="POP3|Client|TCP socket send wait (seconds)" id="config.azure.nxd_pop3_client.tcp_socket_wait">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_pop3_client.tcp_socket_wait}")  &amp;&amp; ("${config.azure.nxd_pop3_client.tcp_socket_wait}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="POP3|Client|Server reply timeout (seconds)" id="config.azure.nxd_pop3_client.server_reply_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_pop3_client.server_reply_timeout}")  &amp;&amp; ("${config.azure.nxd_pop3_client.server_reply_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="1460" display="POP3|Client|TCP window size (bytes)" id="config.azure.nxd_pop3_client.client_tcp_window_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_pop3_client.client_tcp_window_size}")  &amp;&amp; ("${config.azure.nxd_pop3_client.client_tcp_window_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="40" display="POP3|Client|Maximum user name length (bytes)" id="config.azure.nxd_pop3_client.max_username">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_pop3_client.max_username}")  &amp;&amp; ("${config.azure.nxd_pop3_client.max_username}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="POP3|Client|Maximum password length (bytes)" id="config.azure.nxd_pop3_client.max_password">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_pop3_client.max_password}")  &amp;&amp; ("${config.azure.nxd_pop3_client.max_password}" &gt;= 0)
            </constraint>
        </property>
        <property default="16" display="FTP|Server|Internal thread priority" id="config.azure.nxd_ftp_server.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.priority}")  &amp;&amp; ("${config.azure.nxd_ftp_server.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="FTP|Server|Internal thread time slicing interval  (ticks)" id="config.azure.nxd_ftp_server.time_slice">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.time_slice}")  &amp;&amp; ("${config.azure.nxd_ftp_server.time_slice}" &gt;= 0)
            </constraint>
        </property>
        <property default="4" display="FTP|Server|Maximum clients to serve simultaneously" id="config.azure.nxd_ftp_server.max_clients">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.max_clients}")  &amp;&amp; ("${config.azure.nxd_ftp_server.max_clients}" &gt;= 0)
            </constraint>
        </property>
        <property default="400" display="FTP|Server|Control window size (bytes)" id="config.azure.nxd_ftp_server.control_window_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.control_window_size}")  &amp;&amp; ("${config.azure.nxd_ftp_server.control_window_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="2048" display="FTP|Server|Data window size (bytes)" id="config.azure.nxd_ftp_server.data_window_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.data_window_size}")  &amp;&amp; ("${config.azure.nxd_ftp_server.data_window_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="FTP|Server|Duration internal services will suspend for (seconds)" id="config.azure.nxd_ftp_server.server_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.server_timeout}")  &amp;&amp; ("${config.azure.nxd_ftp_server.server_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="FTP|Server|Maximum username length (bytes)" id="config.azure.nxd_ftp_server.username_size">
            <constraint display="Value must be a non-negative integer"> testInteger("${config.azure.nxd_ftp_server.username_size}")  &amp;&amp; ("${config.azure.nxd_ftp_server.username_size}" &gt;= 0)</constraint>
        </property>
        <property default="20" display="FTP|Server|Maximum password length (bytes)" id="config.azure.nxd_ftp_server.password_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.password_size}")  &amp;&amp; ("${config.azure.nxd_ftp_server.password_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="240" display="FTP|Server|Duration allowed with no activity (seconds)" id="config.azure.nxd_ftp_server.activity_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.activity_timeout}")  &amp;&amp; ("${config.azure.nxd_ftp_server.activity_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="FTP|Server|Socket retransmit timeout (seconds)" id="config.azure.nxd_ftp_server.retry_seconds">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.retry_seconds}")  &amp;&amp; ("${config.azure.nxd_ftp_server.retry_seconds}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="FTP|Server|Maximum queued transmit packets" id="config.azure.nxd_ftp_server.transmit_queue_depth">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.transmit_queue_depth}")  &amp;&amp; ("${config.azure.nxd_ftp_server.transmit_queue_depth}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="FTP|Server|Number of socket retransmissions" id="config.azure.nxd_ftp_server.retry_max">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.retry_max}")  &amp;&amp; ("${config.azure.nxd_ftp_server.retry_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="FTP|Server|Binary left shift as multiplier for next retry duration" id="config.azure.nxd_ftp_server.retry_shift">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_ftp_server.retry_shift}")  &amp;&amp; ("${config.azure.nxd_ftp_server.retry_shift}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_http_server.filex.enable" display="HTTP|Server|FileX Support" id="config.azure.nxd_http_server.filex">
            <option display="Disable" id="config.azure.nxd_http_server.filex.disable" value="#define NX_HTTP_NO_FILEX"/>
            <option display="Enable" id="config.azure.nxd_http_server.filex.enable" value=""/>
        </property>
        <property default="config.azure.nxd_http_server.multipart.disable" display="HTTP|Server|Multipart HTTP requests support" id="config.azure.nxd_http_server.multipart">
            <option display="Disable" id="config.azure.nxd_http_server.multipart.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_http_server.multipart.enable" value="#define NX_HTTP_MULTIPART_ENABLE"/>
        </property>
        <property default="16" display="HTTP|Server|Internal thread priority" id="config.azure.nxd_http_server.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.priority}")  &amp;&amp; ("${config.azure.nxd_http_server.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" id="config.azure.nxd_http_server.time_slice" display="HTTP|Server|Internal thread time slicing interval (ticks)" description="Number of timer-ticks this thread is allowed to run before other ready threads of the same priority are given a chance to run. Legal time-slice values range from 1 to 0xFFFFFFFF (inclusive). A value of TX_NO_TIME_SLICE (a value of 0) disables time-slicing of this thread.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.time_slice}")  &amp;&amp; ("${config.azure.nxd_http_server.time_slice}" &gt;= 0)
            </constraint>
        </property>
        <property default="2048" display="HTTP|Server|Server socket window size (bytes)" id="config.azure.nxd_http_server.server_window_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.server_window_size}")  &amp;&amp; ("${config.azure.nxd_http_server.server_window_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="HTTP|Server|Server time out (seconds)" id="config.azure.nxd_http_server.server_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.server_timeout}")  &amp;&amp; ("${config.azure.nxd_http_server.server_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="HTTP|Server|Server time out for accept (seconds)" id="config.azure.nxd_http_server.server_timeout_accept">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.server_timeout_accept}")  &amp;&amp; ("${config.azure.nxd_http_server.server_timeout_accept}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="HTTP|Server|Server time out for disconnect (seconds)" id="config.azure.nxd_http_server.server_timeout_disconnect">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.server_timeout_disconnect}")  &amp;&amp; ("${config.azure.nxd_http_server.server_timeout_disconnect}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="HTTP|Server|Server time out for receive (seconds)" id="config.azure.nxd_http_server.server_timeout_receive">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.server_timeout_receive}")  &amp;&amp; ("${config.azure.nxd_http_server.server_timeout_receive}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="HTTP|Server|Server time out for send (seconds)" id="config.azure.nxd_http_server.server_timeout_send">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.server_timeout_send}")  &amp;&amp; ("${config.azure.nxd_http_server.server_timeout_send}" &gt;= 0)
            </constraint>
        </property>
        <property default="256" display="HTTP|Server|Maximum size of header field (bytes)" id="config.azure.nxd_http_server.max_header_field">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.max_header_field}")  &amp;&amp; ("${config.azure.nxd_http_server.max_header_field}" &gt;= 0)
            </constraint>
        </property>
        <property default="5" display="HTTP|Server|Maximum connections in queue" id="config.azure.nxd_http_server.server_max_pending">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.server_max_pending}")  &amp;&amp; ("${config.azure.nxd_http_server.server_max_pending}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="HTTP|Server|Maximum client user name length (bytes)" id="config.azure.nxd_http_server.max_name">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.max_name}")  &amp;&amp; ("${config.azure.nxd_http_server.max_name}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="HTTP|Server|Maximum client user password length (bytes)" id="config.azure.nxd_http_server.max_password">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.max_password}")  &amp;&amp; ("${config.azure.nxd_http_server.max_password}" &gt;= 0)
            </constraint>
        </property>
        <property default="600" display="HTTP|Server|Minimum size of packets in pool (bytes)" id="config.azure.nxd_http_server.server_min_packet_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.server_min_packet_size}")  &amp;&amp; ("${config.azure.nxd_http_server.server_min_packet_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="HTTP|Server|Maximum number of queued transmit packets (units)" id="config.azure.nxd_http_server.transmit_queue_depth">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.transmit_queue_depth}")  &amp;&amp; ("${config.azure.nxd_http_server.transmit_queue_depth}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="HTTP|Server|Wait before retry (seconds)" id="config.azure.nxd_http_server.retry_seconds">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.retry_seconds}")  &amp;&amp; ("${config.azure.nxd_http_server.retry_seconds}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="HTTP|Server|Maximum number of retries per packet" id="config.azure.nxd_http_server.retry_max">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.retry_max}")  &amp;&amp; ("${config.azure.nxd_http_server.retry_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="HTTP|Server|Binary left shift as multiplier for next retry duration" id="config.azure.nxd_http_server.retry_shift">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_http_server.retry_shift}")  &amp;&amp; ("${config.azure.nxd_http_server.retry_shift}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_tftp_server.filex.enable" display="TFTP|Server|FileX support" id="config.azure.nxd_tftp_server.filex">
            <option display="Disable" id="config.azure.nxd_tftp_server.filex.disable" value="#define NX_TFTP_NO_FILEX"/>
            <option display="Enable" id="config.azure.nxd_tftp_server.filex.enable" value=""/>
        </property>
        <property default="config.azure.nxd_tftp_server.retransmit.disable" display="TFTP|Server|Retransmission on client request support" id="config.azure.nxd_tftp_server.retransmit">
            <option display="Disable" id="config.azure.nxd_tftp_server.retransmit.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_tftp_server.retransmit.enable" value="NX_TFTP_SERVER_RETRANSMIT_ENABLE"/>
        </property>
        <property default="16" display="TFTP|Server|Internal thread priority" id="config.azure.nxd_tftp_server.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_tftp_server.priority}")  &amp;&amp; ("${config.azure.nxd_tftp_server.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="TFTP|Server|Maximum clients to serve simultaneously" id="config.azure.nxd_tftp_server.tftp_max_clients">
            <constraint display="Value must be between 1 to 10">
                testInteger("${config.azure.nxd_tftp_server.tftp_max_clients}")  &amp;&amp; ("${config.azure.nxd_tftp_server.tftp_max_clients}" &gt;= 1)  &amp;&amp; ("${config.azure.nxd_tftp_server.tftp_max_clients}" &lt;= 10)
            </constraint>
        </property>
        <property default="2" display="TFTP|Server|Time slice for internal thread" id="config.azure.nxd_tftp_server.time_slice">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_tftp_server.time_slice}")  &amp;&amp; ("${config.azure.nxd_tftp_server.time_slice}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="TFTP|Server|Client request activity timeout check interval (ticks)" id="config.azure.nxd_tftp_server.server_time_out">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_tftp_server.server_time_out}")  &amp;&amp; ("${config.azure.nxd_tftp_server.server_time_out}" &gt;= 0)
            </constraint>
        </property>
        <property default="200" display="TFTP|Server|Ack or data retransmission interval (ticks)" id="config.azure.nxd_tftp_server.retransmit_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_tftp_server.retransmit_timeout}")  &amp;&amp; ("${config.azure.nxd_tftp_server.retransmit_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="5" display="TFTP|Server|Maximum retries for transmission without response" id="config.azure.nxd_tftp_server.max_retries">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_tftp_server.max_retries}")  &amp;&amp; ("${config.azure.nxd_tftp_server.max_retries}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="TFTP|Server|Maximum retries for transmission with duplicate response" id="config.azure.nxd_tftp_server.max_client_retransmits">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_tftp_server.max_client_retransmits}")  &amp;&amp; ("${config.azure.nxd_tftp_server.max_client_retransmits}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_web_http_server.secure.disable" display="Web HTTP|Server|HTTPS Support" id="config.azure.nxd_web_http_server.secure" description="This configuration property adds/removes Web HTTP server secure APIs from NetX code. This option can be disabled for code optimization">
            <option display="Enable" id="config.azure.nxd_web_http_server.secure.enable" value="#ifndef NX_WEB_HTTPS_ENABLE&#10;#define NX_WEB_HTTPS_ENABLE&#10;#endif"/>
            <option display="Disable" id="config.azure.nxd_web_http_server.secure.disable" value=""/>
        </property>
        <property default="config.azure.nxd_web_http_server.filex.enable" display="Web HTTP|Server|FileX Support" id="config.azure.nxd_web_http_server.filex" description="Enables/Disables FileX Support">
            <option display="Disable" id="config.azure.nxd_web_http_server.filex.disable" value="#define NX_WEB_HTTP_NO_FILEX"/>
            <option display="Enable" id="config.azure.nxd_web_http_server.filex.enable" value=""/>
        </property>
        <property default="config.azure.nxd_web_http_server.multipart.disable" display="Web HTTP|Server|Multipart HTTP requests support" id="config.azure.nxd_web_http_server.multipart" description="Enables/Disables Multipart HTTP requests Support">
            <option display="Disable" id="config.azure.nxd_web_http_server.multipart.disable" value=""/>
            <option display="Enable" id="config.azure.nxd_web_http_server.multipart.enable" value="#define NX_WEB_HTTP_MULTIPART_ENABLE"/>
        </property>
        <property default="16" display="Web HTTP|Server|Server thread priority" id="config.azure.nxd_web_http_server.priority" description="Priority of HTTP Server thread">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.priority}")  &amp;&amp; ("${config.azure.nxd_web_http_server.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" id="config.azure.nxd_web_http_server.time_slice" display="Web HTTP|Server|Server thread time slicing interval (ticks)" description="Number of timer-ticks this thread is allowed to run before other ready threads of the same priority are given a chance to run. Legal time-slice values range from 1 to 0xFFFFFFFF (inclusive). A value of TX_NO_TIME_SLICE (a value of 0) disables time-slicing of this thread.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.time_slice}")  &amp;&amp; ("${config.azure.nxd_web_http_server.time_slice}" &gt;= 0)
            </constraint>
        </property>
        <property default="2048" display="Web HTTP|Server|Server socket window size (bytes)" id="config.azure.nxd_web_http_server.server_window_size" description="Window size of Server socket">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.server_window_size}")  &amp;&amp; ("${config.azure.nxd_web_http_server.server_window_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="Web HTTP|Server|Server time out (seconds)" id="config.azure.nxd_web_http_server.server_timeout" description=" Number of ThreadX ticks for which internal services of server will suspend">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.server_timeout}")  &amp;&amp; ("${config.azure.nxd_web_http_server.server_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="Web HTTP|Server|Server time out for accept (seconds)" id="config.azure.nxd_web_http_server.server_timeout_accept" description=" Specifies the number of ThreadX ticks that internal services will suspend for in internal nx_tcp_server_socket_accept() calls.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.server_timeout_accept}")  &amp;&amp; ("${config.azure.nxd_web_http_server.server_timeout_accept}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="Web HTTP|Server|Server time out for disconnect (seconds)" id="config.azure.nxd_web_http_server.server_timeout_disconnect" description=" Specifies the number of ThreadX ticks that internal services will suspend for in internal nx_tcp_socket_disconnect() calls.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.server_timeout_disconnect}")  &amp;&amp; ("${config.azure.nxd_web_http_server.server_timeout_disconnect}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="Web HTTP|Server|Server time out for receive (seconds)" id="config.azure.nxd_web_http_server.server_timeout_receive" description=" Specifies the number of ThreadX ticks that internal services will suspend for in internal nx_tcp_socket_receive() calls.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.server_timeout_receive}")  &amp;&amp; ("${config.azure.nxd_web_http_server.server_timeout_receive}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="Web HTTP|Server|Server time out for send (seconds)" id="config.azure.nxd_web_http_server.server_timeout_send" description=" Specifies the number of ThreadX ticks that internal services will suspend for in internal nx_tcp_socket_send() calls.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.server_timeout_send}")  &amp;&amp; ("${config.azure.nxd_web_http_server.server_timeout_send}" &gt;= 0)
            </constraint>
        </property>
        <property default="256" display="Web HTTP|Server|Maximum size of header field (bytes)" id="config.azure.nxd_web_http_server.max_header_field" description=" Specifies the maximum size of HTTP header field.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.max_header_field}")  &amp;&amp; ("${config.azure.nxd_web_http_server.max_header_field}" &gt;= 0)
            </constraint>
        </property>
        <property default="4" display="Web HTTP|Server|Maximum connections in queue" id="config.azure.nxd_web_http_server.server_max_pending" description=" Specifies the number of connections that can be queued for the HTTP Server.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.server_max_pending}")  &amp;&amp; ("${config.azure.nxd_web_http_server.server_max_pending}" &gt;= 0)
            </constraint>
        </property>
        <property default="40" display="Web HTTP|Server|Maximum length of resource name" id="config.azure.nxd_web_http_server.max_resource" description=" Specifies the length of resource name.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.max_resource}")  &amp;&amp; ("${config.azure.nxd_web_http_server.max_resource}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="Web HTTP|Server|Number of simultaneous sessions for server" id="config.azure.nxd_web_http_server.server_session_max" description=" Specifies the number of simultaneous sessions for an HTTP or HTTPS server. A TCP socket and a TLS session (if HTTPS is enabled) are allocated for each session. ">
            <constraint display="Value must be a non-negative integer">
               testInteger("${config.azure.nxd_web_http_server.server_session_max}")  &amp;&amp; ("${config.azure.nxd_web_http_server.server_session_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="600" display="Web HTTP|Server|Minimum size of packets in pool (bytes)" id="config.azure.nxd_web_http_server.server_min_packet_size" description=" Specifies the minimum size of the packets in the pool at the time of Server creation. This ensures complete HTTP header can be contained in one packet. Make sure that this minimum size > (low level packet pool size - NX_PHYSICAL_TRAILER). NX_PHYSICAL_TRAILER can be obtained from code.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.server_min_packet_size}")  &amp;&amp; ("${config.azure.nxd_web_http_server.server_min_packet_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="Web HTTP|Server|Maximum number of queued transmit packets (units)" id="config.azure.nxd_web_http_server.transmit_queue_depth" description=" Specifies the maximum number of packets that can be enqueued on the Server socket retransmission queue. If the number of packets enqueued reaches this number, no more packets can be sent until one or more enqueued packets are released.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.transmit_queue_depth}")  &amp;&amp; ("${config.azure.nxd_web_http_server.transmit_queue_depth}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="Web HTTP|Server|Server Socket Re-transmission Timeout (seconds)" id="config.azure.nxd_web_http_server.retry_seconds" description=" Timeout for Server socket re-transmission.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.retry_seconds}")  &amp;&amp; ("${config.azure.nxd_web_http_server.retry_seconds}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="Web HTTP|Server|Maximum number of retries per packet" id="config.azure.nxd_web_http_server.retry_max" description=" Maximum number of re-transmissions on Server socket.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.retry_max}")  &amp;&amp; ("${config.azure.nxd_web_http_server.retry_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="Web HTTP|Server|Server Next Re-transmission timeout shift" id="config.azure.nxd_web_http_server.retry_shift" description=" This value is used to set the next retransmission timeout. The current timeout is multiplied by the number of retransmissions thus far, shifted by the value of the socket timeout shift.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.azure.nxd_web_http_server.retry_shift}")  &amp;&amp; ("${config.azure.nxd_web_http_server.retry_shift}" &gt;= 0)
            </constraint>
        </property>
        <property default="config.azure.nxd_src.hardware_tcp_ip.disable" display="Common|TCP/IP Offload" id="config.azure.nxd_src.hardware_tcp_ip" description="Enables support for hardware TCP/IP devices.">
            <option display="Enable" id="config.azure.nxd_src.hardware_tcp_ip.enable" value="#define NX_ENABLE_TCPIP_OFFLOAD"/>
            <option display="Disable" id="config.azure.nxd_src.hardware_tcp_ip.disable" value=""/>
        </property>
        <property default="config.azure.nxd_src.interface_capability.disable" display="Common|Interface Capability" id="config.azure.nxd_src.interface_capability" description="When enabled the link driver is able to specify extra capability, such as checksum offloading features.">
            <option display="Enable" id="config.azure.nxd_src.interface_capability.enable" value="#define NX_ENABLE_INTERFACE_CAPABILITY"/>
            <option display="Disable" id="config.azure.nxd_src.interface_capability.disable" value=""/>
        </property>
        <content>
#ifdef __cplusplus
extern "C" {
#endif

/* NXD Source Common Configuration */
${config.azure.nxd_src.error_checking}
#ifdef NX_DISABLE_ERROR_CHECKING
#define NX_SMTP_DISABLE_ERROR_CHECKING  /* SMTP does not use the common error checking macro */
#endif
${config.azure.nxd_src.ip_static_routing}
${config.azure.nxd_src.ip_packet_filter}
#if (${config.azure.nxd_src.physical_header}+0)
#define NX_PHYSICAL_HEADER (${config.azure.nxd_src.physical_header})
#endif
#if (${config.azure.nxd_src.physical_trailer}+0)
#define NX_PHYSICAL_TRAILER (${config.azure.nxd_src.physical_trailer})
#endif
${config.azure.nxd_src.arp_defend_by_reply}
${config.azure.nxd_src.arp_mac_change_notification}
#if (${config.azure.nxd_src.arp_expiration_rate}+0)
#define NX_ARP_EXPIRATION_RATE (${config.azure.nxd_src.arp_expiration_rate})
#endif
#if (${config.azure.nxd_src.arp_update_rate}+0)
#define NX_ARP_UPDATE_RATE (${config.azure.nxd_src.arp_update_rate})
#endif
#if (${config.azure.nxd_src.tcp_ack_timer_rate}+0)
#define NX_TCP_ACK_TIMER_RATE (${config.azure.nxd_src.tcp_ack_timer_rate})
#endif
#if (${config.azure.nxd_src.tcp_fast_timer_rate}+0)
#define NX_TCP_FAST_TIMER_RATE (${config.azure.nxd_src.tcp_fast_timer_rate})
#endif
#if (${config.azure.nxd_src.tcp_transmit_timer_rate}+0)
#define NX_TCP_TRANSMIT_TIMER_RATE (${config.azure.nxd_src.tcp_transmit_timer_rate})
#endif
#if (${config.azure.nxd_src.tcp_keepalive_initial}+0)
#define NX_TCP_KEEPALIVE_INITIAL (${config.azure.nxd_src.tcp_keepalive_initial})
#endif
#if (${config.azure.nxd_src.tcp_keepalive_retry}+0)
#define NX_TCP_KEEPALIVE_RETRY (${config.azure.nxd_src.tcp_keepalive_retry})
#endif
#if (${config.azure.nxd_src.arp_maximum_retries}+0)
#define NX_ARP_MAXIMUM_RETRIES (${config.azure.nxd_src.arp_maximum_retries})
#endif
#if (${config.azure.nxd_src.arp_max_queue_depth}+0)
#define NX_ARP_MAX_QUEUE_DEPTH (${config.azure.nxd_src.arp_max_queue_depth})
#endif
${config.azure.nxd_src.arp_auto_arp_entry}
#if (${config.azure.nxd_src.max_multicast_groups}+0)
#define NX_MAX_MULTICAST_GROUPS (${config.azure.nxd_src.max_multicast_groups})
#endif
#if (${config.azure.nxd_src.max_listen_requests}+0)
#define NX_MAX_LISTEN_REQUESTS (${config.azure.nxd_src.max_listen_requests})
#endif
${config.azure.nxd_src.tcp_keepalive}
${config.azure.nxd_src.tcp_window_scaling}
${config.azure.nxd_src.tcp_immediate_ack}
#if (${config.azure.nxd_src.tcp_ack_every_n_packets}+0)
#define NX_TCP_ACK_EVERY_N_PACKETS (${config.azure.nxd_src.tcp_ack_every_n_packets})
#endif
${config.azure.nxd_src.hardware_tcp_ip}
${config.azure.nxd_src.interface_capability}

/* Automatically define NX_TCP_ACK_EVERY_N_PACKETS to 1 if NX_TCP_IMMEDIATE_ACK is defined.
   This is needed for backward compatibility. */
#if (defined(NX_TCP_IMMEDIATE_ACK) &amp;&amp; !defined(NX_TCP_ACK_EVERY_N_PACKETS))
#define NX_TCP_ACK_EVERY_N_PACKETS 1
#endif

#if (${config.azure.nxd_src.tcp_maximum_retries}+0)
#define NX_TCP_MAXIMUM_RETRIES (${config.azure.nxd_src.tcp_maximum_retries})
#endif
#if (${config.azure.nxd_src.tcp_maximum_tx_queue}+0)
#define NX_TCP_MAXIMUM_TX_QUEUE (${config.azure.nxd_src.tcp_maximum_tx_queue})
#endif
#if (${config.azure.nxd_src.tcp_retry_shift}+0)
#define NX_TCP_RETRY_SHIFT (${config.azure.nxd_src.tcp_retry_shift})
#endif
#if (${config.azure.nxd_src.tcp_keepalive_retries}+0)
#define NX_TCP_KEEPALIVE_RETRIES (${config.azure.nxd_src.tcp_keepalive_retries})
#endif
${config.azure.nxd_src.driver_deferred_processing}
${config.azure.nxd_src.loopback_interface}
#if (${config.azure.nxd_src.max_physical_interfaces}+0)
#define NX_MAX_PHYSICAL_INTERFACES (${config.azure.nxd_src.max_physical_interfaces})
#endif
${config.azure.nxd_src.fragmentation}
${config.azure.nxd_src.ip_rx_checksum}
${config.azure.nxd_src.ip_tx_checksum}
${config.azure.nxd_src.tcp_rx_checksum}
${config.azure.nxd_src.tcp_tx_checksum}
${config.azure.nxd_src.udp_rx_checksum}
${config.azure.nxd_src.udp_tx_checksum}
${config.azure.nxd_src.reset_disconnect}
${config.azure.nxd_src.rx_size_checking}
${config.azure.nxd_src.arp_info}
${config.azure.nxd_src.ip_info}
${config.azure.nxd_src.icmp_info}
${config.azure.nxd_src.igmpv2}
${config.azure.nxd_src.igmp_info}
${config.azure.nxd_src.packet_info}
${config.azure.nxd_src.rarp_info}
${config.azure.nxd_src.tcp_info}
${config.azure.nxd_src.udp_info}
${config.azure.nxd_src.extended_notify_support}
${config.azure.nxd_src.natd}
#if (${config.azure.nxd_src.packet_header_pad_size}+0)
#define NX_PACKET_HEADER_PAD
#define NX_PACKET_HEADER_PAD_SIZE (${config.azure.nxd_src.packet_header_pad_size})
#endif
#if (${config.azure.nxd_src.tcp_mss_minimum}+0)
#define NX_TCP_MSS_CHECKING_ENABLED
#define NX_TCP_MSS_MINIMUM (${config.azure.nxd_src.tcp_mss_minimum})
#endif
${config.azure.nxd_src.source_address_check}
#if (${config.azure.nxd_src.arp_defend_interval}+0)
#define NX_ARP_DEFEND_INTERVAL (${config.azure.nxd_src.arp_defend_interval})
#endif
#if (${config.azure.nxd_src.tcp_max_out_of_order_packets}+0)
#define NX_TCP_MAX_OUT_OF_ORDER_PACKETS (${config.azure.nxd_src.tcp_max_out_of_order_packets})
#endif

// IPv6 Options
${config.azure.nxd_src.feature_nx_ipv6}
${config.azure.nxd_src.ipv6_address_change_notify}
${config.azure.nxd_src.ipv6_path_mtu_discovery}
#if (${config.azure.nxd_src.path_mtu_increase_wait_interval}+0)
#define NX_PATH_MTU_INCREASE_WAIT_INTERVAL ${config.azure.nxd_src.path_mtu_increase_wait_interval}
#endif
#if (${config.azure.nxd_src.ipv6_default_router_table_size}+0)
#define NX_IPV6_DEFAULT_ROUTER_TABLE_SIZE ${config.azure.nxd_src.ipv6_default_router_table_size}
#endif
#if (${config.azure.nxd_src.ipv6_destination_table_size}+0)
#define NX_IPV6_DESTINATION_TABLE_SIZE ${config.azure.nxd_src.ipv6_destination_table_size}
#endif
#if (${config.azure.nxd_src.ip_max_reassembly_time}+0)
#define NX_IP_MAX_REASSEMBLY_TIME ${config.azure.nxd_src.ip_max_reassembly_time}
#endif
#if (${config.azure.nxd_src.ipv4_max_reassembly_time}+0)
#define NX_IPV4_MAX_REASSEMBLY_TIME ${config.azure.nxd_src.ipv4_max_reassembly_time}
#endif
#if (${config.azure.nxd_src.ipv6_max_reassembly_time}+0)
#define NX_IPV6_MAX_REASSEMBLY_TIME ${config.azure.nxd_src.ipv6_max_reassembly_time}
#endif
${config.azure.nxd_src.ipv6_multicast}
#if (${config.azure.nxd_src.ipv6_prefix_list_table_size}+0)
#define NX_IPV6_PREFIX_LIST_TABLE_SIZE ${config.azure.nxd_src.ipv6_prefix_list_table_size}
#endif
${config.azure.nxd_src.ipv6_stateless_autoconfig_control}
#if (${config.azure.nxd_src.max_ipv6_addresses}+0)
#define NX_MAX_IPV6_ADDRESSES ${config.azure.nxd_src.max_ipv6_addresses}
#endif
// Neighbor Cache Configuration Options
#if (${config.azure.nxd_src.delay_first_probe_time}+0)
#define NX_DELAY_FIRST_PROBE_TIME ${config.azure.nxd_src.delay_first_probe_time}
#endif
${config.azure.nxd_src.ipv6_dad}
#if (${config.azure.nxd_src.ipv6_dad_transmits}+0)
#define NX_IPV6_DAD_TRANSMITS ${config.azure.nxd_src.ipv6_dad_transmits}
#endif
${config.azure.nxd_src.ipv6_purge_unused_cache_entries}
#if (${config.azure.nxd_src.ipv6_neighbor_cache_size}+0)
#define NX_IPV6_NEIGHBOR_CACHE_SIZE ${config.azure.nxd_src.ipv6_neighbor_cache_size}
#endif
#if (${config.azure.nxd_src.max_multicast_solicit}+0)
#define NX_MAX_MULTICAST_SOLICIT ${config.azure.nxd_src.max_multicast_solicit}
#endif
#if (${config.azure.nxd_src.max_unicast_solicit}+0)
#define NX_MAX_UNICAST_SOLICIT ${config.azure.nxd_src.max_unicast_solicit}
#endif
#if (${config.azure.nxd_src.nd_max_queue_depth}+0)
#define NX_ND_MAX_QUEUE_DEPTH ${config.azure.nxd_src.nd_max_queue_depth}
#endif
#if (${config.azure.nxd_src.reachable_time}+0)
#define NX_REACHABLE_TIME ${config.azure.nxd_src.reachable_time}
#endif
#if (${config.azure.nxd_src.retrans_timer}+0)
#define NX_RETRANS_TIMER ${config.azure.nxd_src.retrans_timer}
#endif
// Miscellaneous ICMPv6 Configuration Options
${config.azure.nxd_src.icmpv6_error_message}
${config.azure.nxd_src.icmpv6_redirect_process}
${config.azure.nxd_src.icmpv6_router_advertisement_process}
${config.azure.nxd_src.icmpv6_router_solicitation}
#if (${config.azure.nxd_src.icmpv6_max_rtr_solicitations}+0)
#define NX_ICMPV6_MAX_RTR_SOLICITATIONS    ${config.azure.nxd_src.icmpv6_max_rtr_solicitations}
#endif
#if (${config.azure.nxd_src.icmpv6_rtr_solicitation_interval}+0)
#define NX_ICMPV6_RTR_SOLICITATION_INTERVAL      ${config.azure.nxd_src.icmpv6_rtr_solicitation_interval}
#endif
${config.azure.nxd_src.icmpv4_rx_checksum}
${config.azure.nxd_src.icmpv6_rx_checksum}
${config.azure.nxd_src.icmp_rx_checksum}
${config.azure.nxd_src.icmpv4_tx_checksum}
${config.azure.nxd_src.icmpv6_tx_checksum}
${config.azure.nxd_src.icmp_tx_checksum}
#if (${config.azure.nxd_src.packet_alignment}+0)
#define NX_PACKET_ALIGNMENT      ${config.azure.nxd_src.packet_alignment}
#endif

int ${config.azure.nxd_src.rand} (void);
#define NX_RAND ${config.azure.nxd_src.rand}

void ${config.azure.nxd_src.srand} (unsigned int);
#define NX_SRAND ${config.azure.nxd_src.srand}

/* Azure IoT Configuration */
#define NX_AZURE_DISABLE_IOT_SECURITY_MODULE /* The Azure IoT Security Module redefines a reserved symbol and cannot be supported at this time. */

/* DHCP Common Configuration. */
#define NX_DHCP_TYPE_OF_SERVICE                    (${config.azure.nxd_dhcp_common.tos})
#define NX_DHCP_FRAGMENT_OPTION                    (${config.azure.nxd_dhcp_common.fragment_option})
#define NX_DHCP_TIME_TO_LIVE                       (${config.azure.nxd_dhcp_common.time_to_live})
#define NX_DHCP_QUEUE_DEPTH                        (${config.azure.nxd_dhcp_common.queue_depth})

/* DHCP IPv4 Client Configuration. */
/* Required for projects that need the packet pool to be placed in nonsecure memory. */
#define NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL
${config.azure.nxd_dhcp_client.bootp}
${config.azure.nxd_dhcp_client.client_restore_state}
${config.azure.nxd_dhcp_client.send_max_dhcp_message_option}
${config.azure.nxd_dhcp_client.send_arp_probe}
#ifdef NX_DHCP_CLIENT_SEND_ARP_PROBE
#define NX_DHCP_CLIENT_SEND_ARP_PROBE
#define NX_DHCP_ARP_PROBE_WAIT                       (${config.azure.nxd_dhcp_client.arp_probe_wait} * NX_IP_PERIODIC_RATE)
#define NX_DHCP_ARP_PROBE_MIN                        (${config.azure.nxd_dhcp_client.arp_probe_min} * NX_IP_PERIODIC_RATE)
#define NX_DHCP_ARP_PROBE_MAX                        (${config.azure.nxd_dhcp_client.arp_probe_max} * NX_IP_PERIODIC_RATE)
#define NX_DHCP_ARP_PROBE_NUM                        ${config.azure.nxd_dhcp_client.arp_probe_num}
#endif
#define NX_DHCP_THREAD_PRIORITY                      ${config.azure.nxd_dhcp_client.priority}
#define NX_DHCP_THREAD_STACK_SIZE                    ${config.azure.nxd_dhcp_client.thread_stack_size}
#define NX_DHCP_TIME_INTERVAL                        (${config.azure.nxd_dhcp_client.time_interval} * NX_IP_PERIODIC_RATE)
#define NX_DHCP_MAX_RETRANS_TIMEOUT                  (${config.azure.nxd_dhcp_client.max_retrans_timeout} * NX_IP_PERIODIC_RATE)
#define NX_DHCP_MIN_RENEW_TIMEOUT                    (${config.azure.nxd_dhcp_client.min_renew_timeout} * NX_IP_PERIODIC_RATE)
#define NX_DHCP_MIN_RETRANS_TIMEOUT                  (${config.azure.nxd_dhcp_client.min_retrans_timeout} * NX_IP_PERIODIC_RATE)
#define NX_DHCP_OPTIONS_BUFFER_SIZE                  ${config.azure.nxd_dhcp_client.buffer_size}
#define NX_DHCP_CLIENT_MAX_RECORDS                   ${config.azure.nxd_dhcp_client.max_records}
#define NX_DHCP_RESTART_WAIT                         (${config.azure.nxd_dhcp_client.restart_wait} * NX_IP_PERIODIC_RATE)

/* DHCP IPv4 Server Configuration. */
#define NX_DHCP_SERVER_THREAD_PRIORITY             (${config.azure.nxd_dhcp_server.priority})
#define NX_DHCP_PACKET_ALLOCATE_TIMEOUT            (${config.azure.nxd_dhcp_server.packet_alloc_timeout} * NX_IP_PERIODIC_RATE)
#define NX_DHCP_FAST_PERIODIC_TIME_INTERVAL        (${config.azure.nxd_dhcp_server.fast_periodic_time_interval})
#define NX_DHCP_CLIENT_SESSION_TIMEOUT             (${config.azure.nxd_dhcp_server.client_session_timeout} * NX_DHCP_FAST_PERIODIC_TIME_INTERVAL)
#define NX_DHCP_DEFAULT_LEASE_TIME                 (${config.azure.nxd_dhcp_server.default_lease_time})
#define NX_DHCP_SLOW_PERIODIC_TIME_INTERVAL        (${config.azure.nxd_dhcp_server.slow_periodic_time_interval})
#define NX_DHCP_CLIENT_OPTIONS_MAX                 (${config.azure.nxd_dhcp_server.client_options_max})
#define NX_DHCP_OPTIONAL_SERVER_OPTION_LIST        "${config.azure.nxd_dhcp_server.optional_server_option_list}"
#define NX_DHCP_OPTIONAL_SERVER_OPTION_SIZE        (${config.azure.nxd_dhcp_server.optional_server_option_size})
#define NX_DHCP_SERVER_HOSTNAME_MAX                (${config.azure.nxd_dhcp_server.server_hostname_max})
#define NX_DHCP_CLIENT_HOSTNAME_MAX                (${config.azure.nxd_dhcp_server.client_hostname_max})
#define NX_DHCP_IP_ADDRESS_MAX_LIST_SIZE           ${config.azure.nxd_dhcp_server.ip_address_max_list_size}
#define NX_DHCP_CLIENT_RECORD_TABLE_SIZE           ${config.azure.nxd_dhcp_server.client_record_table_size}
#define NX_BOOT_BUFFER_SIZE                        ${config.azure.nxd_dhcp_server.boot_buffer_size}

/* DHCP Common IPv6 Configuration. */
#define NX_DHCPV6_TYPE_OF_SERVICE                    (${config.azure.nxd_dhcpv6_common.tos})
#define NX_DHCPV6_TIME_TO_LIVE                       (${config.azure.nxd_dhcpv6_common.time_to_live})
#define NX_DHCPV6_QUEUE_DEPTH                        (${config.azure.nxd_dhcpv6_common.queue_depth})
#define NX_DHCPV6_PACKET_TIME_OUT                    (${config.azure.nxd_dhcpv6_common.packet_time_out}* NX_IP_PERIODIC_RATE)
#define NX_DHCPV6_SESSION_TIMER_INTERVAL             (${config.azure.nxd_dhcpv6_common.session_timer_interval})

/* DHCP IPv6 Client Configuration. */
#define NX_DHCPV6_THREAD_PRIORITY                      (${config.azure.nxd_dhcpv6_client.priority})
#define NX_DHCPV6_MUTEX_WAIT                           (${config.azure.nxd_dhcpv6_client.mutex_wait})
#define NX_DHCPV6_IP_LIFETIME_TIMER_INTERVAL           (${config.azure.nxd_dhcpv6_client.ip_lifetime_timer_interval}  * NX_IP_PERIODIC_RATE)
#define NX_DHCPV6_MAX_IA_ADDRESS                       (${config.azure.nxd_dhcpv6_client.max_ia_address})
#define NX_DHCPV6_NUM_DNS_SERVERS                      (${config.azure.nxd_dhcpv6_client.num_dns_servers})
#define NX_DHCPV6_NUM_TIME_SERVERS                     (${config.azure.nxd_dhcpv6_client.num_time_servers})
#define NX_DHCPV6_DOMAIN_NAME_BUFFER_SIZE              (${config.azure.nxd_dhcpv6_client.domain_name_buffer_size})
#define NX_DHCPV6_TIME_ZONE_BUFFER_SIZE                (${config.azure.nxd_dhcpv6_client.time_zone_buffer_size})
#define NX_DHCPV6_MAX_MESSAGE_SIZE                     (${config.azure.nxd_dhcpv6_client.max_message_size})

/* DHCP IPv6 Server Configuration. */
#define NX_DHCPV6_SERVER_THREAD_PRIORITY               (${config.azure.nxd_dhcpv6_server.priority})
#define NX_DHCPV6_IP_LEASE_TIMER_INTERVAL              (${config.azure.nxd_dhcpv6_server.ip_lease_timer_interval})
#define NX_DHCPV6_PACKET_WAIT_OPTION                   (${config.azure.nxd_dhcpv6_server.packet_wait_option})
#define NX_DHCPV6_PREFERENCE_VALUE                     (${config.azure.nxd_dhcpv6_server.preference_value})
#define NX_DHCPV6_MAX_OPTION_REQUEST_OPTIONS           (${config.azure.nxd_dhcpv6_server.max_option_request_options})
#define NX_DHCPV6_DEFAULT_T1_TIME                      (${config.azure.nxd_dhcpv6_server.t1_time})
#define NX_DHCPV6_DEFAULT_T2_TIME                      (${config.azure.nxd_dhcpv6_server.t2_time})
#define NX_DHCPV6_STATUS_MESSAGE_MAX                   (${config.azure.nxd_dhcpv6_server.status_message_max})
#define NX_DHCPV6_MAX_LEASES                           (${config.azure.nxd_dhcpv6_server.max_leases})
#define NX_DHCPV6_MAX_CLIENTS                          (${config.azure.nxd_dhcpv6_server.max_clients})
#define NX_DHCPV6_FRAGMENT_OPTION                      (${config.azure.nxd_dhcpv6_server.fragment_option})
#define NX_DHCPV6_DEFAULT_PREFERRED_TIME               (${config.azure.nxd_dhcpv6_server.default_preferred_time})
#define NX_DHCPV6_DEFAULT_VALID_TIME                   (${config.azure.nxd_dhcpv6_server.default_valid_time})
#define NX_DHCPV6_SERVER_DUID_VENDOR_ASSIGNED_ID       "${config.azure.nxd_dhcpv6_server.duid_vendor_assigned_id}"
#define NX_DHCPV6_SERVER_DUID_VENDOR_PRIVATE_ID        (${config.azure.nxd_dhcpv6_server.duid_vendor_private_id})
#define NX_DHCPV6_SERVER_DUID_VENDOR_ASSIGNED_LENGTH   (${config.azure.nxd_dhcpv6_server.duid_vendor_assigned_length})
#define NX_DHCPV6_STATUS_MESSAGE_SUCCESS               "${config.azure.nxd_dhcpv6_server.success_granted}"
#define NX_DHCPV6_STATUS_MESSAGE_UNSPECIFIED           "${config.azure.nxd_dhcpv6_server.failure_unspecified}"
#define NX_DHCPV6_STATUS_MESSAGE_NO_ADDRS_AVAILABLE    "${config.azure.nxd_dhcpv6_server.failure_no_addresses}"
#define NX_DHCPV6_STATUS_MESSAGE_NO_BINDING            "${config.azure.nxd_dhcpv6_server.failure_invalid_request}"
#define NX_DHCPV6_STATUS_MESSAGE_NOT_ON_LINK           "${config.azure.nxd_dhcpv6_server.failure_not_on_link}"
#define NX_DHCPV6_STATUS_MESSAGE_USE_MULTICAST         "${config.azure.nxd_dhcpv6_server.failure_use_multicast}"
#define NX_DHCPV6_SESSION_TIMEOUT                      (${config.azure.nxd_dhcpv6_server.session_timeout})

/* HTTP Common Configuration. */
${config.azure.nxd_http_common.digest}
#define NX_HTTP_FRAGMENT_OPTION                     ${config.azure.nxd_http_common.fragment_option}
#define NX_HTTP_TIME_TO_LIVE                        ${config.azure.nxd_http_common.time_to_live}
#define NX_HTTP_TYPE_OF_SERVICE                     ${config.azure.nxd_http_common.tos}
#define NX_HTTP_MAX_RESOURCE                        ${config.azure.nxd_http_common.max_resource}
#define NX_HTTP_MAX_NAME                            ${config.azure.nxd_http_common.max_name}
#define NX_HTTP_MAX_PASSWORD                        ${config.azure.nxd_http_common.max_password}

/* HTTP Client Configuration. */
#define NX_HTTP_CLIENT_MIN_PACKET_SIZE              ${config.azure.nxd_http_client.min_packet_size}
#define NX_HTTP_CLIENT_TIMEOUT                      (${config.azure.nxd_http_client.timeout} * NX_IP_PERIODIC_RATE)

/* HTTP Server Configuration. */
${config.azure.nxd_http_server.filex}
${config.azure.nxd_http_server.multipart}
#define NX_HTTP_SERVER_PRIORITY                     ${config.azure.nxd_http_server.priority}
#define NX_HTTP_SERVER_WINDOW_SIZE                  ${config.azure.nxd_http_server.server_window_size}
#define NX_HTTP_SERVER_TIMEOUT                      (${config.azure.nxd_http_server.server_timeout} * NX_IP_PERIODIC_RATE)
#define NX_HTTP_SERVER_TIMEOUT_ACCEPT               (${config.azure.nxd_http_server.server_timeout_accept} * NX_IP_PERIODIC_RATE)
#define NX_HTTP_SERVER_TIMEOUT_DISCONNECT           (${config.azure.nxd_http_server.server_timeout_disconnect} * NX_IP_PERIODIC_RATE)
#define NX_HTTP_SERVER_TIMEOUT_RECEIVE              (${config.azure.nxd_http_server.server_timeout_receive} * NX_IP_PERIODIC_RATE)
#define NX_HTTP_SERVER_TIMEOUT_SEND                 (${config.azure.nxd_http_server.server_timeout_send} * NX_IP_PERIODIC_RATE)
#define NX_HTTP_MAX_HEADER_FIELD                    ${config.azure.nxd_http_server.max_header_field}
#define NX_HTTP_SERVER_MAX_PENDING                  ${config.azure.nxd_http_server.server_max_pending}
#define NX_HTTP_MAX_NAME                            ${config.azure.nxd_http_server.max_name}
#define NX_HTTP_MAX_PASSWORD                        ${config.azure.nxd_http_server.max_password}
#define NX_HTTP_SERVER_MIN_PACKET_SIZE              ${config.azure.nxd_http_server.server_min_packet_size}
#define NX_HTTP_SERVER_THREAD_TIME_SLICE            ${config.azure.nxd_http_server.time_slice}
#define NX_HTTP_SERVER_TRANSMIT_QUEUE_DEPTH         ${config.azure.nxd_http_server.transmit_queue_depth}
#define NX_HTTP_SERVER_RETRY_SECONDS                ${config.azure.nxd_http_server.retry_seconds}
#define NX_HTTP_SERVER_RETRY_MAX                    ${config.azure.nxd_http_server.retry_max}
#define NX_HTTP_SERVER_RETRY_SHIFT                  ${config.azure.nxd_http_server.retry_shift}

/* DNS Client Configuration. */
#define NX_DNS_CLIENT_USER_CREATE_PACKET_POOL
${config.azure.nxd_dns_client.client_clear_queue}
${config.azure.nxd_dns_client.enable_extended_rr_types}
${config.azure.nxd_dns_client.cache_enable}
${config.azure.nxd_dns_client.ip_gateway_and_dns_server}
#define NX_DNS_PACKET_PAYLOAD_UNALIGNED                         (16 + sizeof(${config.azure.nxd_dns_client.dns_server_ip_version}) + sizeof(NX_UDP_HEADER) + NX_DNS_MESSAGE_MAX)
#define NX_DNS_TYPE_OF_SERVICE                                  ${config.azure.nxd_dns_client.control_tos}
#define NX_DNS_FRAGMENT_OPTION                                  ${config.azure.nxd_dns_client.fragment_option}
#define NX_DNS_TIME_TO_LIVE                                     ${config.azure.nxd_dns_client.time_to_live}
#define NX_DNS_MAX_SERVERS                                      ${config.azure.nxd_dns_client.max_servers}
#define NX_DNS_MESSAGE_MAX                                      ${config.azure.nxd_dns_client.message_max}
#define NX_DNS_MAX_RETRIES                                      ${config.azure.nxd_dns_client.max_retries}
#define NX_DNS_MAX_RETRANS_TIMEOUT                              (${config.azure.nxd_dns_client.max_retrans_timeout} * NX_IP_PERIODIC_RATE)
#define NX_DNS_PACKET_ALLOCATE_TIMEOUT                          (${config.azure.nxd_dns_client.packet_allocate_timeout} * NX_IP_PERIODIC_RATE)

/* Telnet Common Configuration. */
#define NX_TELNET_TOS                                (${config.azure.nxd_telnet_common.control_tos})
#define NX_TELNET_FRAGMENT_OPTION                    (${config.azure.nxd_telnet_common.fragment_option})
#define NX_TELNET_SERVER_PORT                        (${config.azure.nxd_telnet_common.telnet_server_port})
#define NX_TELNET_TIME_TO_LIVE                       (${config.azure.nxd_telnet_common.time_to_live})

/* AutoIP Configuration. */
#define NX_AUTO_IP_PROBE_WAIT                    ${config.azure.nxd_auto_ip.probe_wait}
#define NX_AUTO_IP_PROBE_NUM                     ${config.azure.nxd_auto_ip.probe_num}
#define NX_AUTO_IP_PROBE_MIN                     ${config.azure.nxd_auto_ip.probe_min}
#define NX_AUTO_IP_PROBE_MAX                     ${config.azure.nxd_auto_ip.probe_max}
#define NX_AUTO_IP_MAX_CONFLICTS                 ${config.azure.nxd_auto_ip.max_conflicts}
#define NX_AUTO_IP_RATE_LIMIT_INTERVAL           ${config.azure.nxd_auto_ip.rate_limit_interval}
#define NX_AUTO_IP_ANNOUNCE_WAIT                 ${config.azure.nxd_auto_ip.announce_wait}
#define NX_AUTO_IP_ANNOUNCE_NUM                  ${config.azure.nxd_auto_ip.announce_num}
#define NX_AUTO_IP_ANNOUNCE_INTERVAL             ${config.azure.nxd_auto_ip.announce_interval}
#define NX_AUTO_IP_DEFEND_INTERVAL               ${config.azure.nxd_auto_ip.defend_interval}

/* Web HTTP Common Configuration. */
${config.azure.nxd_web_http_common.digest}
#define NX_WEB_HTTP_FRAGMENT_OPTION                     ${config.azure.nxd_web_http_common.fragment_option}
#define NX_WEB_HTTP_TIME_TO_LIVE                        ${config.azure.nxd_web_http_common.time_to_live}
#define NX_WEB_HTTP_TYPE_OF_SERVICE                     ${config.azure.nxd_web_http_common.tos}
#define NX_WEB_HTTP_MAX_NAME                            ${config.azure.nxd_web_http_common.max_name}
#define NX_WEB_HTTP_MAX_PASSWORD                        ${config.azure.nxd_web_http_common.max_password}

/* Web HTTP Client Configuration. */
#if ${config.azure.nxd_web_http_client.secure}
#ifndef NX_WEB_HTTPS_ENABLE
#define NX_WEB_HTTPS_ENABLE
#endif
#endif
#define NX_WEB_HTTP_CLIENT_MIN_PACKET_SIZE              ${config.azure.nxd_web_http_client.min_packet_size}

/* Web HTTP Server Configuration. */
${config.azure.nxd_web_http_server.secure}
${config.azure.nxd_web_http_server.filex}
${config.azure.nxd_web_http_server.multipart}
#define NX_WEB_HTTP_SERVER_PRIORITY                     ${config.azure.nxd_web_http_server.priority}
#define NX_WEB_HTTP_SERVER_WINDOW_SIZE                  ${config.azure.nxd_web_http_server.server_window_size}
#define NX_WEB_HTTP_SERVER_TIMEOUT                      (${config.azure.nxd_web_http_server.server_timeout} * NX_IP_PERIODIC_RATE)
#define NX_WEB_HTTP_SERVER_TIMEOUT_ACCEPT               (${config.azure.nxd_web_http_server.server_timeout_accept} * NX_IP_PERIODIC_RATE)
#define NX_WEB_HTTP_SERVER_TIMEOUT_DISCONNECT           (${config.azure.nxd_web_http_server.server_timeout_disconnect} * NX_IP_PERIODIC_RATE)
#define NX_WEB_HTTP_SERVER_TIMEOUT_RECEIVE              (${config.azure.nxd_web_http_server.server_timeout_receive} * NX_IP_PERIODIC_RATE)
#define NX_WEB_HTTP_SERVER_TIMEOUT_SEND                 (${config.azure.nxd_web_http_server.server_timeout_send} * NX_IP_PERIODIC_RATE)
#define NX_WEB_HTTP_MAX_HEADER_FIELD                    ${config.azure.nxd_web_http_server.max_header_field}
#define NX_WEB_HTTP_SERVER_MAX_PENDING                  ${config.azure.nxd_web_http_server.server_max_pending}
#define NX_WEB_HTTP_MAX_RESOURCE                        ${config.azure.nxd_web_http_server.max_resource}
#define NX_WEB_HTTP_SERVER_SESSION_MAX                  ${config.azure.nxd_web_http_server.server_session_max}
#define NX_WEB_HTTP_SERVER_MIN_PACKET_SIZE              ${config.azure.nxd_web_http_server.server_min_packet_size}
#define NX_WEB_HTTP_SERVER_THREAD_TIME_SLICE            ${config.azure.nxd_web_http_server.time_slice}
#define NX_WEB_HTTP_SERVER_TRANSMIT_QUEUE_DEPTH         ${config.azure.nxd_web_http_server.transmit_queue_depth}
#define NX_WEB_HTTP_SERVER_RETRY_SECONDS                ${config.azure.nxd_web_http_server.retry_seconds}
#define NX_WEB_HTTP_SERVER_RETRY_MAX                    ${config.azure.nxd_web_http_server.retry_max}
#define NX_WEB_HTTP_SERVER_RETRY_SHIFT                  ${config.azure.nxd_web_http_server.retry_shift}

/* SMTP Client Configuration */
#define NX_SMTP_CLIENT_TCP_WINDOW_SIZE              (${config.azure.nxd_smtp_client.client_tcp_window_size})
#define NX_SMTP_CLIENT_PACKET_TIMEOUT               (${config.azure.nxd_smtp_client.client_packet_timeout} * NX_IP_PERIODIC_RATE)
#define NX_SMTP_CLIENT_CONNECTION_TIMEOUT           (${config.azure.nxd_smtp_client.client_connection_timeout} * NX_IP_PERIODIC_RATE)
#define NX_SMTP_CLIENT_DISCONNECT_TIMEOUT           (${config.azure.nxd_smtp_client.client_disconnect_timeout} * NX_IP_PERIODIC_RATE)
#define NX_SMTP_GREETING_TIMEOUT                    (${config.azure.nxd_smtp_client.greeting_timeout} * NX_IP_PERIODIC_RATE)
#define NX_SMTP_ENVELOPE_TIMEOUT                    (${config.azure.nxd_smtp_client.envelope_timeout} * NX_IP_PERIODIC_RATE)
#define NX_SMTP_MESSAGE_TIMEOUT                     (${config.azure.nxd_smtp_client.message_timeout} * NX_IP_PERIODIC_RATE)
#define NX_SMTP_CLIENT_SEND_TIMEOUT                 (${config.azure.nxd_smtp_client.client_send_timeout} * NX_IP_PERIODIC_RATE)
#define NX_SMTP_SERVER_CHALLENGE_MAX_STRING         (${config.azure.nxd_smtp_client.server_challenge_max_string})
#define NX_SMTP_CLIENT_MAX_PASSWORD                 (${config.azure.nxd_smtp_client.max_password})
#define NX_SMTP_CLIENT_MAX_USERNAME                 (${config.azure.nxd_smtp_client.client_max_username})

/* Telnet Server Configuration */
${config.azure.nxd_telnet_server_v2.telnet_server_option}
${config.azure.nxd_telnet_server_v2.user_create_packet_pool}
#define NX_TELNET_SERVER_PRIORITY                           (${config.azure.nxd_telnet_server_v2.priority})
#define NX_TELNET_MAX_CLIENTS                               (${config.azure.nxd_telnet_server_v2.max_client})
#define NX_TELNET_SERVER_WINDOW_SIZE                        (${config.azure.nxd_telnet_server_v2.control_window_size})
#define NX_TELNET_SERVER_TIMEOUT                            (${config.azure.nxd_telnet_server_v2.server_timeout} * NX_IP_PERIODIC_RATE)
#define NX_TELNET_ACTIVITY_TIMEOUT                          (${config.azure.nxd_telnet_server_v2.server_activity_timeout})
#define NX_TELNET_TIMEOUT_PERIOD                            (${config.azure.nxd_telnet_server_v2.server_timeout_period})
#define NX_TELNET_SERVER_PACKET_PAYLOAD                     (${config.azure.nxd_telnet_server_v2.packet_payload})
#define NX_TELNET_SERVER_PACKET_POOL_SIZE                   (${config.azure.nxd_telnet_server_v2.packet_pool_size})

/* SNTP Client Configuration */
#define NX_SNTP_CLIENT_THREAD_STACK_SIZE           (${config.azure.nxd_sntp_client.stack_size})
#define NX_SNTP_CLIENT_THREAD_TIME_SLICE           (${config.azure.nxd_sntp_client.time_slice})
#define NX_SNTP_CLIENT_THREAD_PRIORITY             (${config.azure.nxd_sntp_client.priority})
#define NX_SNTP_CLIENT_PREEMPTION_THRESHOLD         NX_SNTP_CLIENT_THREAD_PRIORITY
#define NX_SNTP_CLIENT_UDP_SOCKET_NAME             "${config.azure.nxd_sntp_client.udp_socket_name}"
#define NX_SNTP_CLIENT_UDP_PORT                    (${config.azure.nxd_sntp_client.client_udp_port})
#define NX_SNTP_SERVER_UDP_PORT                    (${config.azure.nxd_sntp_client.server_udp_port})
#define NX_SNTP_CLIENT_TIME_TO_LIVE                (${config.azure.nxd_sntp_client.time_to_live})
#define NX_SNTP_CLIENT_MAX_QUEUE_DEPTH             (${config.azure.nxd_sntp_client.queue_depth})
#define NX_SNTP_CLIENT_PACKET_TIMEOUT              (${config.azure.nxd_sntp_client.packet_time_out} * NX_IP_PERIODIC_RATE)
#define NX_SNTP_CLIENT_NTP_VERSION                 (${config.azure.nxd_sntp_client.ntp_version})
#define NX_SNTP_CLIENT_MIN_NTP_VERSION             (${config.azure.nxd_sntp_client.ntp_min_version})
#define NX_SNTP_CLIENT_MIN_SERVER_STRATUM          (${config.azure.nxd_sntp_client.min_server_stratum})
#define NX_SNTP_CLIENT_MIN_TIME_ADJUSTMENT         (${config.azure.nxd_sntp_client.min_time_adjustment})
#define NX_SNTP_CLIENT_MAX_TIME_ADJUSTMENT         (${config.azure.nxd_sntp_client.max_time_adjustment})
#define NX_SNTP_CLIENT_IGNORE_MAX_ADJUST_STARTUP   (${config.azure.nxd_sntp_client.ignore_max_adjust_startup})
#define NX_SNTP_CLIENT_MAX_TIME_LAPSE              (${config.azure.nxd_sntp_client.max_time_lapse})
#define NX_SNTP_UPDATE_TIMEOUT_INTERVAL            (${config.azure.nxd_sntp_client.update_timeout_interval})
#define NX_SNTP_CLIENT_UNICAST_POLL_INTERVAL       (${config.azure.nxd_sntp_client.unicast_poll_interval})
#define NX_SNTP_CLIENT_EXP_BACKOFF_RATE            (${config.azure.nxd_sntp_client.exp_backoff_rate})
#define NX_SNTP_CLIENT_RTT_REQUIRED                (${config.azure.nxd_sntp_client.rtt_required})
#define NX_SNTP_CLIENT_MAX_ROOT_DISPERSION         (${config.azure.nxd_sntp_client.maximum_root_dispersion})
#define NX_SNTP_CLIENT_INVALID_UPDATE_LIMIT        (${config.azure.nxd_sntp_client.invalid_update_limit})
#define NX_SNTP_CLIENT_RANDOMIZE_ON_STARTUP        (${config.azure.nxd_sntp_client.randomize_on_startup})
#define NX_SNTP_CLIENT_SLEEP_INTERVAL              (${config.azure.nxd_sntp_client.client_sleep_interval})
#define NX_SNTP_CURRENT_YEAR                       (${config.azure.nxd_sntp_client.cur_year})

/* TFTP Common Configuration */
#define NX_TFTP_ERROR_STRING_MAX                    (${config.azure.nxd_tftp_common.error_string_max})
#define NX_TFTP_TIME_TO_LIVE                        ${config.azure.nxd_tftp_common.time_to_live}
#define NX_TFTP_FRAGMENT_OPTION                     ${config.azure.nxd_tftp_common.fragment_option}
#define NX_TFTP_TYPE_OF_SERVICE                     (${config.azure.nxd_tftp_common.tos})

/* TFTP Client Configuration */
#define NX_TFTP_SOURCE_PORT                         ${config.azure.nxd_tftp_client.source_port}

/* TFTP Server Configuration */
${config.azure.nxd_tftp_server.filex}
${config.azure.nxd_tftp_server.retransmit}
#ifdef NX_TFTP_SERVER_RETRANSMIT_ENABLE
#define NX_TFTP_SERVER_TIMEOUT_PERIOD                       (${config.azure.nxd_tftp_server.server_time_out})
#define NX_TFTP_SERVER_RETRANSMIT_TIMEOUT                   (${config.azure.nxd_tftp_server.retransmit_timeout})
#define NX_TFTP_SERVER_MAX_RETRIES                          (${config.azure.nxd_tftp_server.max_retries})
#else
#define NX_TFTP_MAX_CLIENT_RETRANSMITS                      (${config.azure.nxd_tftp_server.max_client_retransmits})
#endif
#define NX_TFTP_SERVER_PRIORITY                             (${config.azure.nxd_tftp_server.priority})
#define NX_TFTP_MAX_CLIENTS                                 (${config.azure.nxd_tftp_server.tftp_max_clients})
#define NX_TFTP_SERVER_TIME_SLICE                           (${config.azure.nxd_tftp_server.time_slice})

/* MQTT Client Configuration */
#define NXD_MQTT_SOCKET_TIMEOUT (${config.azure.nxd_mqtt_client.mqtt_socket_timeout})
#define NXD_MQTT_KEEPALIVE_TIMER_RATE (${module.azure.nxd_mqtt_client.mqtt_keepalive_timer_rate} * TX_TIMER_TICKS_PER_SECOND)
#define NXD_MQTT_PING_TIMEOUT_DELAY (${module.azure.nxd_mqtt_client.mqtt_ping_timeout_delay} * TX_TIMER_TICKS_PER_SECOND)
${config.azure.nxd_mqtt_client.cloud}
#if (${config.azure.nxd_mqtt_client.secure})
#ifndef NX_SECURE_ENABLE
#define NX_SECURE_ENABLE
#endif
#endif

/* NAT Configuration */
#define NX_NAT_MIN_ENTRY_COUNT              (${config.azure.nxd_nat.min_entry_count})
#define NX_NAT_ENTRY_RESPONSE_TIMEOUT       (${config.azure.nxd_nat.entry_response_timeout} * NX_IP_PERIODIC_RATE)
#define NX_NAT_START_TCP_PORT               (${config.azure.nxd_nat.start_tcp_port})
#define NX_NAT_END_TCP_PORT                 (${config.azure.nxd_nat.end_tcp_port})
#define NX_NAT_START_UDP_PORT               (${config.azure.nxd_nat.start_udp_port})
#define NX_NAT_END_UDP_PORT                 (${config.azure.nxd_nat.end_udp_port})
#define NX_NAT_START_ICMP_QUERY_ID          (${config.azure.nxd_nat.start_icmp_query_id})
#define NX_NAT_END_ICMP_QUERY_ID            (${config.azure.nxd_nat.end_icmp_query_id})

/* FTP Common Configuration */
#define NX_FTP_CONTROL_TOS                  ${config.azure.nxd_ftp_common.control_tos}
#define NX_FTP_DATA_TOS                     ${config.azure.nxd_ftp_common.data_tos}
#define NX_FTP_FRAGMENT_OPTION              ${config.azure.nxd_ftp_common.fragment_option}
#define NX_FTP_TIME_TO_LIVE                 ${config.azure.nxd_ftp_common.time_to_live}
#define NX_FTP_TIMEOUT_PERIOD               ${config.azure.nxd_ftp_common.timeout_period}

/* FTP Client Configuration */
#define NXD_FTP_CLIENT_SOURCE_PORT ${module.azure.nxd_ftp_client.source_port}

/* FTP Server Configuration */
#define  NX_FTP_SERVER_PRIORITY                                   ${config.azure.nxd_ftp_server.priority}
#define  NX_FTP_SERVER_TIME_SLICE                                 ${config.azure.nxd_ftp_server.time_slice}
#define  NX_FTP_MAX_CLIENTS                                       ${config.azure.nxd_ftp_server.max_clients}
#define  NX_FTP_CONTROL_WINDOW_SIZE                               ${config.azure.nxd_ftp_server.control_window_size}
#define  NX_FTP_DATA_WINDOW_SIZE                                  ${config.azure.nxd_ftp_server.data_window_size}
#define  NX_FTP_SERVER_TIMEOUT                                    (${config.azure.nxd_ftp_server.server_timeout} * NX_IP_PERIODIC_RATE)
#define  NX_FTP_USERNAME_SIZE                                     ${config.azure.nxd_ftp_server.username_size}
#define  NX_FTP_PASSWORD_SIZE                                     ${config.azure.nxd_ftp_server.password_size}
#define  NX_FTP_ACTIVITY_TIMEOUT                                  ${config.azure.nxd_ftp_server.activity_timeout}
#define  NX_FTP_SERVER_RETRY_SECONDS                              ${config.azure.nxd_ftp_server.retry_seconds}
#define  NX_FTP_SERVER_TRANSMIT_QUEUE_DEPTH                       ${config.azure.nxd_ftp_server.transmit_queue_depth}
#define  NX_FTP_SERVER_RETRY_MAX                                  ${config.azure.nxd_ftp_server.retry_max}
#define  NX_FTP_SERVER_RETRY_SHIFT                                ${config.azure.nxd_ftp_server.retry_shift}

/* SNMP Agent Configuration */
#define NX_SNMP_AGENT_THREAD_STACK_SIZE           (${config.azure.nxd_snmp_agent.stack_size})
#define NX_SNMP_AGENT_PRIORITY                    (${config.azure.nxd_snmp_agent.nxd_snmp_agent_priority})
#define NX_SNMP_TYPE_OF_SERVICE                   ${config.azure.nxd_snmp_agent.nxd_snmp_type_of_service}
#define NX_SNMP_FRAGMENT_OPTION                   ${config.azure.nxd_snmp_agent.nxd_snmp_fragment_option}
#define NX_SNMP_TIME_TO_LIVE                      (${config.azure.nxd_snmp_agent.nxd_snmp_time_to_live})
#define NX_SNMP_AGENT_TIMEOUT                     (${config.azure.nxd_snmp_agent.nxd_snmp_agent_timeout})
#define NX_SNMP_MAX_OCTET_STRING                  (${config.azure.nxd_snmp_agent.nxd_snmp_max_octet_string})
#define NX_SNMP_MAX_CONTEXT_STRING                (${config.azure.nxd_snmp_agent.nxd_snmp_max_context_string})
#define NX_SNMP_MAX_USER_NAME                     (${config.azure.nxd_snmp_agent.nxd_snmp_max_user_name})
#define NX_SNMP_MAX_SECURITY_KEY                  (${config.azure.nxd_snmp_agent.nxd_snmp_max_security_key})
#define NX_SNMP_PACKET_SIZE                       (${config.azure.nxd_snmp_agent.nxd_snmp_min_packet_size})
#define NX_SNMP_AGENT_PORT                        (${config.azure.nxd_snmp_agent.nxd_snmp_agent_port})
#define NX_SNMP_MANAGER_TRAP_PORT                 (${config.azure.nxd_snmp_agent.nxd_snmp_manager_trap_port})
#define NX_SNMP_MAX_TRAP_KEY                      (${config.azure.nxd_snmp_agent.nxd_snmp_max_trap_key})
${config.azure.nxd_snmp_agent.enable_v1}
${config.azure.nxd_snmp_agent.enable_v2}
${config.azure.nxd_snmp_agent.enable_v3}

/* POP3 Client Configuration */
#define NXD_POP3_CLIENT_MAIL_BUFFER_SIZE            (${config.azure.nxd_pop3_client.mail_buffer_size})
#define NXD_POP3_CLIENT_PACKET_TIMEOUT              (${config.azure.nxd_pop3_client.packet_time_out} * NX_IP_PERIODIC_RATE)
#define NXD_POP3_CLIENT_CONNECTION_TIMEOUT          (${config.azure.nxd_pop3_client.connection_time_out} * NX_IP_PERIODIC_RATE)
#define NXD_POP3_CLIENT_DISCONNECT_TIMEOUT          (${config.azure.nxd_pop3_client.disconnect_time_out} * NX_IP_PERIODIC_RATE)
#define NX_POP3_TCP_SOCKET_SEND_WAIT               (${config.azure.nxd_pop3_client.tcp_socket_wait} * NX_IP_PERIODIC_RATE)
#define NX_POP3_SERVER_REPLY_TIMEOUT               (${config.azure.nxd_pop3_client.server_reply_timeout} * NX_IP_PERIODIC_RATE)
#define NXD_POP3_CLIENT_TCP_WINDOW_SIZE             (${config.azure.nxd_pop3_client.client_tcp_window_size})
#define NX_POP3_MAX_USERNAME                       (${config.azure.nxd_pop3_client.max_username})
#define NX_POP3_MAX_PASSWORD                       (${config.azure.nxd_pop3_client.max_password})

#ifdef __cplusplus
}
#endif
        </content>
    </config>
    <module config="config.azure.nxd" display="Networking|Azure RTOS NetX Duo Common" id="module.azure.nxd.common" common="1" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/">
        <requires id="module.azure.nxd.common.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <provides interface="interface.azure.nxd.common" />
        <includes>
#include "nx_api.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd.ip.name} Azure RTOS NetX Duo IP Instance" id="module.azure.nxd.ip" common="100" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/chapter3">
        <constraint display="IP instances must have unique names">
            "${interface.azure.nxd.ip.${module.azure.nxd.ip.name}}" === "1"
        </constraint>
        <constraint display="ARP cache size in bytes must be divisible by 52 (size of NX_ARP)">
            (("${module.azure.nxd.ip.arp_cache_size_units}" === "module.azure.nxd.ip.arp_cache_size_units.bytes") &amp;&amp; (("${module.azure.nxd.ip.arp_cache_size}" % 52) == 0)) || ("${module.azure.nxd.ip.arp_cache_size_units}" === "module.azure.nxd.ip.arp_cache_size_units.entries")
        </constraint>
        <constraint id="module.azure.nxd.ip.ethconstraint" display="The packet size of each packet in the packet pool must be at least 32 bytes larger than the Ethernet buffer size.">
            <!-- The Ethernet buffer size is calculated using the following formula: Math.ceil((IP MTU + Ethernet Header Size (14) + Padding Bytes (2)) / 32) * 32 -->
            <!-- The extra 32 bytes is required so that the driver can ensure that the start of each packet is aligned to 32 bytes. -->
            (!testExists("${module.azure.nxd.ip.requires.nxd.driver::module.middleware.rm_netxduo_ether.name}") || ((${module.azure.nxd.ip.requires.nxd.packet_pool::module.azure.nxd.packet_pool.packet_size} - (Math.ceil(((isNaN(parseInt("${module.azure.nxd.ip.requires.nxd.driver::module.middleware.rm_netxduo_ether.ip_mtu}")) ? 0 : parseInt("${module.azure.nxd.ip.requires.nxd.driver::module.middleware.rm_netxduo_ether.ip_mtu}")) + 14 + 2) / 32) * 32)) &gt;= 32))
        </constraint>
        <constraint display="NetX Duo IP Instance Requires a NetX Duo Network Driver.">
            "${interface.azure.nxd.driver.${module.azure.nxd.ip.requires.nxd.driver::module.middleware.rm_netxduo_ether.name}}" === "1" || "${interface.middleware.rm_netxduo_wifi.${module.azure.nxd.ip.requires.nxd.driver::module.middleware.rm_netxduo_wifi.ip_name}}" === "1" || "${interface.azure.nxd.driver.${module.azure.nxd.ip.requires.nxd.driver::module.azure.ewf.netx.name}}" === "1"
        </constraint>
        <constraint display="A heap is required to use rand and srand. Please add a heap under BSP|RA Common|Heap Size or configure NetX Duo to use a different random number generator under Common|Random Number Generator and Common|Seed Random Number Generator.">
            <!-- The heap is only required when using rand and srand from stdlib. If hardware accelerated NetX secure crypto is added, then rand and srand are overridden to use hardware and do not require a heap. -->
            ("${config.bsp.common.heap}" &gt; 0) || ("${config.azure.nxd_src.rand}" != "rand" &amp;&amp; "${config.azure.nxd_src.srand}" != "srand") || ("${interface.middleware.rm_netx_secure_crypto}" === "1" &amp;&amp; "${config.middleware.rm_netx_secure_crypto.trng}" == "config.middleware.rm_netx_secure_crypto.trng.enabled")
        </constraint>
        <constraint display="IPv6 not supported by WiFi, disable IPv6 support in Common|NetX Duo IPV6 Support">
            !testExists("${interface.middleware.rm_netxduo_wifi.${module.azure.nxd.ip.name}}") || ("${config.azure.nxd_src.feature_nx_ipv6}" === "config.azure.nxd_src.feature_nx_ipv6.disabled")
        </constraint>
        <requires id="module.azure.nxd.ip.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd.ip.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />
        <requires id="module.azure.nxd.ip.requires.nxd.driver" interface="interface.azure.nxd.driver" display="Add NetX Duo Network Driver">
            <override property="module.middleware.rm_netxduo_wifi.ip_name" value="${module.azure.nxd.ip.name}"/>
        </requires>
        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nxd.ip" />
        <provides interface="interface.azure.nxd.ip.${module.azure.nxd.ip.name}" />
        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd.ip" />
        <provides interface="interface.azure.nxd.ip.${module.azure.nxd.ip.name}" />

        <property default="g_ip${_instance}" display="Name" id="module.azure.nxd.ip.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd.ip.name}")</constraint>
        </property>
        <property default="192.168.0.2" display="IPv4 Address" id="module.azure.nxd.ip.address">
            <constraint display="Must be a valid IPv4 address (nnn.nnn.nnn.nnn)">
                testIPv4("${module.azure.nxd.ip.address}".replace(/,/g,"."))
            </constraint>
            <export>"${module.azure.nxd.ip.address}".replace(/\./g,",")</export>            <!-- replace all dots with commas on export -->
        </property>
        <property default="255.255.255.0" display="Subnet Mask" id="module.azure.nxd.ip.subnet_mask">
            <constraint display="Must be a valid IPv4 address (nnn.nnn.nnn.nnn)">
                testIPv4("${module.azure.nxd.ip.subnet_mask}".replace(/,/g,"."))
            </constraint>
            <export>"${module.azure.nxd.ip.subnet_mask}".replace(/\./g,",")</export>            <!-- replace all dots with commas on export -->
        </property>
        <property default="0.0.0.0" display="Default Gateway Address" id="module.azure.nxd.ip.gateway_address">
            <constraint display="Must be a valid IPv4 address (nnn.nnn.nnn.nnn)">
                testIPv4("${module.azure.nxd.ip.gateway_address}".replace(/,/g,"."))
            </constraint>
            <export>"${module.azure.nxd.ip.gateway_address}".replace(/\./g,",")</export>            <!-- replace all dots with commas on export -->
        </property>
        <property default="2001:0:0:0:0:0:0:1" display="IPv6 Global Address" id="module.azure.nxd.ipv6.address_global">
            <constraint display="Must be valid IPv6 address (hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh)">testIPv6("${module.azure.nxd.ipv6.address_global}".replace(/0x/gi, "").replace(/,/g,":"))</constraint>
            <!-- we accommodate old property values using 0x prefix on export -->
            <export>eval("" +
            "var input = '${module.azure.nxd.ipv6.address_global}'.replace(/(?:0x)?([0-9a-f]+)/gi, '0x$1');"+
            "var ary = input.split(':');"+
            "var output = 'NXD_ADDRESS ${module.azure.nxd.ip.name}_ipv6_global_address = {\\n';"+
            "output += '    .nxd_ip_version = NX_IP_VERSION_V6,\\n';"+
            "output += '    .nxd_ip_address.v6 = {\\n';"+
            "output += '        ((' + ary[0] + ' &lt;&lt; 16) | ' + ary[1] + '),\\n';"+
            "output += '        ((' + ary[2] + ' &lt;&lt; 16) | ' + ary[3] + '),\\n';"+
            "output += '        ((' + ary[4] + ' &lt;&lt; 16) | ' + ary[5] + '),\\n';"+
            "output += '        ((' + ary[6] + ' &lt;&lt; 16) | ' + ary[7] + ')\\n';"+
            "output += '    }\\n';"+
            "output += '};\\n';"+
            "")</export>
        </property>
        <property default="0:0:0:0:0:0:0:0" display="IPv6 Link Local Address (All zeros means use MAC address)" id="module.azure.nxd.ipv6.address_local">
            <constraint display="Must be valid IPv6 address (hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh)">testIPv6("${module.azure.nxd.ipv6.address_local}".replace(/0x/gi, "").replace(/,/g,":"))</constraint>
            <!-- we accommodate old property values using 0x prefix on export -->
            <export>eval("" +
            "var input = '${module.azure.nxd.ipv6.address_local}'.replace(/(?:0x)?([0-9a-f]+)/gi, '0x$1');"+
            "var ary = input.split(':');"+
            "var output = 'NXD_ADDRESS ${module.azure.nxd.ip.name}_ipv6_link_local_address = {\\n';"+
            "output += '    .nxd_ip_version = NX_IP_VERSION_V6,\\n';"+
            "output += '    .nxd_ip_address.v6 = {\\n';"+
            "output += '        ((' + ary[0] + ' &lt;&lt; 16) | ' + ary[1] + '),\\n';"+
            "output += '        ((' + ary[2] + ' &lt;&lt; 16) | ' + ary[3] + '),\\n';"+
            "output += '        ((' + ary[4] + ' &lt;&lt; 16) | ' + ary[5] + '),\\n';"+
            "output += '        ((' + ary[6] + ' &lt;&lt; 16) | ' + ary[7] + ')\\n';"+
            "output += '    }\\n';"+
            "output += '};\\n';"+
            "")</export>
        </property>
        <property default="2048" display="IP Helper Thread Stack Size (bytes)" id="module.azure.nxd.ip.stack_size">
            <constraint display="Value must be a non-negative integer and divisible by 8">testInteger("${module.azure.nxd.ip.stack_size}")  &amp;&amp; (("${module.azure.nxd.ip.stack_size}" % 8) == 0)</constraint>
        </property>
        <property default="3" display="IP Helper Thread Priority" id="module.azure.nxd.ip.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.azure.nxd.ip.priority}")  &amp;&amp; ("${module.azure.nxd.ip.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="module.azure.nxd.ip.arp_cache_size_units.bytes" display="ARP cache storage units" id="module.azure.nxd.ip.arp_cache_size_units">
            <option display="Bytes" id="module.azure.nxd.ip.arp_cache_size_units.bytes" value="1"/>
            <option display="Entries" id="module.azure.nxd.ip.arp_cache_size_units.entries" value="sizeof(NX_ARP)"/>
        </property>
        <property default="520" display="    ARP cache size (in storage units)" id="module.azure.nxd.ip.arp_cache_size">
        </property>
        <property default="" id="module.azure.nxd.ip.name_upper">
            <export>"${module.azure.nxd.ip.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd.ip.name_upper}_ADDRESS      (IP_ADDRESS(${module.azure.nxd.ip.address}))
#define ${module.azure.nxd.ip.name_upper}_SUBNET_MASK     (IP_ADDRESS(${module.azure.nxd.ip.subnet_mask}))
#define ${module.azure.nxd.ip.name_upper}_GATEWAY_ADDRESS (IP_ADDRESS(${module.azure.nxd.ip.gateway_address}))
#define ${module.azure.nxd.ip.name_upper}_TASK_STACK_SIZE (${module.azure.nxd.ip.stack_size})
#define ${module.azure.nxd.ip.name_upper}_TASK_PRIORITY   (${module.azure.nxd.ip.priority})
#define ${module.azure.nxd.ip.name_upper}_ARP_CACHE_SIZE (${module.azure.nxd.ip.arp_cache_size} * ${module.azure.nxd.ip.arp_cache_size_units})

#define RA_NOT_DEFINED 0xFFFFFFFF
#if (RA_NOT_DEFINED != ${module.azure.nxd.ip.requires.nxd.driver::module.middleware.rm_netxduo_ether.name})
#define ${module.azure.nxd.ip.name_upper}_NETWORK_DRIVER ${module.azure.nxd.ip.requires.nxd.driver::module.middleware.rm_netxduo_ether.name}
#elif (RA_NOT_DEFINED != ${module.azure.nxd.ip.requires.nxd.driver::module.middleware.rm_netxduo_wifi.ip_name})
#define ${module.azure.nxd.ip.name_upper}_NETWORK_DRIVER rm_netxduo_wifi
#else
#define ${module.azure.nxd.ip.name_upper}_NETWORK_DRIVER nx_driver_ewf_adapter
#endif
#undef RA_NOT_DEFINED

void ${module.azure.nxd.ip.name}_quick_setup();
void ${module.azure.nxd.ip.name}_error_handler(UINT status);

#ifndef NX_DISABLE_IPV6
extern NXD_ADDRESS ${module.azure.nxd.ip.name}_ipv6_global_address;
extern NXD_ADDRESS ${module.azure.nxd.ip.name}_ipv6_link_local_address;
#endif
        </header>
        <declarations>
#ifndef NX_DISABLE_IPV6
${module.azure.nxd.ipv6.address_global}
${module.azure.nxd.ipv6.address_local}
#endif
        </declarations>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd.packet_pool.name} Azure RTOS NetX Duo Packet Pool Instance" id="module.azure.nxd.packet_pool" common="100" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/chapter3">
        <constraint display="IP instances must have unique names">
            "${interface.azure.nxd.packet_pool.${module.azure.nxd.packet_pool.name}}" === "1"
        </constraint>
        <requires id="module.azure.nxd.packet_pool.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nxd.packet_pool" />
        <provides interface="interface.azure.nxd.packet_pool.${module.azure.nxd.packet_pool.name}" />
        <!-- NetX Duo Only -->
        <provides interface="interface.azure.nxd.packet_pool" />
        <provides interface="interface.azure.nxd.packet_pool.${module.azure.nxd.packet_pool.name}" />
        <property default="g_packet_pool${_instance}" display="Name" id="module.azure.nxd.packet_pool.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd.packet_pool.name}")</constraint>
        </property>
        <property default="1568" display="Packet Size (bytes)" id="module.azure.nxd.packet_pool.packet_size">
            <constraint display="Value must be a non-negative integer and divisible by 4">testInteger("${module.azure.nxd.packet_pool.packet_size}")  &amp;&amp; (("${module.azure.nxd.packet_pool.packet_size}" % 4) == 0) &amp;&amp; ("${module.azure.nxd.packet_pool.packet_size}" &gt; 0)</constraint>
        </property>
        <property default="16" display="Number of Packets in Pool" id="module.azure.nxd.packet_pool.number_of_packets">
            <constraint display="Value must be a non-negative integer">testInteger("${module.azure.nxd.packet_pool.number_of_packets}") &amp;&amp; ("${module.azure.nxd.packet_pool.number_of_packets}" &gt; 0)</constraint>
        </property>
        <property default="" id="module.azure.nxd.packet_pool.name_upper">
            <export>"${module.azure.nxd.packet_pool.name}".toUpperCase()</export>
        </property>
        <memory accumulator="RAM_NS_BUFFER_LENGTH">
            <!-- Allocate non-secure memory for flat projects, which use secure memory by default. The Ethernet peripheral is always non-secure, and it accesses the descriptors directly, so the descriptors must be in non-secure memory. -->
            ("${_project.nonsecure}" === "1") ? 0 : (${module.azure.nxd.packet_pool.number_of_packets} * (${module.azure.nxd.packet_pool.packet_size} + 88))
        </memory>
        <header>
            #define ${module.azure.nxd.packet_pool.name_upper}_PACKET_SIZE (${module.azure.nxd.packet_pool.packet_size})
            #define ${module.azure.nxd.packet_pool.name_upper}_PACKET_NUM  (${module.azure.nxd.packet_pool.number_of_packets})
            extern NX_PACKET_POOL ${module.azure.nxd.packet_pool.name};
            extern uint8_t ${module.azure.nxd.packet_pool.name}_pool_memory[(${module.azure.nxd.packet_pool.name_upper}_PACKET_NUM * (${module.azure.nxd.packet_pool.name_upper}_PACKET_SIZE + sizeof(NX_PACKET)))];

            /* Quick Setup for ${module.azure.nxd.packet_pool.name} instance. */
            void ${module.azure.nxd.packet_pool.name}_quick_setup();
        </header>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_dhcp_client.name} Azure RTOS NetX Duo DHCP IPv4 Client" id="module.azure.nxd_dhcp_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-dhcp-client/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_dhcp_client.${module.azure.nxd_dhcp_client.name}}" === "1"
        </constraint>
        <!-- <constraint display="NetX Duo Source module should be included and 'Maximum number of network interfaces for DHCP client' should be less than or equal to number of physical interfaces">
          "${config.azure.nxd_dhcp_client.max_records}" === "1" || ("${interface.azure.nxd_src}" === "1" &amp;&amp; "${config.azure.nxd_src.max_physical_interfaces}" &gt;= "${config.azure.nxd_dhcp_client.max_records}")
        </constraint> -->
        <constraint display="NetX Duo DHCP IPv4 Client requires a NetX Duo Packet Pool.">
            "${interface.azure.nxd.packet_pool.${module.azure.nxd_dhcp_client.requires.nxd.packet_pool::module.azure.nxd.packet_pool.name}}" === "1"
        </constraint>
        <constraint display="Software DHCP not supported when using NetX Duo over WiFi. DHCP is directly enabled on the WiFi hardware instead.">
            !testExists("${interface.middleware.rm_netxduo_wifi.${module.azure.nxd_dhcp_client.requires.nxd.ip::module.azure.nxd.ip.name}}")
        </constraint>
        <constraint display="The packet size must be large enough to receive up to 576 bytes plus 20 bytes for the IP header and plus 16 bytes for the ethernet header.">
           ${module.azure.nxd_dhcp_client.requires.nxd.packet_pool::module.azure.nxd.packet_pool.packet_size} &gt;= (576 + 20 + 14 + 2)
        </constraint>
        <requires id="module.azure.nxd_dhcp_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_dhcp_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nxd.ip.address" value="0.0.0.0" />
        </requires>
        <requires id="module.azure.nxd_dhcp_client.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />
        <provides interface="interface.azure.nxd_dhcp_client" />
        <provides interface="interface.azure.nxd_dhcp_client.${module.azure.nxd_dhcp_client.name}" />
        <property default="g_dhcp_client${_instance}" display="Name" id="module.azure.nxd_dhcp_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_dhcp_client.name}")</constraint>
        </property>
        <header>
void ${module.azure.nxd_dhcp_client.name}_quick_setup();
        </header>
        <includes>
#include "nxd_dhcp_client.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_dhcpv6_client.name} Azure RTOS NetX Duo DHCP IPv6 Client" id="module.azure.nxd_dhcpv6_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-dhcpv6-client/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_dhcpv6_client.${module.azure.nxd_dhcpv6_client.name}}" === "1"
        </constraint>
        <constraint display="Software DHCP not supported when using NetX Duo over WiFi. DHCP is directly enabled on the WiFi hardware instead.">
            !testExists("${interface.middleware.rm_netxduo_wifi.${module.azure.nxd_dhcpv6_client.requires.nxd.ip::module.azure.nxd.ip.name}}")
        </constraint>
        <constraint display="Enable IPv6 support in NetX Duo source">
            !(testExists("${interface.azure.nxd_src}")) || "${config.azure.nxd_src.feature_nx_ipv6}" === "config.azure.nxd_src.feature_nx_ipv6.enabled"
        </constraint>
        <requires id="module.azure.nxd_dhcpv6_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_dhcpv6_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ipv6.address_global" value="0:0:0:0:0:0:0:0" />
            <override property="module.azure.nx.ip.udp" value="module.azure.nx.ip.udp.enable" />
        </requires>
        <requires id="module.azure.nxd_dhcpv6_client.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />
        <!-- NetX does not suport DHCPv6, but doing this for consistency with other XMLs -->
        <provides interface="interface.azure.nx_dhcpv6_client" />
        <provides interface="interface.azure.nx_dhcpv6_client.${module.azure.nxd_dhcpv6_client.name}" />
        <!-- NetX Duo Only -->
        <provides interface="interface.azure.nxd_dhcpv6_client" />
        <provides interface="interface.azure.nxd_dhcpv6_client.${module.azure.nxd_dhcpv6_client.name}" />
        <property default="g_dhcpv6_client${_instance}" display="Name" id="module.azure.nxd_dhcpv6_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_dhcpv6_client.name}")</constraint>
        </property>
        <property default="4096" display="Internal thread stack size (bytes)" id="module.azure.nxd_dhcpv6_client.stack_size">
            <constraint display="Value must be a non-negative integer and divisible by 8">
                testInteger("${module.azure.nxd_dhcpv6_client.stack_size}")  &amp;&amp; (("${module.azure.nxd_dhcpv6_client.stack_size}" % 8) == 0)
            </constraint>
        </property>
        <property default="" id="module.azure.nxd_dhcpv6_client.name_upper">
            <export>"${module.azure.nxd_dhcpv6_client.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_dhcpv6_client.name_upper}_TASK_STACK_SIZE (${module.azure.nxd_dhcpv6_client.stack_size})

void ${module.azure.nxd_dhcpv6_client.name}_quick_setup();
        </header>
        <includes>
#include "nxd_dhcpv6_client.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd.http_client.name} Azure RTOS NetX Duo HTTP Client" id="module.azure.nxd.http_client" common="100" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-http/chapter1">
        <requires id="module.azure.nxd.http_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd.http_client.requires.nx.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP instance" />
        <property default="g_http_client${_instance}" display="Name" id="module.azure.nxd.http_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd.http_client.name}")</constraint>
        </property>
        <property default="1500" display="TCP Window Size (bytes)" id="module.azure.nxd.http_client.window_size">
            <constraint display="Value must be a non-negative integer and divisible by 4">testInteger("${module.azure.nxd.http_client.window_size}")  &amp;&amp; (("${module.azure.nxd.http_client.window_size}" % 4) == 0) &amp;&amp; ("${module.azure.nxd.http_client.window_size}" &gt; 0)</constraint>
        </property>
        <property default="" id="module.azure.nxd.http_client.name_upper">
            <export>"${module.azure.nxd.http_client.name}".toUpperCase()</export>
        </property>
        <header>
void ${module.azure.nxd.http_client.name}_quick_setup();
#define ${module.azure.nxd.http_client.name_upper}_WINDOW_SIZE (${module.azure.nxd.http_client.window_size})
        </header>
        <includes>
#include "nxd_http_client.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_dns_client.name} Azure RTOS NetX Duo DNS Client" id="module.azure.nxd_dns_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-dns/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_dns_client.${module.azure.nxd_dns_client.name}}" === "1"
        </constraint>
        <constraint display="NetX Duo DNS Client requires a NetX Duo Packet Pool.">
            "${interface.azure.nxd.packet_pool.${module.azure.nxd_dhcp_client.requires.nxd.packet_pool::module.azure.nxd.packet_pool.name}}" === "1"
        </constraint>
        <requires id="module.azure.nxd_dns_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_dns_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.udp" value="module.azure.nx.ip.udp.enable" />
        </requires>
        <!-- Note the nxd_dhcp_client in the ID. This cannot be changed or else backward compatibility will be broken. -->
        <requires id="module.azure.nxd_dhcp_client.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />

        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nxd_dns_client" />
        <provides interface="interface.azure.nxd_dns_client.${module.azure.nxd_dns_client.name}" />
        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_dns_client" />
        <provides interface="interface.azure.nxd_dns_client.${module.azure.nxd_dns_client.name}" />

        <property default="g_dns${_instance}" display="Name" id="module.azure.nxd_dns_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_dns_client.name}")</constraint>
        </property>
        <header>
void ${module.azure.nxd_dns_client.name}_quick_setup();
        </header>
        <includes>
#include "nxd_dns.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_telnet_client.name} Azure RTOS NetX Duo Telnet Client" id="module.azure.nxd_telnet_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-telnet/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_telnet_client.${module.azure.nxd_telnet_client.name}}" === "1"
        </constraint>
        <requires id="module.azure.nxd_telnet_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_telnet_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.tcp" value="module.azure.nx.ip.tcp.enable" />
        </requires>
        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nxd_telnet_client" />
        <provides interface="interface.azure.nxd_telnet_client.${module.azure.nxd_telnet_client.name}" />
        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_telnet_client" />
        <provides interface="interface.azure.nxd_telnet_client.${module.azure.nxd_telnet_client.name}" />
        <property default="g_telnet_client${_instance}" display="Name" id="module.azure.nxd_telnet_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_telnet_client.name}")</constraint>
        </property>
        <property default="1024" display="TCP Socket Window Size (bytes)" id="module.azure.nxd_telnet_client.window_size">
            <constraint display="Value must be a non-negative integer">testInteger("${module.azure.nxd_telnet_client.window_size}")  &amp;&amp; ("${module.azure.nxd_telnet_client.window_size}" &gt; 0)</constraint>
        </property>
        <property default="" id="module.azure.nxd_telnet_client.name_upper">
            <export>"${module.azure.nxd_telnet_client.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_telnet_client.name_upper}_WINDOW_SIZE (${module.azure.nxd_telnet_client.window_size})

void ${module.azure.nxd_telnet_client.name}_quick_setup();
        </header>
        <includes>
#include "nxd_telnet_client.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_auto_ip.name} Azure RTOS NetX Duo Auto IP" id="module.azure.nxd_auto_ip" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-auto-ip/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_auto_ip.${module.azure.nxd_auto_ip.name}}" === "1"
        </constraint>
        <requires id="module.azure.nxd_auto_ip.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_auto_ip.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.address" value="0.0.0.0" />
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
        </requires>

        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nxd_auto_ip" />
        <provides interface="interface.azure.nxd_auto_ip.${module.azure.nxd_auto_ip.name}" />
        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_auto_ip" />
        <provides interface="interface.azure.nxd_auto_ip.${module.azure.nxd_auto_ip.name}" />

        <property default="g_auto_ip${_instance}" display="Name" id="module.azure.nxd_auto_ip.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_auto_ip.name}")
            </constraint>
        </property>
        <property default="2048" display="Internal thread stack size (bytes)" id="module.azure.nxd_auto_ip.stack_size">
            <constraint display="Value must be a non-negative integer and divisible by 8">
                testInteger("${module.azure.nxd_auto_ip.stack_size}")  &amp;&amp; (("${module.azure.nxd_auto_ip.stack_size}" % 8) == 0)
            </constraint>
        </property>
        <property default="3" display="Internal thread priority" id="module.azure.nxd_auto_ip.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.azure.nxd_auto_ip.priority}")  &amp;&amp; ("${module.azure.nxd_auto_ip.priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="" id="module.azure.nxd_auto_ip.name_upper">
            <export>"${module.azure.nxd_auto_ip.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_auto_ip.name_upper}_TASK_STACK_SIZE (${module.azure.nxd_auto_ip.stack_size})
#define ${module.azure.nxd_auto_ip.name_upper}_TASK_PRIORITY   (${module.azure.nxd_auto_ip.priority})

void ${module.azure.nxd_auto_ip.name}_quick_setup();
        </header>
        <includes>
#include "nx_auto_ip.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_web_http_client.name} Azure RTOS NetX Duo Web HTTP/HTTPS Client" id="module.azure.nxd_web_http_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-web-http/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_web_http_client.${module.azure.nxd_web_http_client.name}}" === "1"
        </constraint>
        <!-- Highlight Error when HTTPS Support is disabled and NetX Secure block is added -->
        <constraint display ="Enable HTTPS Support">
			("${config.azure.nxd_web_http_client.secure}" === "config.azure.nxd_web_http_client.secure.enable") || ("${interface.nx_secure}" &lt; "1")
        </constraint>
        <!-- Highlight Error when HTTPS Support is enabled and NetX Secure block is missing -->
        <constraint display ="Requires NetX Duo Secure">
			("${config.azure.nxd_web_http_client.secure}" === "config.azure.nxd_web_http_client.secure.disable") || ("${interface.nx_secure}" &gt;= "1")
        </constraint>
        <requires id="module.azure.nxd_web_http_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_web_http_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.tcp" value="module.azure.nx.ip.tcp.enable" />
        </requires>
        <requires id="module.azure.nxd_web_http_client.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />
        <requires id="module.azure.nxd_web_http_client.requires.nx_secure" interface="interface.nx_secure" display="Add NetX Duo Secure [Optional]" find="false" />

        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_web_http_client" />
        <provides interface="interface.azure.nxd_web_http_client.${module.azure.nxd_web_http_client.name}" />

        <property default="g_web_http_client${_instance}" display="Name" id="module.azure.nxd_web_http_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_web_http_client.name}")</constraint>
        </property>
        <property default="1024" display="TCP socket window size (bytes)" id="module.azure.nxd_web_http_client.window_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.azure.nxd_web_http_client.window_size}")  &amp;&amp; ("${module.azure.nxd_web_http_client.window_size}" &gt; 0)
            </constraint>
        </property>
        <property default="" id="module.azure.nxd_web_http_client.name_upper">
            <export>"${module.azure.nxd_web_http_client.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_web_http_client.name_upper}_WINDOW_SIZE (${module.azure.nxd_web_http_client.window_size})

void ${module.azure.nxd_web_http_client.name}_quick_setup();
        </header>
        <includes>
#include "nx_web_http_client.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_smtp_client.name} Azure RTOS NetX Duo SMTP Client" id="module.azure.nxd_smtp_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-smtp-client/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_smtp_client.${module.azure.nxd_smtp_client.name}}" === "1"
        </constraint>
        <requires id="module.azure.nxd_smtp_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_smtp_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.tcp" value="module.azure.nx.ip.tcp.enable" />
        </requires>
        <requires id="module.azure.nxd_smtp_client.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />

        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nx_smtp_client" />
        <provides interface="interface.azure.nx_smtp_client.${module.azure.nxd_smtp_client.name}" />
        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_smtp_client" />
        <provides interface="interface.azure.nxd_smtp_client.${module.azure.nxd_smtp_client.name}" />

        <property default="g_smtp_client${_instance}" display="Name" id="module.azure.nxd_smtp_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_smtp_client.name}")
            </constraint>
        </property>
        <property default="module.azure.nxd_smtp_client.address_type.ipv6" display="Use server address type" id="module.azure.nxd_smtp_client.address_type">
            <option display="IPv4" id="module.azure.nxd_smtp_client.address_type.ipv4" value="0"/>
            <option display="IPv6" id="module.azure.nxd_smtp_client.address_type.ipv6" value="1"/>
        </property>
        <property default="192.168.0.2" display="Server IPv4 Address" id="module.azure.nxd_smtp_client.server_address_ipv4">
            <constraint display="Must be a valid IPv4 address (nnn.nnn.nnn.nnn)">
                testIPv4("${module.azure.nxd_smtp_client.server_address_ipv4}".replace(/,/g,"."))
            </constraint>
            <export>"${module.azure.nxd_smtp_client.server_address_ipv4}".replace(/\./g,",")</export>            <!-- replace all dots with commas on export -->
        </property>
        <property default="2001:0:0:0:0:0:0:1" display="Server IPv6 Address" id="module.azure.nxd_smtp_client.server_address_ipv6">
            <constraint display="Must be valid IPv6 address (hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh)">testIPv6("${module.azure.nxd_smtp_client.server_address_ipv6}".replace(/0x/gi, "").replace(/,/g,":"))</constraint>
            <!-- we accommodate old property values using 0x prefix on export -->
            <export>eval("" +
            "var input = '${module.azure.nxd_smtp_client.server_address_ipv6}'.replace(/(?:0x)?([0-9a-f]+)/gi, '0x$1');"+
            "var ary = input.split(':');"+
            "var output = '#define ';"+
            "output += '${module.azure.nxd_smtp_client.name}'.toUpperCase();"+
            "output += '_GET_ADDRESS_IPV6(ipv6) do { \\\\\\n';"+
            "output += '    ipv6.nxd_ip_version = NX_IP_VERSION_V6;\\\\\\n';"+
            "output += '    ipv6.nxd_ip_address.v6[0] = (((uint32_t)' + ary[0] + ' &lt;&lt; 16) &amp; 0xFFFF0000) | ((uint32_t)' + ary[1] + ' &amp; 0x0000FFFF);\\\\\\n';"+
            "output += '    ipv6.nxd_ip_address.v6[1] = (((uint32_t)' + ary[2] + ' &lt;&lt; 16) &amp; 0xFFFF0000) | ((uint32_t)' + ary[3] + ' &amp; 0x0000FFFF);\\\\\\n';"+
            "output += '    ipv6.nxd_ip_address.v6[2] = (((uint32_t)' + ary[4] + ' &lt;&lt; 16) &amp; 0xFFFF0000) | ((uint32_t)' + ary[5] + ' &amp; 0x0000FFFF);\\\\\\n';"+
            "output += '    ipv6.nxd_ip_address.v6[3] = (((uint32_t)' + ary[6] + ' &lt;&lt; 16) &amp; 0xFFFF0000) | ((uint32_t)' + ary[7] + ' &amp; 0x0000FFFF);\\\\\\n';"+
            "output += '  } while(0);\\n';"+
            "")</export>
        </property>
        <property default="25" display="Server Port" id="module.azure.nxd_smtp_client.server_port">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.azure.nxd_smtp_client.server_port}")  &amp;&amp; ("${module.azure.nxd_smtp_client.server_port}" &gt;= 0)
            </constraint>
        </property>
        <property default="username" display="Client Name" id="module.azure.nxd_smtp_client.client_name" />
        <property default="password" display="Client Password" id="module.azure.nxd_smtp_client.client_password" />
        <property default="username@domain.com" display="Client Address" id="module.azure.nxd_smtp_client.client_address" />
        <property default="domain.com" display="Client Domain" id="module.azure.nxd_smtp_client.client_domain" />
        <property default="module.azure.nxd_smtp_client.authentication_type.login" display="Authentication Type" id="module.azure.nxd_smtp_client.authentication_type">
            <option id="module.azure.nxd_smtp_client.authentication_type.none" display="None" value="NX_SMTP_CLIENT_AUTH_NONE" />
            <option id="module.azure.nxd_smtp_client.authentication_type.login" display="Login" value="NX_SMTP_CLIENT_AUTH_LOGIN" />
            <option id="module.azure.nxd_smtp_client.authentication_type.plain" display="Plain" value="NX_SMTP_CLIENT_AUTH_PLAIN" />
        </property>
        <property default="" id="module.azure.nxd_smtp_client.name_upper">
            <export>"${module.azure.nxd_smtp_client.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_smtp_client.name_upper}_ADDRESS_TYPE (${module.azure.nxd_smtp_client.address_type})
#define ${module.azure.nxd_smtp_client.name_upper}_ADDRESS_IPV4 (IP_ADDRESS(${module.azure.nxd_smtp_client.server_address_ipv4}))
${module.azure.nxd_smtp_client.server_address_ipv6}
#define ${module.azure.nxd_smtp_client.name_upper}_CLIENT_NAME ("${module.azure.nxd_smtp_client.client_name}")
#define ${module.azure.nxd_smtp_client.name_upper}_CLIENT_PASSWORD ("${module.azure.nxd_smtp_client.client_password}")
#define ${module.azure.nxd_smtp_client.name_upper}_CLIENT_ADDRESS ("${module.azure.nxd_smtp_client.client_address}")
#define ${module.azure.nxd_smtp_client.name_upper}_CLIENT_DOMAIN ("${module.azure.nxd_smtp_client.client_domain}")
#define ${module.azure.nxd_smtp_client.name_upper}_AUTHENTICATION_TYPE (${module.azure.nxd_smtp_client.authentication_type})
#define ${module.azure.nxd_smtp_client.name_upper}_SERVER_PORT (${module.azure.nxd_smtp_client.server_port})

void ${module.azure.nxd_smtp_client.name}_quick_setup();
        </header>
        <includes>
#include "nxd_smtp_client.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_dhcp_server.name} Azure RTOS NetX Duo DHCP IPv4 Server" id="module.azure.nxd_dhcp_server" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-dhcp-server/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_dhcp_server.${module.azure.nxd_dhcp_server.name}}" === "1"
        </constraint>
        <constraint display="DHCP Server not supported when using NetX Duo over WiFi.">
            !testExists("${interface.middleware.rm_netxduo_wifi.${module.azure.nxd_dhcp_server.requires.nxd.ip::module.azure.nxd.ip.name}}")
        </constraint>
        <requires id="module.azure.nxd_dhcp_server.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_dhcp_server.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.rarp" value="module.azure.nx.ip.rarp.disable" />
            <override property="module.azure.nx.ip.udp" value="module.azure.nx.ip.udp.enable" />
        </requires>
        <requires id="module.azure.nxd_dhcp_server.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />

        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nx_dhcp_server" />
        <provides interface="interface.azure.nx_dhcp_server.${module.azure.nxd_dhcp_server.name}" />
        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_dhcp_server" />
        <provides interface="interface.azure.nxd_dhcp_server.${module.azure.nxd_dhcp_server.name}" />

        <property default="g_dhcp_server${_instance}" display="Name" id="module.azure.nxd_dhcp_server.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_dhcp_server.name}")
            </constraint>
        </property>
        <property default="4096" display="Internal thread stack size (bytes)" id="module.azure.nxd_dhcp_server.stack_size">
            <constraint display="Value must be a non-negative integer and divisible by 8">
                testInteger("${module.azure.nxd_dhcp_server.stack_size}")  &amp;&amp; (("${module.azure.nxd_dhcp_server.stack_size}" % 8) == 0)
            </constraint>
        </property>
        <property default="" id="module.azure.nxd_dhcp_server.name_upper">
            <export>"${module.azure.nxd_dhcp_server.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_dhcp_server.name_upper}_TASK_STACK_SIZE (${module.azure.nxd_dhcp_server.stack_size})
void ${module.azure.nxd_dhcp_server.name}_quick_setup();
        </header>
        <includes>
#include "nxd_dhcp_server.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_dhcpv6_server.name} Azure RTOS NetX Duo DHCP IPv6 Server" id="module.azure.nxd_dhcpv6_server" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-dhcpv6-server/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_dhcpv6_server.${module.azure.nxd_dhcpv6_server.name}}" === "1"
        </constraint>
        <constraint display="DHCP Server not supported when using NetX Duo over WiFi.">
            !testExists("${interface.middleware.rm_netxduo_wifi.${module.azure.nxd_dhcpv6_server.requires.nxd.ip::module.azure.nxd.ip.name}}")
        </constraint>
        <requires id="module.azure.nxd_dhcpv6_server.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_dhcpv6_server.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.rarp" value="module.azure.nx.ip.rarp.disable" />
            <override property="module.azure.nx.ip.udp" value="module.azure.nx.ip.udp.enable" />
        </requires>
        <requires id="module.azure.nxd_dhcpv6_server.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />

        <!-- NetX does not suport DHCPv6, but doing this for consistency with other XMLs -->
        <provides interface="interface.azure.nx_dhcpv6_server" />
        <provides interface="interface.azure.nx_dhcpv6_server.${module.azure.nxd_dhcpv6_server.name}" />
        <!-- NetX Duo Only -->
        <provides interface="interface.azure.nxd_dhcpv6_server" />
        <provides interface="interface.azure.nxd_dhcpv6_server.${module.azure.nxd_dhcpv6_server.name}" />

        <property default="g_dhcpv6_server${_instance}" display="Name" id="module.azure.nxd_dhcpv6_server.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_dhcpv6_server.name}")
            </constraint>
        </property>
        <property default="4096" display="Internal thread stack size (bytes)" id="module.azure.nxd_dhcpv6_server.stack_size">
            <constraint display="Value must be a non-negative integer and divisible by 8">
                testInteger("${module.azure.nxd_dhcpv6_server.stack_size}")  &amp;&amp; (("${module.azure.nxd_dhcpv6_server.stack_size}" % 8) == 0)
            </constraint>
        </property>
        <property default="" id="module.azure.nxd_dhcpv6_server.name_upper">
            <export>"${module.azure.nxd_dhcpv6_server.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_dhcpv6_server.name_upper}_TASK_STACK_SIZE (${module.azure.nxd_dhcpv6_server.stack_size})
void ${module.azure.nxd_dhcpv6_server.name}_quick_setup();
        </header>
        <includes>
#include "nxd_dhcpv6_server.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_telnet_server_v2.name} Azure RTOS NetX Duo Telnet Server" id="module.azure.nxd_telnet_server_v2" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-telnet/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_telnet_server_v2.${module.azure.nxd_telnet_server_v2.name}}" === "1"
        </constraint>
        <constraint display="Telnet/TCP Server not supported when using NetX Duo over WiFi.">
            !testExists("${interface.middleware.rm_netxduo_wifi.${module.azure.nxd_telnet_server_v2.requires.nxd.ip::module.azure.nxd.ip.name}}")
        </constraint>
        <requires id="module.azure.nxd_telnet_server_v2.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_telnet_server_v2.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.tcp" value="module.azure.nx.ip.tcp.enable" />
        </requires>
        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nx_telnet_server_v2" />
        <provides interface="interface.azure.nx_telnet_server_v2.${module.azure.nxd_telnet_server_v2.name}" />
        <!-- NetX Duo Only -->
        <provides interface="interface.azure.nxd_telnet_server_v2" />
        <provides interface="interface.azure.nxd_telnet_server_v2.${module.azure.nxd_telnet_server_v2.name}" />
        <property default="g_telnet_server${_instance}" display="Name" id="module.azure.nxd_telnet_server_v2.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_telnet_server_v2.name}")</constraint>
        </property>
        <property default="2048" display="Thread Stack Size (bytes)" id="module.azure.nxd_telnet_server_v2.stack_size">
            <constraint display="Value must be a non-negative integer and divisible by 8">testInteger("${module.azure.nxd_telnet_server_v2.stack_size}")  &amp;&amp; (("${module.azure.nxd_telnet_server_v2.stack_size}" % 8) == 0)</constraint>
        </property>
        <property default="" id="module.azure.nxd_telnet_server_v2.name_upper">
            <export>"${module.azure.nxd_telnet_server_v2.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_telnet_server_v2.name_upper}_TASK_STACK_SIZE (${module.azure.nxd_telnet_server_v2.stack_size})
void ${module.azure.nxd_telnet_server_v2.name}_quick_setup();
        </header>
        <includes>
#include "nxd_telnet_server.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_sntp_client.name} Azure RTOS NetX Duo SNTP Client" id="module.azure.nxd_sntp_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-sntp-client/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_sntp_client.${module.azure.nxd_sntp_client.name}}" === "1"
        </constraint>
        <constraint display="Common|SNTP|Client|Maximum time adjustment allowed to local clock time (milliseconds) should be greater than Common|SNTP|Client|Starting poll interval for unicast update request (seconds) Note:Maximum time adjustment value is in milliseconds">
            ("${config.azure.nxd_sntp_client.max_time_adjustment}" &gt; ("${config.azure.nxd_sntp_client.unicast_poll_interval}")*1000 )
        </constraint>
        <requires id="module.azure.nxd_sntp_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_sntp_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.udp" value="module.azure.nx.ip.udp.enable" />
        </requires>
        <requires id="module.azure.nxd_sntp_client.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />

        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nx_sntp_client" />
        <provides interface="interface.azure.nx_sntp_client.${module.azure.nxd_sntp_client.name}" />
        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_sntp_client" />
        <provides interface="interface.azure.nxd_sntp_client.${module.azure.nxd_sntp_client.name}" />

        <property default="g_sntp_client${_instance}" display="Name" id="module.azure.nxd_sntp_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_sntp_client.name}")
            </constraint>
        </property>
        <property default="0" display="Index to SNTP Network Interface" id="module.azure.nxd_sntp_client.index_network_interface">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.azure.nxd_sntp_client.index_network_interface}")  &amp;&amp; ("${module.azure.nxd_sntp_client.index_network_interface}" &gt;= 0)
            </constraint>
        </property>
        <property default="" id="module.azure.nxd_sntp_client.name_upper">
            <export>"${module.azure.nxd_sntp_client.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_sntp_client.name_upper}_INDEX_NETWORK_INTERFACE  ${module.azure.nxd_sntp_client.index_network_interface}

void ${module.azure.nxd_sntp_client.name}_quick_setup();
        </header>
        <includes>
#include "nxd_sntp_client.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_tftp_client.name} Azure RTOS NetX Duo TFTP Client" id="module.azure.nxd_tftp_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-tftp/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_tftp_client.${module.azure.nxd_tftp_client.name}}" === "1"
        </constraint>
        <constraint display="The source port must be set to NX_ANY_PORT when using NetX Duo over WiFi.">
            "NX_ANY_PORT" == "${config.azure.nxd_tftp_client.source_port}" || !testExists("${interface.middleware.rm_netxduo_wifi.${module.azure.nxd_tftp_client.requires.nxd.ip::module.azure.nxd.ip.name}}")
        </constraint>
        <requires id="module.azure.nxd_tftp_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_tftp_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.udp" value="module.azure.nx.ip.udp.enable" />
        </requires>
        <requires id="module.azure.nxd_tftp_client.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />

        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nx_tftp_client" />
        <provides interface="interface.azure.nx_tftp_client.${module.azure.nxd_tftp_client.name}" />
        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_tftp_client" />
        <provides interface="interface.azure.nxd_tftp_client.${module.azure.nxd_tftp_client.name}" />

        <property default="g_tftp_client${_instance}" display="Name" id="module.azure.nxd_tftp_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_tftp_client.name}")</constraint>
        </property>
        <header>
void ${module.azure.nxd_tftp_client.name}_quick_setup();
        </header>
        <includes>
#include "nxd_tftp_client.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_mqtt_client.name} Azure RTOS NetX Duo MQTT Client" id="module.azure.nxd_mqtt_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-mqtt/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_mqtt_client.${module.azure.nxd_mqtt_client.name}}" === "1"
        </constraint>
        <constraint display ="Requires NetX Duo Secure">
			("${config.azure.nxd_mqtt_client.secure}" === "config.azure.nxd_mqtt_client.secure.disable") || ("${interface.nx_secure}" &gt;= "1")
        </constraint>

        <requires id="module.azure.nxd_mqtt_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_mqtt_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance" />
        <requires id="module.azure.nxd_mqtt_client.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />
        <requires id="module.azure.nxd_mqtt_client.requires.azure.nx_secure" interface="interface.nx_secure" display="Add NetX Duo Secure [Optional]" find="false" />

        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_mqtt_client" />
        <provides interface="interface.azure.nxd_mqtt_client.${module.azure.nxd_mqtt_client.name}" />

        <property default="g_mqtt_client${_instance}" display="Name" id="module.azure.nxd_mqtt_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_mqtt_client.name}")</constraint>
        </property>
        <property default="4096" display="Client Thread Stack Size" id="module.azure.nxd_mqtt_client.mqtt_stack_size">
            <constraint display="Value must be a non-negative integer and divisible by 4">
            testInteger("${module.azure.nxd_mqtt_client.mqtt_stack_size}")  &amp;&amp; (("${module.azure.nxd_mqtt_client.mqtt_stack_size}" % 4) == 0) &amp;&amp; ("${module.azure.nxd_mqtt_client.mqtt_stack_size}" &gt; 4)
            </constraint>
        </property>
        <property default="2" display="Client thread priority" id="module.azure.nxd_mqtt_client.mqtt_client_priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.azure.nxd_mqtt_client.mqtt_client_priority}")  &amp;&amp; ("${module.azure.nxd_mqtt_client.mqtt_client_priority}" &gt;= 0)
            </constraint>
        </property>
        <property default="" id="module.azure.nxd_mqtt_client.name_upper">
            <export>"${module.azure.nxd_mqtt_client.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_mqtt_client.name_upper}_TASK_STACK_SIZE (${module.azure.nxd_mqtt_client.mqtt_stack_size})
#define ${module.azure.nxd_mqtt_client.name_upper}_CLIENT_PRIORITY (${module.azure.nxd_mqtt_client.mqtt_client_priority})
void ${module.azure.nxd_mqtt_client.name}_quick_setup();
        </header>
        <includes>
#include "nxd_mqtt_client.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_nat.name} Azure RTOS NetX Duo NAT" id="module.azure.nxd_nat" version="1" visible="false" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-nat/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_nat.${module.azure.nxd_nat.name}}" === "1"
        </constraint>
        <constraint display="Enable NAT in NetxDuo Source">
            "${config.azure.nxd_src.natd}" === "config.azure.nxd_src.natd.enabled"
        </constraint>
        <constraint display="NAT requires 2 ports, change the maximum physical interfaces to 2 in NetxDuo Source">
          "${config.azure.nxd_src.max_physical_interfaces}" == 2
        </constraint>
        <requires id="module.azure.nxd_nat.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_nat.requires.nxd.ip_external" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance for Global Network">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.tcp" value="module.azure.nx.ip.tcp.enable" />
        </requires>
        <requires id="module.azure.nxd.ip.requires.nxd.driver" interface="interface.azure.nxd.driver" display="Add NetX Duo Network Driver for Private Network" />
        <!-- NetX & NetX Duo -->
        <provides interface="interface.azure.nx_nat" />
        <provides interface="interface.azure.nx_nat.${module.azure.nxd_nat.name}" />
        <!-- NetX Duo Only -->
        <provides interface="interface.azure.nxd_nat" />
        <provides interface="interface.azure.nxd_nat.${module.azure.nxd_nat.name}" />
        <property default="g_nat${_instance}" display="Name" id="module.azure.nxd_nat.name">
            <constraint display="Name must be a valid C symbol"> testSymbol("${module.azure.nxd_nat.name}") </constraint>
        </property>
        <property default="1024" display="Cache Size (bytes)" id="module.azure.nxd_nat.cache_size">
            <constraint display="Value must be a non-negative integer and divisible by 8"> testInteger("${module.azure.nxd_nat.cache_size}")  &amp;&amp; (("${module.azure.nxd_nat.cache_size}" % 8) == 0)</constraint>
        </property>
        <property default="192.168.0.2" display="Private IPv4 Address" id="module.azure.nxd_nat.private_address_ipv4">
            <constraint display="Must be a valid IPv4 address (nnn.nnn.nnn.nnn)">
                testIPv4("${module.azure.nxd_nat.private_address_ipv4}".replace(/,/g,"."))
            </constraint>
            <export>"${module.azure.nxd_nat.private_address_ipv4}".replace(/\./g,",")</export>            <!-- replace all dots with commas on export -->
        </property>
        <property default="255.255.255.0" display="Private IPv4 Netmask" id="module.azure.nxd_nat.private_address_netmask">
            <constraint display="Must be a valid IPv4 address (nnn.nnn.nnn.nnn)">
                testIPv4("${module.azure.nxd_nat.private_address_netmask}".replace(/,/g,"."))
            </constraint>
            <export>"${module.azure.nxd_nat.private_address_netmask}".replace(/\./g,",")</export>            <!-- replace all dots with commas on export -->
        </property>
        <property default="0" display="Global network interface index" id="module.azure.nxd_nat.global_interface_index">
            <constraint display="Value must be a non-negative integer">testInteger("${module.azure.nxd_nat.global_interface_index}")  &amp;&amp; ("${module.azure.nxd_nat.global_interface_index}" &gt;= 0 )</constraint>
        </property>
        <property default="" id="module.azure.nxd_nat.name_upper">
            <export>"${module.azure.nxd_nat.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_nat.name_upper}_CACHE_SIZE (${module.azure.nxd_nat.cache_size})
#define ${module.azure.nxd_nat.name_upper}_PRIVATE_ADDRESS_IPV4 (IP_ADDRESS(${module.azure.nxd_nat.private_address_ipv4}))
#define ${module.azure.nxd_nat.name_upper}_PRIVATE_ADDRESS_NETMASK (IP_ADDRESS(${module.azure.nxd_nat.private_address_netmask}))
#define ${module.azure.nxd_nat.name_upper}_GLOBAL_INTERFACE_INDEX (${module.azure.nxd_nat.global_interface_index})
void ${module.azure.nxd_nat.name}_quick_setup();
        </header>
        <includes>
#include "nx_nat.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_ftp_client.name} Azure RTOS NetX Duo FTP Client" id="module.azure.nxd_ftp_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-ftp/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_ftp_client.${module.azure.nxd_ftp_client.name}}" === "1"
        </constraint>
        <constraint display="The source port must be set to NX_ANY_PORT when using NetX Duo over WiFi.">
            "NX_ANY_PORT" == "${module.azure.nxd_ftp_client.source_port}" || !testExists("${interface.middleware.rm_netxduo_wifi.${module.azure.nxd_ftp_client.requires.nxd.ip::module.azure.nxd.ip.name}}")
        </constraint>
        <requires id="module.azure.nxd_ftp_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_ftp_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.tcp" value="module.azure.nx.ip.tcp.enable" />
        </requires>
        <requires id="module.azure.nxd_ftp_client.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />

        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nx_ftp_client" />
        <provides interface="interface.azure.nx_ftp_client.${module.azure.nxd_ftp_client.name}" />
        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_ftp_client" />
        <provides interface="interface.azure.nxd_ftp_client.${module.azure.nxd_ftp_client.name}" />

        <property default="g_ftp_client${_instance}" display="Name" id="module.azure.nxd_ftp_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_ftp_client.name}")</constraint>
        </property>
        <property default="2048" display="TCP socket window size (bytes)" id="module.azure.nxd_ftp_client.window_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.azure.nxd_ftp_client.window_size}")  &amp;&amp; ("${module.azure.nxd_ftp_client.window_size}" &gt; 0)
            </constraint>
        </property>
        <property default="" id="module.azure.nxd_ftp_client.name_upper">
            <export>"${module.azure.nxd_ftp_client.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_ftp_client.name_upper}_WINDOW_SIZE (${module.azure.nxd_ftp_client.window_size})

void ${module.azure.nxd_ftp_client.name}_quick_setup();
        </header>
        <includes>
#include "nxd_ftp_client.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_snmp_agent.name} Azure RTOS NetX Duo SNMP Agent" id="module.azure.nxd_snmp_agent" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-snmp/chapter1">
        <constraint display="Module instances must have unique names">
      "${interface.azure.nxd_snmp_agent.${module.azure.nxd_snmp_agent.name}}" === "1"
        </constraint>
        <requires id="module.azure.nxd_snmp_agent.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_snmp_agent.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.udp" value="module.azure.nx.ip.udp.enable" />
        </requires>
        <requires id="module.azure.nxd_snmp_agent.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />

        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nxd_snmp_agent" />
        <provides interface="interface.azure.nxd_snmp_agent.${module.azure.nxd_snmp_agent.name}" />

        <property default="g_snmp_agent${_instance}" display="Name" id="module.azure.nxd_snmp_agent.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_snmp_agent.name}")
            </constraint>
        </property>
        <header>
void ${module.azure.nxd_snmp_agent.name}_quick_setup();
        </header>
        <includes>
#include "nxd_snmp.h"
        </includes>
    </module>
    <module config="config.azure.nxd" display="Networking|${module.azure.nxd_pop3_client.name} Azure RTOS NetX Duo POP3 Client" id="module.azure.nxd_pop3_client" version="1" url="https://docs.microsoft.com/en-us/azure/rtos/netx-duo/netx-duo-pop3-client/chapter1">
        <constraint display="Module instances must have unique names">
            "${interface.azure.nxd_pop3_client.${module.azure.nxd_pop3_client.name}}" === "1"
        </constraint>
        <requires id="module.azure.nxd_pop3_client.requires.threadx" interface="interface.rtos.tx" visible="false" display="Requires ThreadX"/>
        <requires id="module.azure.nxd_pop3_client.requires.nxd.ip" interface="interface.azure.nxd.ip" display="Add NetX Duo IP Instance">
            <override property="module.azure.nx.ip.arp" value="module.azure.nx.ip.arp.enable" />
            <override property="module.azure.nx.ip.tcp" value="module.azure.nx.ip.tcp.enable" />
        </requires>
        <requires id="module.azure.nxd_pop3_client.requires.nxd.packet_pool" interface="interface.azure.nxd.packet_pool" display="Add NetX Duo Packet Pool" />

        <!-- NetX and NetX Duo -->
        <provides interface="interface.azure.nx_pop3_client" />
        <provides interface="interface.azure.nx_pop3_client.${module.azure.nxd_pop3_client.name}" />
        <!-- NetX Duo only -->
        <provides interface="interface.azure.nxd_pop3_client"/>
        <provides interface="interface.azure.nxd_pop3_client.${module.azure.nxd_pop3_client.name}" />

        <property default="g_pop3_client${_instance}" display="Name" id="module.azure.nxd_pop3_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.azure.nxd_pop3_client.name}")
            </constraint>
        </property>
        <property default="module.azure.nxd_pop3_client.apop_authentication.disable" display="APOP Authentication" id="module.azure.nxd_pop3_client.apop_authentication">
            <option id="module.azure.nxd_pop3_client.apop_authentication.enable" display="Enable" value="NX_TRUE" />
            <option id="module.azure.nxd_pop3_client.apop_authentication.disable" display="Disable" value="NX_FALSE" />
        </property>
        <property default="module.azure.nxd_pop3_client.address_type.ipv4" display="Use server address type" id="module.azure.nxd_pop3_client.address_type">
            <option display="IPv4" id="module.azure.nxd_pop3_client.address_type.ipv4" value="0"/>
            <option display="IPv6" id="module.azure.nxd_pop3_client.address_type.ipv6" value="1"/>
        </property>
        <property default="192.168.0.2" display="Server IPv4 Address" id="module.azure.nxd_pop3_client.server_address_ipv4">
            <constraint display="Must be a valid IPv4 address (nnn.nnn.nnn.nnn)">
                testIPv4("${module.azure.nxd_pop3_client.server_address_ipv4}".replace(/,/g,"."))
            </constraint>
            <export>"${module.azure.nxd_pop3_client.server_address_ipv4}".replace(/\./g,",")</export>            <!-- replace all dots with commas on export -->
        </property>
        <property default="2001:0:0:0:0:0:0:1" display="Server IPv6 Address" id="module.azure.nxd_pop3_client.server_address_ipv6">
            <constraint display="Must be valid IPv6 address (hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh)">testIPv6("${module.azure.nxd_pop3_client.server_address_ipv6}".replace(/0x/gi, "").replace(/,/g,":"))</constraint>
            <!-- we accommodate old property values using 0x prefix on export -->
            <export>eval("" +
            "var input = '${module.azure.nxd_pop3_client.server_address_ipv6}'.replace(/(?:0x)?([0-9a-f]+)/gi, '0x$1');"+
            "var ary = input.split(':');"+
            "var output = '#define ';"+
            "output += '${module.azure.nxd_pop3_client.name}'.toUpperCase();"+
            "output += '_GET_ADDRESS_IPV6(ipv6) do { \\\\\\n';"+
            "output += '    ipv6.nxd_ip_version = NX_IP_VERSION_V6;\\\\\\n';"+
            "output += '    ipv6.nxd_ip_address.v6[0] = (((uint32_t)' + ary[0] + ' &lt;&lt; 16) &amp; 0xFFFF0000) | ((uint32_t)' + ary[1] + ' &amp; 0x0000FFFF);\\\\\\n';"+
            "output += '    ipv6.nxd_ip_address.v6[1] = (((uint32_t)' + ary[2] + ' &lt;&lt; 16) &amp; 0xFFFF0000) | ((uint32_t)' + ary[3] + ' &amp; 0x0000FFFF);\\\\\\n';"+
            "output += '    ipv6.nxd_ip_address.v6[2] = (((uint32_t)' + ary[4] + ' &lt;&lt; 16) &amp; 0xFFFF0000) | ((uint32_t)' + ary[5] + ' &amp; 0x0000FFFF);\\\\\\n';"+
            "output += '    ipv6.nxd_ip_address.v6[3] = (((uint32_t)' + ary[6] + ' &lt;&lt; 16) &amp; 0xFFFF0000) | ((uint32_t)' + ary[7] + ' &amp; 0x0000FFFF);\\\\\\n';"+
            "output += '  } while(0);\\n';"+
            "")</export>
        </property>
        <property default="110" display="Server Port number" id="module.azure.nxd_pop3_client.server_port">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.azure.nxd_pop3_client.server_port}")  &amp;&amp; ("${module.azure.nxd_pop3_client.server_port}" &gt;= 0)
            </constraint>
        </property>
        <property default="username@domain.com" display="Client Name" id="module.azure.nxd_pop3_client.client_name" />
        <property default="password" display="Client Password" id="module.azure.nxd_pop3_client.client_password" />
        <property default="" id="module.azure.nxd_pop3_client.name_upper">
            <export>"${module.azure.nxd_pop3_client.name}".toUpperCase()</export>
        </property>
        <header>
#define ${module.azure.nxd_pop3_client.name_upper}_ADDRESS_TYPE (${module.azure.nxd_pop3_client.address_type})
#define ${module.azure.nxd_pop3_client.name_upper}_ADDRESS_IPV4 (IP_ADDRESS(${module.azure.nxd_pop3_client.server_address_ipv4}))
${module.azure.nxd_pop3_client.server_address_ipv6}
#define ${module.azure.nxd_pop3_client.name_upper}_CLIENT_NAME ("${module.azure.nxd_pop3_client.client_name}")
#define ${module.azure.nxd_pop3_client.name_upper}_CLIENT_PASSWORD ("${module.azure.nxd_pop3_client.client_password}")
#define ${module.azure.nxd_pop3_client.name_upper}_APOP_AUTHENTICATION (${module.azure.nxd_pop3_client.apop_authentication})
#define ${module.azure.nxd_pop3_client.name_upper}_SERVER_PORT (${module.azure.nxd_pop3_client.server_port})

void ${module.azure.nxd_pop3_client.name}_quick_setup();
        </header>
        <includes>
#include "nxd_pop3_client.h"
#include "nx_md5.h"
        </includes>
    </module>
    <developerSupport>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd.packet_pool"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The packet pool module provides snippets of code for setting up a NetX Packet Pool.</p></form>]]></description>
            <function display="Quick Setup" id="packet_pool_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the packet pool instance using the properties from the RA configurator.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd.ip"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The IP module provides snippets of code for setting up a NetX IP instance.</p></form>]]></description>
            <function display="Quick setup" id="ip_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for an ip instance using properties from the RA configurator. Make sure to setup the IP instance's packet pool before calling this function.</p></form>]]></description>
            </function>
            <function display="Enable IPv6" id="ip_enable_ipv6">
                <description><![CDATA[<form><p>Drag this snippet of code into the ip instance's 'Quick Setup' function in order to enable IPv6.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_dhcp_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The DHCP IPv4 Client module provides snippets of code for configuring DHCP and aquiring an IPv4 address.</p></form>]]></description>
            <function display="Quick Setup" id="dhcp_client_quick_setup_ipv4">
                <description><![CDATA[<form><p>This function provides quick setup for the DHCP client instance using the properties from the RA configurator and aquires an ip address for the IP instance. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd.http_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The HTTP Client module provides snippets of code for getting started using HTTP.</p></form>]]></description>
            <function display="Quick Setup" id="http_client_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the HTTP client instance using the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_dns_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The DNS Client module provides snippets of code for configuring DNS.</p></form>]]></description>
            <function display="Quick Setup" id="dns_client_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the DNS client instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_telnet_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The Telnet Client module provides snippets of code for configuring a Telnet instance.</p></form>]]></description>
            <function display="Quick Setup" id="telnet_client_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the Telnet client instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_auto_ip"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The AutoIP module provides snippets of code for configuring AutoIP protocol.</p></form>]]></description>
            <function display="Quick Setup" id="auto_ip_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the AutoIP instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_web_http_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The HTTP Web Client module provides snippets of code for getting started using HTTP Web.</p></form>]]></description>
            <function display="Quick Setup" id="web_http_client_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the Web HTTP client instance using the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_smtp_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The SMTP Client module provides snippets of code for getting started using SMTP protocol.</p></form>]]></description>
            <function display="Quick Setup" id="smtp_client_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the SMTP client instance using the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_dhcpv6_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The DHCP IPv6 Client module provides snippets of code for configuring DHCP and aquiring an IPv6 address.</p></form>]]></description>
            <function display="Quick Setup" id="dhcp_client_quick_setup_ipv6">
                <description><![CDATA[<form><p>This function provides quick setup for the DHCP client instance using the properties from the RA configurator and aquires an ip address for the IP instance. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_dhcp_server"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The DHCP IPv4 Server module provides snippets of code for configuring a DHCP Server running on IPv4.</p></form>]]></description>
            <function display="Quick Setup" id="dhcp_server_quick_setup_ipv4">
                <description><![CDATA[<form><p>This function provides quick setup for the DHCP server instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_dhcpv6_server"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The DHCP IPv6 Server module provides snippets of code for configuring a DHCP Server running on IPv6.</p></form>]]></description>
            <function display="Quick Setup" id="dhcp_server_quick_setup_ipv6">
                <description><![CDATA[<form><p>This function provides quick setup for the DHCP server instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_telnet_server_v2"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The Telnet Server module provides snippets of code for configuring a Telnet Server.</p></form>]]></description>
            <function display="Quick Setup" id="telnet_server_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the Telnet server instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_sntp_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The SNTP client module provides snippets of code for configuring a SNTP client.</p></form>]]></description>
            <function display="Quick Setup" id="sntp_client_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the SNTP client instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_tftp_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The TFTP client module provides snippets of code for configuring a TFTP client.</p></form>]]></description>
            <function display="Quick Setup" id="tftp_client_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the TFTP client instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_mqtt_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The MQTT client module provides snippets of code for configuring a MQTT client.</p></form>]]></description>
            <function display="Quick Setup" id="mqtt_client_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the MQTT client instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_nat"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The NAT module provides snippets of code for configuring a NAT.</p></form>]]></description>
            <function display="Quick Setup" id="nat_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the NAT instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_ftp_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The FTP Client module provides snippets of code for configuring a FTP Client.</p></form>]]></description>
            <function display="Quick Setup" id="ftp_client_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the FTP Client instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_snmp_agent"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The SNMP Agent module provides snippets of code for configuring a SNMP Agent.</p></form>]]></description>
            <function display="Quick Setup" id="snmp_agent_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the SNMP Agent instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_pop3_client"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The POP3 client module provides snippets of code for configuring a POP3 Client.</p></form>]]></description>
            <function display="Quick Setup" id="pop3_client_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the POP3 client instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_ftp_server"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The FTP Server module provides snippets of code for configuring a FTP Server.</p></form>]]></description>
            <function display="Quick Setup" id="ftp_server_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the FTP Server instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_http_server"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The HTTP Server module provides snippets of code for configuring a HTTP Server.</p></form>]]></description>
            <function display="Quick Setup" id="http_server_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the HTTP Server instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_tftp_server"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The TFTP Server module provides snippets of code for configuring a TFTP Server.</p></form>]]></description>
            <function display="Quick Setup" id="tftp_server_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the TFTP Server instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_web_http_server"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>The Web HTTP Server module provides snippets of code for configuring a Web HTTP Server.</p></form>]]></description>
            <function display="Quick Setup" id="web_http_server_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for the Web HTTP Server instance using the properties from the RA configurator. Make sure to setup the IP instance before calling this function.</p></form>]]></description>
            </function>
        </api>
        <template category="function_call" display="Call Quick Setup" id="module.azure.packet_pool.quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd.packet_pool">
                <function id="packet_pool_quick_setup"/>
            </moduleRef>
            <content>
/* Packet pool instance (If this is a Trustzone part, the memory must be placed in Non-secure memory). */
NX_PACKET_POOL ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)};

#if defined(ETHER_BUFFER_PLACE_IN_SECTION)
uint8_t ${packet_pool_name}_pool_memory[${packet_pool_name_upper:raProperty(module.azure.nxd.packet_pool.name_upper)}_PACKET_NUM * (${packet_pool_name_upper}_PACKET_SIZE + sizeof(NX_PACKET))] BSP_ALIGN_VARIABLE(4) ETHER_BUFFER_PLACE_IN_SECTION;
#elif defined(WIFI_BUFFER_PLACE_IN_SECTION)
uint8_t ${packet_pool_name}_pool_memory[${packet_pool_name_upper:raProperty(module.azure.nxd.packet_pool.name_upper)}_PACKET_NUM * (${packet_pool_name_upper}_PACKET_SIZE + sizeof(NX_PACKET))] BSP_ALIGN_VARIABLE(4) WIFI_BUFFER_PLACE_IN_SECTION;
#endif

/* Quick Setup for ${packet_pool_name}.
 * - nx_system_initialize() must be called before calling this function.
 */
void ${packet_pool_name}_quick_setup()
{
    /* Create the packet pool. */
    UINT status = nx_packet_pool_create(&amp;${packet_pool_name},
                "${packet_pool_name} Packet Pool",
                ${packet_pool_name_upper}_PACKET_SIZE,
                &amp;${packet_pool_name}_pool_memory[0],
                ${packet_pool_name_upper}_PACKET_NUM * (${packet_pool_name_upper}_PACKET_SIZE + sizeof(NX_PACKET)));
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick setup" id="module.azure.ip.quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd.ip">
                <function id="ip_quick_setup"/>
            </moduleRef>
            <content>
/* IP instance */
NX_IP ${ip_name:raProperty(module.azure.nxd.ip.name)};

/* Stack memory for ${ip_name}. */
uint8_t ${ip_name}_stack_memory[${ip_name_upper:raProperty(module.azure.nxd.ip.name_upper)}_TASK_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${ip_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* ARP cache memory for ${ip_name}. */
uint8_t ${ip_name}_arp_cache_memory[${ip_name_upper}_ARP_CACHE_SIZE] BSP_ALIGN_VARIABLE(4);

/* Quick setup for ${ip_name}.
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${ip_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 * - If using a NetX Duo Wireless Driver variant the quick setup for wireless must be setup (so it can connect to a network) before calling this function
 *     (See Developer Assistance -> ${ip_name} -> NetX Duo Wireless Driver -> Quick Setup)
 * - If using NetX Duo with the Embedded Wireless Framework (EWF) and Cellular products then please see the FSP user manual for what to setup prior to calling this function.
 */
void ${ip_name}_quick_setup()
{
    UINT status;

    /* Create the ip instance. */
    status = nx_ip_create(&amp;${ip_name},
                "${ip_name} IP Instance",
                ${ip_name_upper}_ADDRESS,
                ${ip_name_upper}_SUBNET_MASK,
                &amp;${packet_pool_name},
                ${ip_name_upper}_NETWORK_DRIVER,
                &amp;${ip_name}_stack_memory[0],
                ${ip_name_upper}_TASK_STACK_SIZE,
                ${ip_name_upper}_TASK_PRIORITY);
    assert(NX_SUCCESS == status);

    /* If using Embedded Wireless Framework then uncomment this out to set the adapter_ptr. See the FSP user manual for more details. */
    // ${ip_name}.nx_ip_reserved_ptr = adapter_ptr;

    /* Set the gateway address if it is configured. Make sure this is set if using the Embedded Wireless Framework! */
    if(IP_ADDRESS(0, 0, 0, 0) != ${ip_name_upper}_GATEWAY_ADDRESS)
    {
        status = nx_ip_gateway_address_set(&amp;${ip_name}, ${ip_name_upper}_GATEWAY_ADDRESS);
        assert(NX_SUCCESS == status);
    }

    status = nx_arp_enable(&amp;${ip_name}, &amp;${ip_name}_arp_cache_memory[0], ${ip_name_upper}_ARP_CACHE_SIZE);
    assert(NX_SUCCESS == status);

    /* TODO: Enable NetX modules that are required by the application. */

    // status = nx_tcp_enable(&amp;${ip_name});
    // assert(NX_SUCCESS == status);

    // status = nx_udp_enable(&amp;${ip_name});
    // assert(NX_SUCCESS == status);

    // status = nx_icmp_enable(&amp;${ip_name});
    // assert(NX_SUCCESS == status);

    // status = nx_ip_fragment_enable(&amp;${ip_name});
    // assert(NX_SUCCESS == status);

    // status = nx_igmp_enable(&amp;${ip_name});
    // assert(NX_SUCCESS == status);

    /* Wait for the link to be enabled. */
    ULONG current_state;
    status = nx_ip_status_check(&amp;${ip_name}, NX_IP_LINK_ENABLED, &amp;current_state, 1000U);
    assert(NX_SUCCESS == status);
    assert(NX_IP_LINK_ENABLED == current_state);
}
            </content>
        </template>
        <template category="function_call" display="Enable IPv6" id="module.azure.ip.ip_enable_ipv6" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd.ip">
                <function id="ip_enable_ipv6"/>
            </moduleRef>
            <content>
/* Enable IPv6. */
status = nxd_ipv6_enable(&amp;${ip_name:raProperty(module.azure.nxd.ip.name)});
assert(NX_SUCCESS == status);

/* Enable ICMPv6 (Required for neighbor discovery). */
${status:localVar(UINT)} = nxd_icmp_enable(&amp;${ip_name});
assert(NX_SUCCESS == status);

UINT address_index = 0;

/* Set the link local IPv6 address (Prefix set to 10). */
status = nxd_ipv6_address_set(&amp;${ip_name}, address_index, &amp;${ip_name}_ipv6_link_local_address, 10, &amp;address_index);
assert(NX_SUCCESS == status);

/* Set the global IPv6 address (Prefix set to 64). */
status = nxd_ipv6_address_set(&amp;${ip_name}, address_index, &amp;${ip_name}_ipv6_global_address, 64, &amp;address_index);
assert(NX_SUCCESS == status);
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.dhcp_client.dhcp_client_quick_setup_ipv4" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_dhcp_client">
                <function id="dhcp_client_quick_setup_ipv4"/>
            </moduleRef>
            <content>
/* DHCP instance. */
NX_DHCP ${dhcp_client_name:raProperty(module.azure.nxd_dhcp_client.name)};

/* Quick setup for ${dhcp_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${dhcp_client_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${dhcp_client_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${dhcp_client_name}_quick_setup()
{
    /* Create the DHCP instance. */
    UINT status = nx_dhcp_create(&amp;${dhcp_client_name},
                        &amp;${ip_name},
                        "${dhcp_client_name}");
    assert(NX_SUCCESS == status);

    status = nx_dhcp_packet_pool_set(&amp;${dhcp_client_name}, &amp;${packet_pool_name});
    assert(NX_SUCCESS == status);

    /* Start DHCP service. */
    status = nx_dhcp_start(&amp;${dhcp_client_name});
    assert(NX_SUCCESS == status);

    /* Wait until an IP address is acquired via DHCP. */
    ULONG requested_status;
    status = nx_ip_status_check(&amp;${ip_name}, NX_IP_ADDRESS_RESOLVED, &amp;requested_status, 1000);
    assert(NX_SUCCESS == status);
    assert(NX_IP_ADDRESS_RESOLVED == requested_status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_dhcpv6_client.dhcp_client_quick_setup_ipv6" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_dhcpv6_client">
                <function id="dhcp_client_quick_setup_ipv6"/>
            </moduleRef>
            <content>
/* DHCP instance. */
NX_DHCPV6 ${dhcp_client_name:raProperty(module.azure.nxd_dhcpv6_client.name)};
uint8_t ${dhcp_client_name}_stack_memory[${dhcp_client_name_upper:raProperty(module.azure.nxd_dhcpv6_client.name_upper)}_TASK_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${dhcp_client_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* State change notification handler - replace with your own function if desired */
VOID ${dhcp_client_name}StateChangeHandler(struct NX_DHCPV6_STRUCT *dhcpv6_ptr, UINT old_state, UINT new_state);
VOID ${dhcp_client_name}StateChangeHandler(struct NX_DHCPV6_STRUCT *dhcpv6_ptr, UINT old_state, UINT new_state)
{
    ;
}

/* Server error handler - replace with your own function if desired */
VOID ${dhcp_client_name}ServerErrorHandler(struct NX_DHCPV6_STRUCT *dhcpv6_ptr, UINT op_code, UINT status_code, UINT message_type);
VOID ${dhcp_client_name}ServerErrorHandler(struct NX_DHCPV6_STRUCT *dhcpv6_ptr, UINT op_code, UINT status_code, UINT message_type)
{
    ;
}

/* Quick setup for ${dhcp_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${dhcp_client_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${dhcp_client_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${dhcp_client_name}_quick_setup()
{
    /* Create the DHCP instance. */
    UINT status = nx_dhcpv6_client_create(&amp;${dhcp_client_name},
                        &amp;${ip_name},
                        "${dhcp_client_name}",
                        &amp;${packet_pool_name},
                        ${dhcp_client_name}_stack_memory,
                        ${dhcp_client_name_upper}_TASK_STACK_SIZE,
                        ${dhcp_client_name}StateChangeHandler,
                        ${dhcp_client_name}ServerErrorHandler
                        );
    assert(NX_SUCCESS == status);

    /* Start DHCP service. */
    status = nx_dhcpv6_start(&amp;${dhcp_client_name});
    assert(NX_SUCCESS == status);

    /* Wait until an IP address is acquired via DHCP. */
    ULONG requested_status;
    status = nx_ip_status_check(&amp;${ip_name}, NX_IP_ADDRESS_RESOLVED, &amp;requested_status, 1000);
    assert(NX_SUCCESS == status);
    assert(NX_IP_ADDRESS_RESOLVED == requested_status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.http_client.http_client_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd.http_client">
                <function id="http_client_quick_setup"/>
            </moduleRef>
            <content>
/* HTTP Client instance. */
NX_HTTP_CLIENT ${http_client_name:raProperty(module.azure.nxd.http_client.name)};

/* Quick setup for ${http_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${http_client_name} -> ${ip_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${http_client_name}_quick_setup()
{
    UINT status = nx_http_client_create(&amp;${http_client_name},
                        "${http_client_name}",
                        &amp;${ip_name:raProperty(module.azure.nxd.ip.name)},
                        &amp;${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)},
                        ${http_client_name_upper:raProperty(module.azure.nxd.http_client.name_upper)}_WINDOW_SIZE);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_dns_client.dns_client_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_dns_client">
                <function id="dns_client_quick_setup"/>
            </moduleRef>
            <content>
/* DNS instance. */
NX_DNS ${dns_client_name:raProperty(module.azure.nxd_dns_client.name)};

/* Quick setup for ${dns_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${dns_client_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${dns_client_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${dns_client_name}_quick_setup()
{
    /* Create the DNS instance. */
    UINT status = nx_dns_create(&amp;${dns_client_name},
                        &amp;${ip_name},
                        (UCHAR *)"${dns_client_name}");
    assert(NX_SUCCESS == status);

    status = nx_dns_packet_pool_set(&amp;${dns_client_name}, &amp;${packet_pool_name});
    assert(NX_SUCCESS == status);

    // TODO: Enable DNS Cache if required
    /* Initialize the cache. */
    //status = nx_dns_cache_initialize(&amp;${dns_client_name}, your_local_cache_name, YOUR_LOCAL_CACHE_SIZE);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_telnet_client.telnet_client_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_telnet_client">
                <function id="telnet_client_quick_setup"/>
            </moduleRef>
            <content>
/* Telnet instance. */
NX_TELNET_CLIENT ${telnet_client_name:raProperty(module.azure.nxd_telnet_client.name)};

/* Quick setup for ${telnet_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${telnet_client_name} -> ${ip_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${telnet_client_name}_quick_setup()
{
    /* Create the Telnet instance. */
    UINT status = nx_telnet_client_create(&amp;${telnet_client_name},
                        "${telnet_client_name}",
                        &amp;${ip_name},
                        ${telnet_client_name_upper:raProperty(module.azure.nxd_telnet_client.name_upper)}_WINDOW_SIZE);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_auto_ip.auto_ip_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_auto_ip">
                <function id="auto_ip_quick_setup"/>
            </moduleRef>
            <content>
/* AutoIP instance. */
NX_AUTO_IP ${auto_ip_name:raProperty(module.azure.nxd_auto_ip.name)};

/* Stack memory for ${auto_ip_name}. */
uint8_t ${auto_ip_name}_stack_memory[${auto_ip_name_upper:raProperty(module.azure.nxd_auto_ip.name_upper)}_TASK_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${auto_ip_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* Quick setup for ${auto_ip_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${telnet_client_name} -> ${ip_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${auto_ip_name}_quick_setup()
{
    /* Create the AutoIP instance. */
    UINT status = nx_auto_ip_create(&amp;${auto_ip_name},
                        "${telnet_client_name}",
                        &amp;${ip_name},
                        &amp;${auto_ip_name}_stack_memory,
                        ${auto_ip_name_upper}_TASK_STACK_SIZE,
                        ${auto_ip_name_upper}_TASK_PRIORITY);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_web_http_client.web_http_client_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_web_http_client">
                <function id="web_http_client_quick_setup"/>
            </moduleRef>
            <content>
/* Web HTTP Client instance. */
NX_WEB_HTTP_CLIENT  ${web_http_client_name:raProperty(module.azure.nxd_web_http_client.name)};

/* Quick setup for ${web_http_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${web_http_client_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${web_http_client_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${web_http_client_name}_quick_setup()
{
    /* Create the Web HTTP Client instance. */
    UINT status = nx_web_http_client_create(&amp;${web_http_client_name},
                        "${web_http_client_name}",
                        &amp;${ip_name},
                        &amp;${packet_pool_name},
                        ${window_size:raProperty(module.azure.nxd_web_http_client.name_upper)}_WINDOW_SIZE);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_smtp_client.smtp_client_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_smtp_client">
                <function id="smtp_client_quick_setup"/>
            </moduleRef>
            <content>
/* SMTP Client instance. */
NX_SMTP_CLIENT ${smtp_client_name:raProperty(module.azure.nxd_smtp_client.name)};
NXD_ADDRESS ${smtp_client_name}_ip_address;

/* Quick setup for ${smtp_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${smtp_client_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${smtp_client_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${smtp_client_name}_quick_setup()
{
    /* Create the SMTP Client instance. */
    #if !(${smtp_client_name_upper:raProperty(module.azure.nxd_smtp_client.name_upper)}_ADDRESS_TYPE)
    ${smtp_client_name}_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
    ${smtp_client_name}_ip_address.nxd_ip_address.v4 = ${smtp_client_name_upper}_ADDRESS_IPV4;
    #else
    ${smtp_client_name_upper}_GET_ADDRESS_IPV6(${smtp_client_name}_ip_address);
    #endif
    UINT status = nxd_smtp_client_create(&amp;${smtp_client_name},
                        &amp;${ip_name},
                        &amp;${packet_pool_name},
                        ${smtp_client_name_upper}_CLIENT_NAME,
                        ${smtp_client_name_upper}_CLIENT_PASSWORD,
                        ${smtp_client_name_upper}_CLIENT_ADDRESS,
                        ${smtp_client_name_upper}_CLIENT_DOMAIN,
                        ${smtp_client_name_upper}_AUTHENTICATION_TYPE,
                        &amp;${smtp_client_name}_ip_address,
                        ${smtp_client_name_upper}_SERVER_PORT);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_dhcp_server.dhcp_server_quick_setup_ipv4" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_dhcp_server">
                <function id="dhcp_server_quick_setup_ipv4"/>
            </moduleRef>
            <content>
/* DHCP server instance. */
NX_DHCP_SERVER ${dhcp_server_name:raProperty(module.azure.nxd_dhcp_server.name)};
uint8_t ${dhcp_server_name}_stack_memory[${dhcp_server_name_upper:raProperty(module.azure.nxd_dhcp_server.name_upper)}_TASK_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${dhcp_server_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* Quick setup for ${dhcp_server_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${dhcp_server_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${dhcp_server_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${dhcp_server_name}_quick_setup()
{
    /* Create the DHCP server instance. */
    UINT status = nx_dhcp_server_create(&amp;${dhcp_server_name},
                        &amp;${ip_name},
                        ${dhcp_server_name}_stack_memory,
                        ${dhcp_server_name_upper}_TASK_STACK_SIZE,
                        "${dhcp_server_name}",
                        &amp;${packet_pool_name});
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_dhcpv6_server.dhcp_server_quick_setup_ipv6" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_dhcpv6_server">
                <function id="dhcp_server_quick_setup_ipv6"/>
            </moduleRef>
            <content>
/* DHCP server instance. */
NX_DHCPV6_SERVER ${dhcp_server_name:raProperty(module.azure.nxd_dhcpv6_server.name)};
uint8_t ${dhcp_server_name}_stack_memory[${dhcp_server_name_upper:raProperty(module.azure.nxd_dhcpv6_server.name_upper)}_TASK_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${dhcp_server_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* Address declined handler - replace with your own function if desired */
VOID ${dhcp_server_name}AddressDeclinedHandler(struct NX_DHCPV6_SERVER_STRUCT *dhcpv6_server_ptr, NX_DHCPV6_CLIENT *dhcpv6_client_ptr, UINT message);
VOID ${dhcp_server_name}AddressDeclinedHandler(struct NX_DHCPV6_SERVER_STRUCT *dhcpv6_server_ptr, NX_DHCPV6_CLIENT *dhcpv6_client_ptr, UINT message)
{
    ;
}

/* Option request handler - replace with your own function if desired */
VOID ${dhcp_server_name}OptionRequestHandler(struct NX_DHCPV6_SERVER_STRUCT *dhcpv6_server_ptr, UINT option_request, UCHAR *buffer_ptr, UINT *index);
VOID ${dhcp_server_name}OptionRequestHandler(struct NX_DHCPV6_SERVER_STRUCT *dhcpv6_server_ptr, UINT option_request, UCHAR *buffer_ptr, UINT *index)
{
    ;
}

/* Quick setup for ${dhcp_server_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${dhcp_server_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${dhcp_server_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${dhcp_server_name}_quick_setup()
{
    /* Create the DHCP server instance. */
    UINT status = nx_dhcpv6_server_create(&amp;${dhcp_server_name},
                        &amp;${ip_name},
                        "${dhcp_server_name}",
                        &amp;${packet_pool_name},
                        ${dhcp_server_name}_stack_memory,
                        ${dhcp_server_name_upper}_TASK_STACK_SIZE,
                        ${dhcp_server_name}AddressDeclinedHandler,
                        ${dhcp_server_name}OptionRequestHandler);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_telnet_server_v2.telnet_server_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_telnet_server_v2">
                <function id="telnet_server_quick_setup"/>
            </moduleRef>
            <content>
/* Telnet server instance. */
NX_TELNET_SERVER ${telnet_server_name:raProperty(module.azure.nxd_telnet_server_v2.name)};
uint8_t ${telnet_server_name}_stack_memory[${telnet_server_name_upper:raProperty(module.azure.nxd_telnet_server_v2.name_upper)}_TASK_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${telnet_server_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* Client connect function - replace with your own function if desired */
void ${telnet_server_name}ClientConnectFunction(struct NX_TELNET_SERVER_STRUCT * telnet_server_ptr, UINT logical_connection);
void ${telnet_server_name}ClientConnectFunction(struct NX_TELNET_SERVER_STRUCT * telnet_server_ptr, UINT logical_connection)
{
    ;
}

/* Receive data function - replace with your own function if desired */
void ${telnet_server_name}ReceiveDataFunction(struct NX_TELNET_SERVER_STRUCT * telnet_server_ptr, UINT logical_connection, NX_PACKET *packet_ptr);
void ${telnet_server_name}ReceiveDataFunction(struct NX_TELNET_SERVER_STRUCT * telnet_server_ptr, UINT logical_connection, NX_PACKET *packet_ptr)
{
    ;
}

/* Client disconnect function - replace with your own function if desired */
void ${telnet_server_name}ClientDisconnectFunction(struct NX_TELNET_SERVER_STRUCT * telnet_server_ptr, UINT logical_connection);
void ${telnet_server_name}ClientDisconnectFunction(struct NX_TELNET_SERVER_STRUCT * telnet_server_ptr, UINT logical_connection)
{
    ;
}

/* Quick setup for ${telnet_server_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${telnet_server_name} -> ${ip_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${telnet_server_name}_quick_setup()
{
    /* Create the DHCP server instance. */
    UINT status = nx_telnet_server_create(&amp;${telnet_server_name},
                        "${telnet_server_name}",
                        &amp;${ip_name},
                        ${telnet_server_name}_stack_memory,
                        ${telnet_server_name_upper}_TASK_STACK_SIZE,
                        ${telnet_server_name}ClientConnectFunction,
                        ${telnet_server_name}ReceiveDataFunction,
                        ${telnet_server_name}ClientDisconnectFunction);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_sntp_client.sntp_client_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_sntp_client">
                <function id="sntp_client_quick_setup"/>
            </moduleRef>
            <content>
/* SNTP client instance. */
NX_SNTP_CLIENT ${sntp_client_name:raProperty(module.azure.nxd_sntp_client.name)};

/* Leap second handler - replace with your own function if desired */
UINT ${sntp_client_name}LeapSecondHandler(NX_SNTP_CLIENT *client_ptr, UINT indicator);
UINT ${sntp_client_name}LeapSecondHandler(NX_SNTP_CLIENT *client_ptr, UINT indicator)
{
    return NX_SUCCESS;
}

/* Kiss of Death handler - replace with your own function if desired */
UINT ${sntp_client_name}KissOfDeathHandler(NX_SNTP_CLIENT *client_ptr, UINT code);
UINT ${sntp_client_name}KissOfDeathHandler(NX_SNTP_CLIENT *client_ptr, UINT code)
{
    return NX_SUCCESS;
}

/* Random number function - replace with your own function if desired */
VOID ${sntp_client_name}RandomNumberFunction(struct NX_SNTP_CLIENT_STRUCT *client_ptr, ULONG *rand);
VOID ${sntp_client_name}RandomNumberFunction(struct NX_SNTP_CLIENT_STRUCT *client_ptr, ULONG *rand)
{
    ;
}

/* Quick setup for ${sntp_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${sntp_client_name} -> ${ip_name} -> Quick Setup).
  * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${sntp_client_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${sntp_client_name}_quick_setup()
{
    /* Create the SNTP instance. */
    UINT status = nx_sntp_client_create(&amp;${sntp_client_name},
                        &amp;${ip_name},
                        ${sntp_client_name_upper:raProperty(module.azure.nxd_sntp_client.name_upper)}_INDEX_NETWORK_INTERFACE,
                        &amp;${packet_pool_name},
                        ${sntp_client_name}LeapSecondHandler,
                        ${sntp_client_name}KissOfDeathHandler,
                        ${sntp_client_name}RandomNumberFunction);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_tftp_client.tftp_client_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_tftp_client">
                <function id="tftp_client_quick_setup"/>
            </moduleRef>
            <content>
/* TFTP client instance. */
NX_TFTP_CLIENT ${tftp_client_name:raProperty(module.azure.nxd_tftp_client.name)};

/* Quick setup for ${tftp_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${tftp_client_name} -> ${ip_name} -> Quick Setup).
  * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${tftp_client_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${tftp_client_name}_quick_setup()
{
    /* Create the TFTP instance. */
    UINT status = nx_tftp_client_create(&amp;${tftp_client_name},
                        "${tftp_client_name}",
                        &amp;${ip_name},
                        &amp;${packet_pool_name});

    // Use this function call instead if using IPv6
    // UINT status = nxd_tftp_client_create(&amp;${tftp_client_name},
    //                   "${tftp_client_name}",
    //                    &amp;${ip_name},
    //                    &amp;${packet_pool_name},
    //                    NX_IP_VERSION_V6);

    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_mqtt_client.mqtt_client_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_mqtt_client">
                <function id="mqtt_client_quick_setup"/>
            </moduleRef>
            <content>
/* MQTT client instance. */
NXD_MQTT_CLIENT ${mqtt_client_name:raProperty(module.azure.nxd_mqtt_client.name)};
uint8_t ${mqtt_client_name}_stack_memory[${mqtt_client_name_upper:raProperty(module.azure.nxd_mqtt_client.name_upper)}_TASK_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${mqtt_client_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);
static char ${mqtt_client_name}_client_id[] = "${mqtt_client_name}";

/* Quick setup for ${mqtt_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${mqtt_client_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${mqtt_client_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${mqtt_client_name}_quick_setup()
{
    /* Create the MQTT instance. */
    UINT status = nxd_mqtt_client_create(&amp;${mqtt_client_name},
                        "${mqtt_client_name}",
                        ${mqtt_client_name}_client_id,
                        strlen(${mqtt_client_name}_client_id),
                        &amp;${ip_name},
                        &amp;${packet_pool_name},
                        (VOID*)${mqtt_client_name}_stack_memory,
                        ${mqtt_client_name_upper}_TASK_STACK_SIZE,
                        ${mqtt_client_name_upper}_CLIENT_PRIORITY,
                        NX_NULL,
                        0);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_nat.nat_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_nat">
                <function id="nat_quick_setup"/>
            </moduleRef>
            <content>
/* NAT instance. */
NX_NAT_DEVICE ${nat_name:raProperty(module.azure.nxd_nat.name)};
uint8_t ${nat_name}_cache_memory[${nat_name_upper:raProperty(module.azure.nxd_nat.name_upper)}_CACHE_SIZE];

/* Quick setup for ${nat_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${nat_name} -> ${ip_name} -> Quick Setup).
 * - Private network ${external_ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${nat_name} -> ${external_ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${nat_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${nat_name}_quick_setup()
{
    /* Set the private interface. Make sure external IP interface was already created. */
    UINT status = nx_ip_interface_attach(&amp;${external_ip_name},
                        "${nat_name} Private Interface",
                        ${nat_name_upper}_PRIVATE_ADDRESS_IPV4,
                        ${nat_name_upper}_PRIVATE_ADDRESS_NETMASK,
                        ${private_ether_driver:raProperty(module.middleware.rm_netxduo_ether.name)});
    assert(NX_SUCCESS == status);

    /* Create a NAT server and cache with a global interface index. */
    status = nx_nat_create(&amp;${nat_name},
                        &amp;${ip_name},
                        ${nat_name_upper}_GLOBAL_INTERFACE_INDEX,
                        ${nat_name}_cache_memory,
                        ${nat_name_upper:raProperty(module.azure.nxd_nat.name_upper)}_CACHE_SIZE);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_ftp_client.ftp_client_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_ftp_client">
                <function id="ftp_client_quick_setup"/>
            </moduleRef>
            <content>
/* FTP Client instance. */
NX_FTP_CLIENT ${ftp_client_name:raProperty(module.azure.nxd_ftp_client.name)};

/* Quick setup for ${ftp_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${ftp_client_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${ftp_client_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${ftp_client_name}_quick_setup()
{
    /* Create the FTP Client instance. */
    UINT status = nx_ftp_client_create(&amp;${ftp_client_name},
                        "${ftp_client_name}",
                        &amp;${ip_name},
                        ${ftp_client_name_upper:raProperty(module.azure.nxd_ftp_client.name_upper)}_WINDOW_SIZE,
                        &amp;${packet_pool_name});
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_snmp_agent.snmp_agent_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_snmp_agent">
                <function id="snmp_agent_quick_setup"/>
            </moduleRef>
            <content>
/* SNMP Agent instance. */
NX_SNMP_AGENT ${snmp_agent_name:raProperty(module.azure.nxd_snmp_agent.name)};
uint8_t ${snmp_agent_name}_stack_memory[NX_SNMP_AGENT_THREAD_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${snmp_agent_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* Username handler - replace with your own function if desired */
UINT ${snmp_agent_name}UsernameHandler(NX_SNMP_AGENT *agent_ptr, UCHAR *username);
UINT ${snmp_agent_name}UsernameHandler(NX_SNMP_AGENT *agent_ptr, UCHAR *username)
{
    FSP_PARAMETER_NOT_USED(agent_ptr);
    FSP_PARAMETER_NOT_USED(username);
    return 0;
}

/* Get handler - replace with your own function if desired */
UINT ${snmp_agent_name}GetHandler(NX_SNMP_AGENT *agent_ptr, UCHAR *object_requested, NX_SNMP_OBJECT_DATA *object_data);
UINT ${snmp_agent_name}GetHandler(NX_SNMP_AGENT *agent_ptr, UCHAR *object_requested, NX_SNMP_OBJECT_DATA *object_data)
{
    FSP_PARAMETER_NOT_USED(agent_ptr);
    FSP_PARAMETER_NOT_USED(object_requested);
    FSP_PARAMETER_NOT_USED(object_data);
    return 0;
}

/* Get next handler - replace with your own function if desired */
UINT ${snmp_agent_name}GetNextHandler(NX_SNMP_AGENT *agent_ptr, UCHAR *object_requested, NX_SNMP_OBJECT_DATA *object_data);
UINT ${snmp_agent_name}GetNextHandler(NX_SNMP_AGENT *agent_ptr, UCHAR *object_requested, NX_SNMP_OBJECT_DATA *object_data)
{
    FSP_PARAMETER_NOT_USED(agent_ptr);
    FSP_PARAMETER_NOT_USED(object_requested);
    FSP_PARAMETER_NOT_USED(object_data);
    return 0;
}

/* Get set handler - replace with your own function if desired */
UINT ${snmp_agent_name}SetHandler(NX_SNMP_AGENT *agent_ptr, UCHAR *object_requested, NX_SNMP_OBJECT_DATA *object_data);
UINT ${snmp_agent_name}SetHandler(NX_SNMP_AGENT *agent_ptr, UCHAR *object_requested, NX_SNMP_OBJECT_DATA *object_data)
{
    FSP_PARAMETER_NOT_USED(agent_ptr);
    FSP_PARAMETER_NOT_USED(object_requested);
    FSP_PARAMETER_NOT_USED(object_data);
    return 0;
}

/* Quick setup for ${snmp_agent_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${snmp_agent_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${snmp_agent_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${snmp_agent_name}_quick_setup()
{
    /* Create the SNMP Agent instance. */
    UINT status = nx_snmp_agent_create(&amp;${snmp_agent_name},
                        "${snmp_agent_name}",
                        &amp;${ip_name},
                        ${snmp_agent_name}_stack_memory,
                        NX_SNMP_AGENT_THREAD_STACK_SIZE,
                        &amp;${packet_pool_name},
                        ${snmp_agent_name}UsernameHandler,
                        ${snmp_agent_name}GetHandler,
                        ${snmp_agent_name}GetNextHandler,
                        ${snmp_agent_name}SetHandler);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_pop3_client.pop3_client_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_pop3_client">
                <function id="pop3_client_quick_setup"/>
            </moduleRef>
            <content>
/* POP3 Client instance. */
NX_POP3_CLIENT ${pop3_client_name:raProperty(module.azure.nxd_pop3_client.name)};
NXD_ADDRESS ${pop3_client_name}_ip_address;

/* Quick setup for ${pop3_client_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${pop3_client_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${pop3_client_name} -> ${packet_pool_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${pop3_client_name}_quick_setup()
{
    /* Create the POP3 Client instance. */
    #if !(${pop3_client_name_upper:raProperty(module.azure.nxd_pop3_client.name_upper)}_ADDRESS_TYPE)
    ${pop3_client_name}_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
    ${pop3_client_name}_ip_address.nxd_ip_address.v4 = ${pop3_client_name_upper}_ADDRESS_IPV4;
    #else
    ${pop3_client_name_upper}_GET_ADDRESS_IPV6(${pop3_client_name}_ip_address);
    #endif
    UINT status = nxd_pop3_client_create(&amp;${pop3_client_name},
                        ${pop3_client_name_upper}_APOP_AUTHENTICATION,
                        &amp;${ip_name},
                        &amp;${packet_pool_name},
                        &amp;${pop3_client_name}_ip_address,
                        ${pop3_client_name_upper}_SERVER_PORT,
                        ${pop3_client_name_upper}_CLIENT_NAME,
                        ${pop3_client_name_upper}_CLIENT_PASSWORD);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_ftp_server.ftp_server_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_ftp_server">
                <function id="ftp_server_quick_setup"/>
            </moduleRef>
            <content>
/* FTP Server instance. */
NX_FTP_SERVER ${ftp_server_name:raProperty(module.azure.nxd_ftp_server.name)};
uint8_t ${ftp_server_name}_stack_memory[${ftp_server_name_upper:raProperty(module.azure.nxd_ftp_server.name_upper)}_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${ftp_server_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* Login handler - replace with your own function if desired */
UINT ${ftp_server_name}LoginHandler(struct NX_FTP_SERVER_STRUCT *ftp_server_ptr, NXD_ADDRESS * client_ip_address, UINT client_port, CHAR *name, CHAR *password, CHAR *extra_info);
UINT ${ftp_server_name}LoginHandler(struct NX_FTP_SERVER_STRUCT *ftp_server_ptr, NXD_ADDRESS * client_ip_address, UINT client_port, CHAR *name, CHAR *password, CHAR *extra_info)
{
    FSP_PARAMETER_NOT_USED(ftp_server_ptr);
    FSP_PARAMETER_NOT_USED(client_ip_address);
    FSP_PARAMETER_NOT_USED(client_port);
    FSP_PARAMETER_NOT_USED(name);
    FSP_PARAMETER_NOT_USED(password);
    FSP_PARAMETER_NOT_USED(extra_info);
    return NX_SUCCESS;
}

/* Logout handler - replace with your own function if desired */
UINT ${ftp_server_name}LogoutHandler(struct NX_FTP_SERVER_STRUCT *ftp_server_ptr, NXD_ADDRESS * client_ip_address, UINT client_port, CHAR *name, CHAR *password, CHAR *extra_info);
UINT ${ftp_server_name}LogoutHandler(struct NX_FTP_SERVER_STRUCT *ftp_server_ptr, NXD_ADDRESS * client_ip_address, UINT client_port, CHAR *name, CHAR *password, CHAR *extra_info)
{
    FSP_PARAMETER_NOT_USED(ftp_server_ptr);
    FSP_PARAMETER_NOT_USED(client_ip_address);
    FSP_PARAMETER_NOT_USED(client_port);
    FSP_PARAMETER_NOT_USED(name);
    FSP_PARAMETER_NOT_USED(password);
    FSP_PARAMETER_NOT_USED(extra_info);
    return NX_SUCCESS;
}

/* Quick setup for ${ftp_server_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${ftp_server_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${ftp_server_name} -> ${packet_pool_name} -> Quick Setup).
 * - ${fx_name:raProperty(module.azure.fx.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${ftp_server_name} -> ${fx_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${ftp_server_name}_quick_setup()
{
    /* Create the FTP Server instance. */
    UINT status = nxd_ftp_server_create(&amp;${ftp_server_name},
                        "${ftp_server_name}",
                        &amp;${ip_name},
                        &amp;${fx_name},
                        ${ftp_server_name}_stack_memory,
                        ${ftp_server_name_upper}_STACK_SIZE,
                        &amp;${packet_pool_name},
                        ${ftp_server_name}LoginHandler,
                        ${ftp_server_name}LogoutHandler);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_http_server.http_server_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_http_server">
                <function id="http_server_quick_setup"/>
            </moduleRef>
            <content>
/* HTTP Server instance. */
NX_HTTP_SERVER ${http_server_name:raProperty(module.azure.nxd_http_server.name)};
uint8_t ${http_server_name}_stack_memory[${http_server_name_upper:raProperty(module.azure.nxd_http_server.name_upper)}_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${http_server_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* Authentication check function - replace with your own function if desired */
UINT ${http_server_name}AuthenticationCheck(NX_HTTP_SERVER *server_ptr, UINT request_type, CHAR *resource, CHAR **name, CHAR **password, CHAR **realm);
UINT ${http_server_name}AuthenticationCheck(NX_HTTP_SERVER *server_ptr, UINT request_type, CHAR *resource, CHAR **name, CHAR **password, CHAR **realm)
{
    FSP_PARAMETER_NOT_USED(server_ptr);
    FSP_PARAMETER_NOT_USED(request_type);
    FSP_PARAMETER_NOT_USED(resource);
    FSP_PARAMETER_NOT_USED(name);
    FSP_PARAMETER_NOT_USED(password);
    FSP_PARAMETER_NOT_USED(realm);
    return NX_SUCCESS;
}

/* Request notify handler - replace with your own function if desired */
UINT ${http_server_name}RequestNotifyHandler(NX_HTTP_SERVER *server_ptr, UINT request_type, CHAR *resource, NX_PACKET *packet_ptr);
UINT ${http_server_name}RequestNotifyHandler(NX_HTTP_SERVER *server_ptr, UINT request_type, CHAR *resource, NX_PACKET *packet_ptr)
{
    FSP_PARAMETER_NOT_USED(server_ptr);
    FSP_PARAMETER_NOT_USED(request_type);
    FSP_PARAMETER_NOT_USED(resource);
    FSP_PARAMETER_NOT_USED(packet_ptr);
    return NX_SUCCESS;
}

/* Quick setup for ${http_server_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${http_server_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${http_server_name} -> ${packet_pool_name} -> Quick Setup).
 * - ${fx_name:raProperty(module.azure.fx.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${http_server_name} -> ${fx_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${http_server_name}_quick_setup()
{
    /* Create the HTTP Server instance. */
    UINT status = nx_http_server_create(&amp;${http_server_name},
                        "${http_server_name}",
                        &amp;${ip_name},
                        &amp;${fx_name},
                        ${http_server_name}_stack_memory,
                        ${http_server_name_upper}_STACK_SIZE,
                        &amp;${packet_pool_name},
                        ${http_server_name}AuthenticationCheck,
                        ${http_server_name}RequestNotifyHandler);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_tftp_server.tftp_server_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_tftp_server">
                <function id="tftp_server_quick_setup"/>
            </moduleRef>
            <content>
/* TFTP Server instance. */
NX_TFTP_SERVER ${tftp_server_name:raProperty(module.azure.nxd_tftp_server.name)};
uint8_t ${tftp_server_name}_stack_memory[${tftp_server_name_upper:raProperty(module.azure.nxd_tftp_server.name_upper)}_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${tftp_server_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* Quick setup for ${tftp_server_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${tftp_server_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${tftp_server_name} -> ${packet_pool_name} -> Quick Setup).
 * - ${fx_name:raProperty(module.azure.fx.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${tftp_server_name} -> ${fx_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${tftp_server_name}_quick_setup()
{
    /* Create the TFTP Server instance. */
    UINT status = nxd_tftp_server_create(&amp;${tftp_server_name},
                        "${tftp_server_name}",
                        &amp;${ip_name},
                        &amp;${fx_name},
                        ${tftp_server_name}_stack_memory,
                        ${tftp_server_name_upper}_STACK_SIZE,
                        &amp;${packet_pool_name});
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Setup" id="module.azure.nxd_web_http_server.web_http_server_quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.azure.nxd_web_http_server">
                <function id="web_http_server_quick_setup"/>
            </moduleRef>
            <content>
/* Web HTTP Server instance. */
NX_WEB_HTTP_SERVER ${http_server_name:raProperty(module.azure.nxd_web_http_server.name)};
uint8_t ${http_server_name}_stack_memory[${http_server_name_upper:raProperty(module.azure.nxd_web_http_server.name_upper)}_STACK_SIZE] BSP_PLACE_IN_SECTION(".stack.${http_server_name}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);

/* Authentication check function - replace with your own function if desired */
UINT ${http_server_name}AuthenticationCheck(NX_WEB_HTTP_SERVER *server_ptr, UINT request_type, CHAR *resource, CHAR **name, CHAR **password, CHAR **realm);
UINT ${http_server_name}AuthenticationCheck(NX_WEB_HTTP_SERVER *server_ptr, UINT request_type, CHAR *resource, CHAR **name, CHAR **password, CHAR **realm)
{
    FSP_PARAMETER_NOT_USED(server_ptr);
    FSP_PARAMETER_NOT_USED(request_type);
    FSP_PARAMETER_NOT_USED(resource);
    FSP_PARAMETER_NOT_USED(name);
    FSP_PARAMETER_NOT_USED(password);
    FSP_PARAMETER_NOT_USED(realm);
    return NX_SUCCESS;
}

/* Request notify handler - replace with your own function if desired */
UINT ${http_server_name}RequestNotifyHandler(NX_WEB_HTTP_SERVER *server_ptr, UINT request_type, CHAR *resource, NX_PACKET *packet_ptr);
UINT ${http_server_name}RequestNotifyHandler(NX_WEB_HTTP_SERVER *server_ptr, UINT request_type, CHAR *resource, NX_PACKET *packet_ptr)
{
    FSP_PARAMETER_NOT_USED(server_ptr);
    FSP_PARAMETER_NOT_USED(request_type);
    FSP_PARAMETER_NOT_USED(resource);
    FSP_PARAMETER_NOT_USED(packet_ptr);
    return NX_SUCCESS;
}

/* Quick setup for ${http_server_name}.
 * - ${ip_name:raProperty(module.azure.nxd.ip.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${http_server_name} -> ${ip_name} -> Quick Setup).
 * - ${packet_pool_name:raProperty(module.azure.nxd.packet_pool.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${http_server_name} -> ${packet_pool_name} -> Quick Setup).
 * - ${fx_name:raProperty(module.azure.fx.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${http_server_name} -> ${fx_name} -> Quick Setup).
 * - nx_system_initialize() must be called before calling this function.
 */
void ${http_server_name}_quick_setup()
{
    /* Create the HTTP Server instance. */
    UINT status = nx_web_http_server_create(&amp;${http_server_name},
                        "${http_server_name}",
                        &amp;${ip_name},
                        ${http_server_name_upper}_PORT_NUMBER,
                        &amp;${fx_name},
                        ${http_server_name}_stack_memory,
                        ${http_server_name_upper}_STACK_SIZE,
                         &amp;${packet_pool_name},
                        ${http_server_name}AuthenticationCheck,
                        ${http_server_name}RequestNotifyHandler);
    assert(NX_SUCCESS == status);
}
            </content>
        </template>
    </developerSupport>
</raModuleDescription>
