<?xml version="1.0" encoding="UTF-8"?>

<raModuleDescription>
    <config id="config.threadx.thread" path="fsp_cfg/azure/tx/tx_user.h" version="0">
        <property default="" description="Add a path to your custom tx_user.h file. It can be used to override some or all of the configurations defined here, and to define additional configurations." display="General|Custom tx_user.h" id="config.azure.tx.custom_tx_user">
            <export>eval('' +
'var input = "${config.azure.tx.custom_tx_user}";' +
'if (input != "")' +
'{' +
'    input = \'#include "\' + input + \'"\';' +
'}' +
'    input' +
                '')</export>
        </property>
        <property id="config.azure.tx.error_checking" display="General|Error Checking" default="config.azure.tx.error_checking.enabled" description="The ThreadX basic API error checking can be bypassed by compiling with the symbol TX_DISABLE_ERROR_CHECKING defined.">
            <option id="config.azure.tx.error_checking.enabled" display="Enabled" value="" />
            <option id="config.azure.tx.error_checking.disabled" display="Disabled" value="#define TX_DISABLE_ERROR_CHECKING" />
        </property>
        <property default="100" display="Timer|Timer Ticks Per Second" id="config.azure.tx.timer_ticks_per_second" description="Define the number of times the system timer runs per second. Default is 100 ticks per second, which results in a tick every 10ms.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.tx.timer_ticks_per_second}".length === 0) || ("${config.azure.tx.timer_ticks_per_second}" &gt; 0)</constraint>
        </property>
        <property default="32" display="General|Max Priorities" id="config.azure.tx.max_priorities" description="Define the priority levels for ThreadX. Legal values range from 32 to 1024 and MUST be evenly divisible by 32.">
            <constraint display="Value must be a multiple of 32 and in range 32 to 1024 or empty">("${config.azure.tx.max_priorities}".length === 0) || (("${config.azure.tx.max_priorities}" % 32 === 0) &amp;&amp; ("${config.azure.tx.max_priorities}" &gt;= 32) &amp;&amp; ("${config.azure.tx.max_priorities}" &lt;= 1024))</constraint>
        </property>
        <property default="200" display="General|Minimum Stack" id="config.azure.tx.minimum_stack" description="Define the minimum stack for a ThreadX thread on this processor. If the size supplied during thread creation is less than this value, the thread create call will return an error.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.tx.minimum_stack}".length === 0) || ("${config.azure.tx.minimum_stack}" &gt; 0)</constraint>
        </property>
        <property default="1024" display="Timer|Timer Thread Stack Size" id="config.azure.tx.timer_thread_stack_size" description="Define the system timer thread's default stack size and priority. These are only applicable if TX_TIMER_PROCESS_IN_ISR is disabled.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.tx.timer_thread_stack_size}".length === 0) || ("${config.azure.tx.timer_thread_stack_size}" &gt; 0)</constraint>
        </property>
        <property default="0" display="Timer|Timer Thread Priority" id="config.azure.tx.timer_thread_priority" description="Define the system timer thread's default stack size and priority. These are only applicable if TX_TIMER_PROCESS_IN_ISR is disabled.">
            <constraint display="Value must be greater than 0 or empty">("${config.azure.tx.timer_thread_priority}".length === 0) || ("${config.azure.tx.timer_thread_priority}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.tx.timer_process_in_isr" display="Timer|Timer Process In ISR" default="config.azure.tx.timer_process_in_isr.enabled" description="Determine if timer expirations (application timers, timeouts, and tx_thread_sleep calls should be processed within the a system timer thread or directly in the timer ISR. When disabled, the timer thread is used. When enabled, timer expiration processing is done directly from the timer ISR, thereby eliminating the timer thread control block, stack, and context switching to activate it.">
            <option id="config.azure.tx.timer_process_in_isr.enabled" display="Enabled" value="#define TX_TIMER_PROCESS_IN_ISR" />
            <option id="config.azure.tx.timer_process_in_isr.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.reactivate_inline" display="Timer|Reactivate Inline" default="config.azure.tx.reactivate_inline.disabled" description="Determine if in-line timer reactivation should be used within the timer expiration processing. By default, this is disabled and a function call is used. When enabled, reactivating is performed in-line resulting in faster timer processing but slightly larger code size.">
            <option id="config.azure.tx.reactivate_inline.enabled" display="Enabled" value="#define TX_REACTIVATE_INLINE" />
            <option id="config.azure.tx.reactivate_inline.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.stack_filling" display="General|Stack Filling" default="config.azure.tx.stack_filling.enabled" description="Determine is stack filling is enabled. By default, ThreadX stack filling is enabled, which places an 0xEF pattern in each byte of each thread's stack. This is used by debuggers with ThreadX-awareness and by the ThreadX run-time stack checking feature.">
            <option id="config.azure.tx.stack_filling.enabled" display="Enabled" value="" />
            <option id="config.azure.tx.stack_filling.disabled" display="Disabled" value="#define TX_DISABLE_STACK_FILLING" />
        </property>
        <property id="config.azure.tx.preemption_threshold" display="General|Preemption Threshold" default="config.azure.tx.preemption_threshold.disabled" description="Determine if preemption-threshold should be disabled. By default, preemption-threshold is disabled. If the application does not use preemption-threshold, it may be disabled to reduce code size and improve performance.">
            <option id="config.azure.tx.preemption_threshold.enabled" display="Enabled" value="" />
            <option id="config.azure.tx.preemption_threshold.disabled" display="Disabled" value="#define TX_DISABLE_PREEMPTION_THRESHOLD" />
        </property>
        <property id="config.azure.tx.timer" display="Timer|Timer" default="config.azure.tx.timer.enabled" description="Determine if no timer processing is required. This option will help eliminate the timer processing when not needed.">
            <option id="config.azure.tx.timer.enabled" display="Enabled" value="" />
            <option id="config.azure.tx.timer.disabled" display="Disabled" value="#define TX_NO_TIMER" />
        </property>
        <property id="config.azure.tx.notify_callbacks" display="General|Notify Callbacks" default="config.azure.tx.notify_callbacks.disabled" description="Determine if the notify callback option should be disabled. By default, notify callbacks are disabled. If the application does not use notify callbacks, they may be disabled to reduce code size and improve performance.">
            <option id="config.azure.tx.notify_callbacks.enabled" display="Enabled" value="" />
            <option id="config.azure.tx.notify_callbacks.disabled" display="Disabled" value="#define TX_DISABLE_NOTIFY_CALLBACKS" />
        </property>
        <property id="config.azure.tx.inline_thread_resume_suspend" display="General|Inline Thread Resume Suspend" default="config.azure.tx.inline_thread_resume_suspend.disabled" description="Determine if the tx_thread_resume and tx_thread_suspend services should have their internal code in-line. This results in a larger image, but improves the performance of the thread resume and suspend services.">
            <option id="config.azure.tx.inline_thread_resume_suspend.enabled" display="Enabled" value="#define TX_INLINE_THREAD_RESUME_SUSPEND" />
            <option id="config.azure.tx.inline_thread_resume_suspend.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.not_interruptable" display="General|Not Interruptable" default="config.azure.tx.not_interruptable.disabled" description="Determine if the internal ThreadX code is non-interruptable. This results in smaller code size and less processing overhead, but increases the interrupt lockout time.">
            <option id="config.azure.tx.not_interruptable.enabled" display="Enabled" value="#define TX_NOT_INTERRUPTABLE" />
            <option id="config.azure.tx.not_interruptable.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.event_trace" display="Trace|Event Trace" default="config.azure.tx.event_trace.disabled" description="Determine if the trace event logging code should be enabled. This causes slight increases in code size and overhead, but provides the ability to generate system trace information which is available for viewing in TraceX.">
            <option id="config.azure.tx.event_trace.enabled" display="Enabled" value="#define TX_ENABLE_EVENT_TRACE" />
            <option id="config.azure.tx.event_trace.disabled" display="Disabled" value="" />
        </property>
        <property default="g_tx_trace_buffer" display="Trace|Trace Buffer Name" id="config.azure.tx.trace_buf_name" description="Name of trace buffer symbol, only used if Event Trace is enabled.">
            <constraint display="Name must be a valid C symbol">testSymbol("${config.azure.tx.trace_buf_name}")</constraint>
        </property>
        <property id="config.azure.tx.trace_buffer_location" display="Trace|Memory section for Trace Buffer" default=".bss" description="Specify the memory section where the Trace Buffer will be allocated, only used if Event Trace is enabled. To view TraceX data, export this buffer as raw binary data to a file (.trx extension recommended) and open it with Microsoft Azure RTOS TraceX.">
        </property>
        <property id="config.azure.tx.trace_buf_size" display="Trace|Trace Buffer Size" default="65536" description="Trace buffer size in bytes, only used if Event Trace is enabled">
            <constraint display="Value must be greater than 0">("${config.azure.tx.trace_buf_size}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.tx.num_registries" display="Trace|Trace Buffer Number of Registries" default="30" description="Number of registries available to TraceX, only used if Event Trace is enabled">
            <constraint display="Value must be greater than 0">("${config.azure.tx.num_registries}" &gt; 0)</constraint>
        </property>
        <property id="config.azure.tx.block_pool_performance_info" display="Performance|Block Pool Performance Info" default="config.azure.tx.block_pool_performance_info.disabled" description="When enabled, ThreadX gathers block pool performance information.">
            <option id="config.azure.tx.block_pool_performance_info.enabled" display="Enabled" value="#define TX_BLOCK_POOL_ENABLE_PERFORMANCE_INFO" />
            <option id="config.azure.tx.block_pool_performance_info.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.byte_pool_performance_info" display="Performance|Byte Pool Performance Info" default="config.azure.tx.byte_pool_performance_info.disabled" description="When enabled, ThreadX gathers byte pool performance information.">
            <option id="config.azure.tx.byte_pool_performance_info.enabled" display="Enabled" value="#define TX_BYTE_POOL_ENABLE_PERFORMANCE_INFO" />
            <option id="config.azure.tx.byte_pool_performance_info.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.event_flags_performance_info" display="Performance|Event Flags Performance Info" default="config.azure.tx.event_flags_performance_info.disabled" description="When enabled, ThreadX gathers event flags performance information.">
            <option id="config.azure.tx.event_flags_performance_info.enabled" display="Enabled" value="#define TX_EVENT_FLAGS_ENABLE_PERFORMANCE_INFO" />
            <option id="config.azure.tx.event_flags_performance_info.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.mutex_performance_info" display="Performance|Mutex Performance Info" default="config.azure.tx.mutex_performance_info.disabled" description="When enabled, ThreadX gathers mutex performance information.">
            <option id="config.azure.tx.mutex_performance_info.enabled" display="Enabled" value="#define TX_MUTEX_ENABLE_PERFORMANCE_INFO" />
            <option id="config.azure.tx.mutex_performance_info.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.queue_performance_info" display="Performance|Queue Performance Info" default="config.azure.tx.queue_performance_info.disabled" description="When enabled, ThreadX gathers queue performance information.">
            <option id="config.azure.tx.queue_performance_info.enabled" display="Enabled" value="#define TX_QUEUE_ENABLE_PERFORMANCE_INFO" />
            <option id="config.azure.tx.queue_performance_info.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.semaphore_performance_info" display="Performance|Semaphore Performance Info" default="config.azure.tx.semaphore_performance_info.disabled" description="When enabled, ThreadX gathers semaphore performance information.">
            <option id="config.azure.tx.semaphore_performance_info.enabled" display="Enabled" value="#define TX_SEMAPHORE_ENABLE_PERFORMANCE_INFO" />
            <option id="config.azure.tx.semaphore_performance_info.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.thread_performance_info" display="Performance|Thread Performance Info" default="config.azure.tx.thread_performance_info.disabled" description="When enabled, ThreadX gathers thread performance information.">
            <option id="config.azure.tx.thread_performance_info.enabled" display="Enabled" value="#define TX_THREAD_ENABLE_PERFORMANCE_INFO" />
            <option id="config.azure.tx.thread_performance_info.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.timer_performance_info" display="Performance|Timer Performance Info" default="config.azure.tx.timer_performance_info.disabled" description="When enabled, ThreadX gathers timer performance information.">
            <option id="config.azure.tx.timer_performance_info.enabled" display="Enabled" value="#define TX_TIMER_ENABLE_PERFORMANCE_INFO" />
            <option id="config.azure.tx.timer_performance_info.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.hw_stack_monitoring" display="RA|Hardware Thread Stack Monitoring" default="" description="Use RA Hardware Stack Monitors to monitor thread stacks for overflow. Not available on MCUs that support PSPLIM.">
            <select enum="enum.mcu.hw_stack_monitoring"/>
        </property>
        <property id="config.azure.tx.SysTick_IRQn" display="Interrupts|SysTick Interrupt Priority" default="board.icu.common.irq.priority0" description="Select the Systick interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.mandatory"/>
        </property>
        <property id="config.azure.tx.max_ipl" display="Interrupts|Maximum Interrupt Priority" default="board.icu.common.irq.priority0" description="The maximum priority (lowest numerical value) an interrupt can have and use scheduler services. Interrupts with higher priority can interrupt most scheduler critical sections. Setting this to Priority 0 (highest) disables this feature. This feature is not available on MCUs that do not have the BASEPRI register.">
            <select enum="enum.mcu.nvic.priorities.mandatory"/>
        </property>
        <property id="config.azure.tx.iar_library_support" display="General|IAR Library Support" default="config.azure.tx.iar_library_support.disabled" description="Enable IAR library support (IAR compiler only). When IAR Library Support is Enabled, enable the linker option --threaded_lib. In the IAR IDE, this can be enabled in Project > Options > General Options > Library Configuration > Enable thread support in library.">
            <option id="config.azure.tx.iar_library_support.enabled" display="Enabled" value="#define TX_ENABLE_IAR_LIBRARY_SUPPORT" />
            <option id="config.azure.tx.iar_library_support.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.bsd_support" display="General|BSD Support" default="config.azure.tx.bsd_support.disabled" description="Defines TX_THREAD_EXTENSION_1 to bsd_err_no in order to support NXD BSD.">
            <option id="config.azure.tx.bsd_support.enabled" display="Enabled" value="#define TX_THREAD_EXTENSION_1 int bsd_errno;" />
            <option id="config.azure.tx.bsd_support.disabled" display="Disabled" value="" />
        </property>
        <property id="config.azure.tx.filex_pointer" display="General|FileX Pointer" default="config.azure.tx.filex_pointer.enabled" description="Determine if there is a FileX pointer in the thread control block. By default, the pointer is there for legacy/backwards compatibility. The pointer must also be there for applications using FileX. Disable this to save space in the thread control block.">
            <option id="config.azure.tx.filex_pointer.enabled" display="Enabled" value="" />
            <option id="config.azure.tx.filex_pointer.disabled" display="Disabled" value="#define TX_NO_FILEX_POINTER" />
        </property>
        <content>
${config.azure.tx.custom_tx_user}

#ifdef __cplusplus
extern "C" {
#endif

${config.azure.tx.error_checking}
#ifndef TX_TIMER_TICKS_PER_SECOND
#define TX_TIMER_TICKS_PER_SECOND (${config.azure.tx.timer_ticks_per_second})
#endif
#ifndef TX_MAX_PRIORITIES
#define TX_MAX_PRIORITIES (${config.azure.tx.max_priorities})
#endif
#ifndef TX_MINIMUM_STACK
#define TX_MINIMUM_STACK (${config.azure.tx.minimum_stack})
#endif
#ifndef TX_TIMER_THREAD_STACK_SIZE
#define TX_TIMER_THREAD_STACK_SIZE (${config.azure.tx.timer_thread_stack_size})
#endif
#ifndef TX_TIMER_THREAD_PRIORITY
#define TX_TIMER_THREAD_PRIORITY (${config.azure.tx.timer_thread_priority})
#endif
${config.azure.tx.stack_filling}
/* TX_ENABLE_STACK_CHECKING is not configurable because the hardware stack monitor (SPMON or PSPLIM) should be used instead. */
${config.azure.tx.preemption_threshold}
#ifndef TX_ENABLE_REDUNDANT_CLEARING
/* TX_DISABLE_REDUNDANT_CLEARING is not configurable because FSP projects zero the .bss section during startup. */
#define TX_DISABLE_REDUNDANT_CLEARING
#endif
${config.azure.tx.timer_process_in_isr}
${config.azure.tx.timer}
#ifdef TX_NO_TIMER
/* If TX_NO_TIMER is used, the define TX_TIMER_PROCESS_IN_ISR must also be used. */
#ifndef TX_TIMER_PROCESS_IN_ISR
#define TX_TIMER_PROCESS_IN_ISR
#endif
#endif
${config.azure.tx.notify_callbacks}
${config.azure.tx.inline_thread_resume_suspend}
${config.azure.tx.not_interruptable}
${config.azure.tx.event_trace}
${config.azure.tx.block_pool_performance_info}
${config.azure.tx.byte_pool_performance_info}
${config.azure.tx.event_flags_performance_info}
${config.azure.tx.mutex_performance_info}
${config.azure.tx.queue_performance_info}
${config.azure.tx.semaphore_performance_info}
${config.azure.tx.thread_performance_info}
${config.azure.tx.timer_performance_info}
#define RM_THREADX_PORT_CFG_HW_STACK_MONITOR_ENABLE  (${config.azure.tx.hw_stack_monitoring})
#define TX_PORT_CFG_SYSTICK_IPL  (${config.azure.tx.SysTick_IRQn})
#define TX_PORT_MAX_IPL  (${config.azure.tx.max_ipl})
#ifdef TX_ENABLE_EVENT_TRACE
#define TX_USER_TRACE_BUFFER_DECLARE static uint8_t ${config.azure.tx.trace_buf_name}[${config.azure.tx.trace_buf_size}]BSP_ALIGN_VARIABLE(4) BSP_PLACE_IN_SECTION(&quot;${config.azure.tx.trace_buffer_location}&quot;);
#define TX_USER_ENABLE_TRACE  tx_trace_enable(&amp;${config.azure.tx.trace_buf_name}[0], ${config.azure.tx.trace_buf_size}, ${config.azure.tx.num_registries});
#else
#define TX_USER_TRACE_BUFFER_DECLARE
#define TX_USER_ENABLE_TRACE
#endif
${config.azure.tx.iar_library_support}
#if defined(TX_ENABLE_IAR_LIBRARY_SUPPORT) &amp;&amp; !defined(__ICCARM__)
/* IAR library support is only for the IAR compiler. */
#undef TX_ENABLE_IAR_LIBRARY_SUPPORT
#endif
#ifndef _RA_TZ_NONSECURE
/* Treat as secure unless this is a non-secure project. */
#define TX_SINGLE_MODE_SECURE
#endif
${config.azure.tx.bsd_support}
${config.azure.tx.filex_pointer}

#ifdef __cplusplus
}
#endif
        </content>
    </config>
    <rtos id="rtos.threadx" display="Azure RTOS ThreadX">
        <thread id="rtos.threadx.thread" config="config.threadx.thread" display="${rtos.threadx.thread.name}" version="0">
            <propertyCategory id="category.thread.priority" display="Threads Summary" groupValue="true" descending="false" showDefault="true"/>
            <propertyCategory id="category.interrupt.priority" display="Interrupts Summary" groupValue="true" descending="false" showDefault="true"/>
            <provides interface="interface.rtos.tx" />
            <provides interface="interface.rtos.supports.filex" />
            <provides interface="interface.rtos.rtos" />
            <!-- source file names derived from _symbol property - do not change ID -->
            <property id="_symbol" display="Symbol" default="new_thread${_instance}" description="Symbol used for generated function and file naming">
                <constraint display="Value must be a valid C language symbol">testSymbol("${_symbol}")</constraint>
            </property>
            <property id="rtos.threadx.thread.name" display="Name" default="New Thread" description="Name of the thread"/>
            <property id="rtos.threadx.thread.stack" display="Stack size (bytes)" default="1024" description="Number bytes in the stack memory area. The thread’s stack area must be large enough to handle its worst-case function call nesting and local variable usage. Size must be an integer multiple of 8.">
                <constraint display="Value must be an integer multiple of 8 and greater than 0">testInteger("${rtos.threadx.thread.stack}") &amp;&amp; ("${rtos.threadx.thread.stack}" % 8 == 0) &amp;&amp; ("${rtos.threadx.thread.stack}" &gt; 0)</constraint>
            </property>
            <property id="rtos.threadx.thread.priority" category="category.thread.priority" display="Priority" default="1" description="Numerical priority of thread. Legal values range from 0 through (TX_MAX_PRIORITES-1), where a value of 0 represents the highest priority."/>
            <property id="rtos.threadx.thread.autostart" display="Auto start" default="rtos.threadx.thread.autostart.enabled" description="Specifies whether the thread starts immediately or is placed in a suspended state. If Disabled is selected, the application must later call tx_thread_resume in order for the thread to run.">
                <option id="rtos.threadx.thread.autostart.enabled" display="Enabled" value="TX_AUTO_START" />
                <option id="rtos.threadx.thread.autostart.disabled" display="Disabled" value="TX_DONT_START" />
            </property>
            <property id="rtos.threadx.thread.timeslice" display="Time slicing interval (ticks)" default="1" description="Number of timer-ticks this thread is allowed to run before other ready threads of the same priority are given a chance to run. Legal time-slice values range from 1 to 0xFFFFFFFF (inclusive). A value of TX_NO_TIME_SLICE (a value of 0) disables time-slicing of this thread."/>
            <header>
                extern void ${_symbol}_create(void);
            </header>
            <includes>
                #include "bsp_api.h"
                #include "tx_api.h"
                #include "hal_data.h"
                #ifdef __cplusplus
                extern "C" void ${_symbol}_entry(void);
                #else
                extern void ${_symbol}_entry(void);
                #endif
            </includes>
            <macros>
            </macros>
            <declarations>
                TX_THREAD ${_symbol};
                void ${_symbol}_create(void);
                static void ${_symbol}_func(ULONG thread_input);
                static uint8_t ${_symbol}_stack[${rtos.threadx.thread.stack}] BSP_PLACE_IN_SECTION(".stack.${_symbol}") BSP_ALIGN_VARIABLE(BSP_STACK_ALIGNMENT);
                void tx_startup_err_callback(void * p_instance, void * p_data);
                void tx_startup_common_init(void);
            </declarations>
            <functions>
                extern bool         g_fsp_common_initialized;
                extern uint32_t     g_fsp_common_thread_count;
                extern TX_SEMAPHORE g_fsp_common_initialized_semaphore;

                void ${_symbol}_create (void)
                {
                    /* Increment count so we will know the number of ISDE created threads. */
                    g_fsp_common_thread_count++;

                    /* Initialize each kernel object. */
                    ${_object_init}

                    UINT err;
                    err = tx_thread_create(
                        &amp;${_symbol},
                        (CHAR *)"${rtos.threadx.thread.name}",
                        ${_symbol}_func,
                        (ULONG) NULL,
                        &amp;${_symbol}_stack,
                        ${rtos.threadx.thread.stack},
                        ${rtos.threadx.thread.priority},
                        ${rtos.threadx.thread.priority},
                        ${rtos.threadx.thread.timeslice},
                        ${rtos.threadx.thread.autostart}
                    );
                    if (TX_SUCCESS != err) {
                        tx_startup_err_callback(&amp;${_symbol}, 0);
                    }
                }

                static void ${_symbol}_func (ULONG thread_input) {
                    /* Not currently using thread_input. */
                    FSP_PARAMETER_NOT_USED(thread_input);

                    /* Initialize common components */
                    tx_startup_common_init();

                    /* Initialize each module instance. */
                    ${_module_init}

                    /* Enter user code for this thread. */
                    ${_symbol}_entry();
                }
            </functions>
            <entry>
                #include "${_symbol}.h"

                /* ${rtos.threadx.thread.name} entry function */
                void ${_symbol}_entry(void)
                {
                    /* TODO: add your own code here */
                    while(1)
                    {
                        tx_thread_sleep(1);
                    }
                }
            </entry>
            <init>
                ${_symbol}_create();
            </init>
            <start>
                #include "bsp_api.h"
                #include "tx_api.h"

                ${_include}

                uint32_t     g_fsp_common_thread_count;
                bool         g_fsp_common_initialized;
                TX_SEMAPHORE g_fsp_common_initialized_semaphore;

                #if defined(__ICCARM__)
                #define WEAK_REF_ATTRIBUTE
                #pragma weak tx_application_define_user               = tx_application_define_internal
                #elif defined(__GNUC__)
                #define WEAK_REF_ATTRIBUTE      __attribute__ ((weak, alias("tx_application_define_internal")))
                #endif

                #ifdef TX_USER_TRACE_BUFFER_DECLARE
				TX_USER_TRACE_BUFFER_DECLARE;
                #endif

                void g_hal_init(void);

                /** Weak reference for tx_err_callback */
                #if defined(__ICCARM__)
                #define tx_startup_err_callback_WEAK_ATTRIBUTE
                #pragma weak tx_startup_err_callback  = tx_startup_err_callback_internal
                #elif defined(__GNUC__)
                #define tx_startup_err_callback_WEAK_ATTRIBUTE __attribute__ ((weak, alias("tx_startup_err_callback_internal")))
                #endif
                void tx_startup_err_callback_internal(void * p_instance, void * p_data);
                void tx_startup_err_callback(void * p_instance, void * p_data) tx_startup_err_callback_WEAK_ATTRIBUTE;

                void tx_application_define_internal(void * first_unused_memory);

                void tx_application_define_internal(void * first_unused_memory)
                {
                    /* Does nothing. Default implementation of tx_application_define_user(). */
                    FSP_PARAMETER_NOT_USED(first_unused_memory);
                }

                void tx_application_define_internal(void * first_unused_memory);
                void tx_application_define_user(void * first_unused_memory) WEAK_REF_ATTRIBUTE;

                void tx_application_define(void * first_unused_memory)
                {
                    g_fsp_common_thread_count = 0;
                    g_fsp_common_initialized = false;

                    /* Create semaphore to make sure common init is done before threads start running. */
                    UINT err;
                    err = tx_semaphore_create(&amp;g_fsp_common_initialized_semaphore, "FSP Common Init Sem", 1);
                    if (TX_SUCCESS != err) {
                        tx_startup_err_callback(&amp;g_fsp_common_initialized_semaphore, 0);
                    }

                    ${_init}

					#ifdef TX_USER_ENABLE_TRACE
					TX_USER_ENABLE_TRACE;
					#endif

                    tx_application_define_user(first_unused_memory);
                }

                /*********************************************************************************************************************
                * @brief      This is a weak example initialization error function.  It should be overridden by defining a user function
                *             with the prototype below.
                *             - void tx_startup_err_callback(void * p_instance, void * p_data)
                *
                * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used to identify what error caused the callback.
                **********************************************************************************************************************/
                void tx_startup_err_callback_internal(void * p_instance, void * p_data);
                void tx_startup_err_callback_internal(void * p_instance, void * p_data)
                {
                    /** Suppress compiler warning for not using parameters. */
                    FSP_PARAMETER_NOT_USED(p_instance);
                    FSP_PARAMETER_NOT_USED(p_data);

                    /** An error has occurred. Please check function arguments for more information. */
                    BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
                }

                void tx_startup_common_init(void);
                void tx_startup_common_init(void)
                {
                    /* First thread will take care of common initialization. */
                    UINT err;
                    err = tx_semaphore_get(&amp;g_fsp_common_initialized_semaphore, TX_WAIT_FOREVER);

                    if (TX_SUCCESS != err)
                    {
                        /* Check err, problem occurred. */
                        tx_startup_err_callback(&amp;g_fsp_common_initialized_semaphore, 0);
                    }

                    /* Only perform common initialization if this is the first thread to execute. */
                    if (false == g_fsp_common_initialized)
                    {
                        /* Later threads will not run this code. */
                        g_fsp_common_initialized = true;

                        /* Perform common module initialization. */
                        g_hal_init();

                        /* Now that common initialization is done, let other threads through. */
                        /* First decrement by 1 since 1 thread has already come through. */
                        g_fsp_common_thread_count--;
                        while (g_fsp_common_thread_count > 0)
                        {
                            err = tx_semaphore_put(&amp;g_fsp_common_initialized_semaphore);

                            if (TX_SUCCESS != err)
                            {
                                /* Check err, problem occurred. */
                                tx_startup_err_callback(&amp;g_fsp_common_initialized_semaphore, 0);
                            }

                            g_fsp_common_thread_count--;
                        }
                    }
                }

                int main(void)
                {
                    tx_kernel_enter();

                    return 0;
                }
            </start>
        </thread>
        <object id="rtos.threadx.object.flags" display="${rtos.threadx.object.flags.symbol} Event Flags" version="0">
            <provides interface="object.flags" />
            <property id="rtos.threadx.object.flags.name" display="Name" default="New Event Flags" />
            <property id="rtos.threadx.object.flags.symbol" display="Symbol" default="g_new_event_flags${_instance}" />
            <header>
                extern TX_EVENT_FLAGS_GROUP ${rtos.threadx.object.flags.symbol};
            </header>
            <includes>
                #include "tx_api.h"
            </includes>
            <declarations>
                TX_EVENT_FLAGS_GROUP ${rtos.threadx.object.flags.symbol};
                void tx_startup_err_callback(void *p_instance, void *p_data);
            </declarations>
            <init>
                UINT err_${rtos.threadx.object.flags.symbol};
                err_${rtos.threadx.object.flags.symbol} = tx_event_flags_create(&amp;${rtos.threadx.object.flags.symbol}, (CHAR *) "${rtos.threadx.object.flags.name}");
                if (TX_SUCCESS != err_${rtos.threadx.object.flags.symbol}) {
                    tx_startup_err_callback(&amp;${rtos.threadx.object.flags.symbol}, 0);
                }
            </init>
        </object>
        <object id="rtos.threadx.object.mutex" display="${rtos.threadx.object.mutex.symbol} Mutex" version="0">
            <provides interface="object.mutex" />
            <property id="rtos.threadx.object.mutex.name" display="Name" default="New Mutex" />
            <property id="rtos.threadx.object.mutex.symbol" display="Symbol" default="g_new_mutex${_instance}" />
            <property id="rtos.threadx.object.mutex.inherit" display="Priority inheritance" default="rtos.threadx.object.mutex.inherit.disabled">
                <option id="rtos.threadx.object.mutex.inherit.enabled" display="Enabled" value="TX_INHERIT" />
                <option id="rtos.threadx.object.mutex.inherit.disabled" display="Disabled" value="TX_NO_INHERIT" />
            </property>
            <header>
                extern TX_MUTEX ${rtos.threadx.object.mutex.symbol};
            </header>
            <includes>
                #include "tx_api.h"
            </includes>
            <declarations>
                TX_MUTEX ${rtos.threadx.object.mutex.symbol};
                void tx_startup_err_callback(void *p_instance, void *p_data);
            </declarations>
            <init>
                UINT err_${rtos.threadx.object.mutex.symbol};
                err_${rtos.threadx.object.mutex.symbol} = tx_mutex_create(&amp;${rtos.threadx.object.mutex.symbol}, (CHAR *) "${rtos.threadx.object.mutex.name}", ${rtos.threadx.object.mutex.inherit});
                if (TX_SUCCESS != err_${rtos.threadx.object.mutex.symbol}) {
                    tx_startup_err_callback(&amp;${rtos.threadx.object.mutex.symbol}, 0);
                }
            </init>
        </object>
        <object id="rtos.threadx.object.semaphore" display="${rtos.threadx.object.semaphore.symbol} Semaphore" version="0">
            <provides interface="object.semaphore" />
            <property id="rtos.threadx.object.semaphore.name" display="Name" default="New Semaphore" />
            <property id="rtos.threadx.object.semaphore.symbol" display="Symbol" default="g_new_semaphore${_instance}" />
            <property id="rtos.threadx.object.semaphore.count" display="Initial count" default="0" />
            <header>
                extern TX_SEMAPHORE ${rtos.threadx.object.semaphore.symbol};
            </header>
            <includes>
                #include "tx_api.h"
            </includes>
            <declarations>
                TX_SEMAPHORE ${rtos.threadx.object.semaphore.symbol};
                void tx_startup_err_callback(void *p_instance, void *p_data);
            </declarations>
            <init>
                UINT err_${rtos.threadx.object.semaphore.symbol};
                err_${rtos.threadx.object.semaphore.symbol} = tx_semaphore_create(&amp;${rtos.threadx.object.semaphore.symbol}, (CHAR *) "${rtos.threadx.object.semaphore.name}", ${rtos.threadx.object.semaphore.count});
                if (TX_SUCCESS != err_${rtos.threadx.object.semaphore.symbol}) {
                    tx_startup_err_callback(&amp;${rtos.threadx.object.semaphore.symbol}, 0);
                }
            </init>
        </object>

        <object id="rtos.threadx.object.queue" display="${rtos.threadx.object.queue.symbol} Queue" version="0">
            <provides interface="object.queue" />
            <property id="rtos.threadx.object.queue.name" display="Name" default="New Queue" />
            <property id="rtos.threadx.object.queue.symbol" display="Symbol" default="g_new_queue${_instance}" />
            <property id="rtos.threadx.object.queue.msg_size" display="Message Size (Words)" default="1">
                <constraint display="Message Size must be integer between 1 and 16">testInteger("${rtos.threadx.object.queue.msg_size}")  &amp;&amp; ("${rtos.threadx.object.queue.msg_size}" &gt; 0) &amp;&amp; ("${rtos.threadx.object.queue.msg_size}" &lt; 17)</constraint>
            </property>
            <property id="rtos.threadx.object.queue.queue_size" display="Queue Size (Bytes)" default="20">
                <constraint display="Queue Size must be integer greater than 3">testInteger("${rtos.threadx.object.queue.queue_size}")  &amp;&amp; ("${rtos.threadx.object.queue.queue_size}" &gt; 3)</constraint>
            </property>
            <header>
                extern TX_QUEUE ${rtos.threadx.object.queue.symbol};
            </header>
            <includes>
                #include "tx_api.h"
            </includes>
            <declarations>
                TX_QUEUE ${rtos.threadx.object.queue.symbol};
                static uint8_t queue_memory_${rtos.threadx.object.queue.symbol}[${rtos.threadx.object.queue.queue_size}];
                void tx_startup_err_callback(void *p_instance, void *p_data);
            </declarations>
            <init>
                UINT err_${rtos.threadx.object.queue.symbol};
                err_${rtos.threadx.object.queue.symbol} = tx_queue_create(&amp;${rtos.threadx.object.queue.symbol}, (CHAR *) "${rtos.threadx.object.queue.name}", ${rtos.threadx.object.queue.msg_size}, &amp;queue_memory_${rtos.threadx.object.queue.symbol}, sizeof(queue_memory_${rtos.threadx.object.queue.symbol}));
                if (TX_SUCCESS != err_${rtos.threadx.object.queue.symbol}) {
                    tx_startup_err_callback(&amp;${rtos.threadx.object.queue.symbol}, 0);
                }
            </init>
        </object>

    </rtos>
</raModuleDescription>
