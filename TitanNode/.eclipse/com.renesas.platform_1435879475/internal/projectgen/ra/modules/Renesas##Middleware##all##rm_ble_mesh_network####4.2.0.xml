<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.middleware.rm_ble_mesh_network" path="fsp_cfg/rm_ble_mesh_network_cfg.h" version="0">
        <content>
            #ifdef __cplusplus
            extern "C" {
            #endif

            #ifdef __cplusplus
            }
            #endif
        </content>
    </config>
    <module id="module.middleware.rm_ble_mesh_network_on_rm_ble_mesh_network" display="Networking|Bluetooth Low Energy Mesh Network modules|BLE Mesh Network (rm_ble_mesh_network)" config="config.middleware.rm_ble_mesh_network" common="1" version="0" visible="true" url="group___r_m___b_l_e___m_e_s_h___n_e_t_w_o_r_k.html">

        <constraint display="Requires Low Level Library Implementation">
            ("${interface.middleware.rm_ble_mesh_network_on_rm_ble_mesh_network}" === "1")
        </constraint>
        <constraint display="BLE Mesh Network middleware not support R_BLE_SPP module">
            "${interface.mcu.radio}" === "1"
        </constraint>
        <requires id="module.middleware.rm_ble_mesh_network.requires.rm_ble_mesh_bearer" interface="interface.middleware.rm_ble_mesh_bearer.${module.middleware.rm_ble_mesh_bearer.name}" visible="true" display="Add BLE Mesh Bearer Module" find="true"/>
        <requires id="module.middleware.rm_ble_mesh_network.requires.rm_ble_mesh_provision" interface="interface.middleware.rm_ble_mesh_provision.${module.middleware.rm_ble_mesh_provision.name}" visible="true" display="Add BLE Mesh Provision Module" find="true"/>

        <provides interface="interface.middleware.rm_ble_mesh_network"/>
        <provides interface="interface.middleware.rm_ble_mesh_network_on_rm_ble_mesh_network"/>
        <provides interface="interface.middleware.rm_ble_mesh_network.${module.middleware.rm_ble_mesh_network.name}"/>

        <property display="General|Name" id="module.middleware.rm_ble_mesh_network.name" default="g_rm_ble_mesh_network${_instance}" description="Module name.">
            <constraint display="Name Must Be a Valid C Symbol">testSymbol("${module.middleware.rm_ble_mesh_network.name}")</constraint>
        </property>

        <property display="Channel Number" id="module.middleware.rm_ble_mesh_network.channel" default="0" description="Select channel corresponding to the channel number of the hardware.">
            <constraint display="Invalid Channel Number">testInteger("${module.middleware.rm_ble_mesh_network.channel}") &amp;&amp; ("${module.middleware.rm_ble_mesh_network.channel}" &gt;= 0) &amp;&amp; ("${module.middleware.rm_ble_mesh_network.channel}" &lt;= 4294967295)</constraint>
        </property>

        <property display="Ignore Netcache Wrapping" default= "module.middleware.rm_ble_mesh_network.old_packet_treatment.dropped" id="module.middleware.rm_ble_mesh_network.old_packet_treatment" description="Ignore netcache wrapping.">
            <option display="Processed" id="module.middleware.rm_ble_mesh_network.old_packet_treatment.processed" value="(1)"/>
            <option display="Dropped" id="module.middleware.rm_ble_mesh_network.old_packet_treatment.dropped" value="(0)"/>
        </property>

        <property display="RX Callback Event Enable" default= "module.middleware.rm_ble_mesh_network.rx_state_event.disabled" id="module.middleware.rm_ble_mesh_network.rx_state_event" description="Whether to enable the RX callback event or not.">
            <option display="Enabled" id="module.middleware.rm_ble_mesh_network.rx_state_event.enabled" value="(1)"/>
            <option display="Disabled" id="module.middleware.rm_ble_mesh_network.rx_state_event.disabled" value="(0)"/>
        </property>

        <property display="TX Callback Event Enable" default= "module.middleware.rm_ble_mesh_network.tx_state_event.disabled" id="module.middleware.rm_ble_mesh_network.tx_state_event" description="Whether to enable the TX callback event or not.">
            <option display="Enabled" id="module.middleware.rm_ble_mesh_network.tx_state_event.enabled" value="(1)"/>
            <option display="Disabled" id="module.middleware.rm_ble_mesh_network.tx_state_event.disabled" value="(0)"/>
        </property>

        <property display="Callback" id="module.middleware.rm_ble_mesh_network.network_callback" default="NULL" description="Callback function name.">
            <constraint display="Name Must Be a Valid C Symbol">testSymbol("${module.middleware.rm_ble_mesh_network.network_callback}")</constraint>
        </property>

        <property id="module.middleware.rm_ble_mesh_network.p_context" default="NULL">
            <constraint display="Name Must Be a Valid C Symbol">testSymbol("${module.middleware.rm_ble_mesh_network.p_context}")</constraint>
            <export>eval('' +
                'var output = "${module.middleware.rm_ble_mesh_network.p_context}";' +
                'if ("NULL" !== output) {' +
                'output = "&amp;" + output;' +
                '}' +
                'output')
            </export>
        </property>

        <header>
/** BLE Mesh Netowork on BLE Mesh Network Instance. */
  extern const rm_ble_mesh_network_instance_t ${module.middleware.rm_ble_mesh_network.name};

/** Access the BLE Mesh network instance using these structures when calling API functions directly (::p_api is not used). */
extern rm_ble_mesh_network_instance_ctrl_t ${module.middleware.rm_ble_mesh_network.name}_ctrl;
extern const rm_ble_mesh_network_cfg_t ${module.middleware.rm_ble_mesh_network.name}_cfg;

extern rm_ble_mesh_network_address_t ${module.middleware.rm_ble_mesh_network.name}_address;
extern rm_ble_mesh_network_subnet_handle_t ${module.middleware.rm_ble_mesh_network.name}_subnet_handle;
extern rm_ble_mesh_network_appkey_handle_t ${module.middleware.rm_ble_mesh_network.name}_appkey_handle;
extern rm_ble_mesh_network_address_type_t ${module.middleware.rm_ble_mesh_network.name}_address_type;

#ifndef ${module.middleware.rm_ble_mesh_network.network_callback}
void ${module.middleware.rm_ble_mesh_network.network_callback}(rm_ble_mesh_network_callback_args_t * p_args);
#endif
        </header>
        <includes>
#include "rm_ble_mesh_network.h"
#include "rm_ble_mesh_network_api.h"
        </includes>
        <declarations>
rm_ble_mesh_network_address_t ${module.middleware.rm_ble_mesh_network.name}_address;

/** Subnet Handle */
rm_ble_mesh_network_subnet_handle_t ${module.middleware.rm_ble_mesh_network.name}_subnet_handle;

/** AppKey Handle */
rm_ble_mesh_network_appkey_handle_t ${module.middleware.rm_ble_mesh_network.name}_appkey_handle;

/** Address Type */
rm_ble_mesh_network_address_type_t ${module.middleware.rm_ble_mesh_network.name}_address_type;

/** BLE MESH control block.  Allocate an instance specific control block to pass into the BLE MESH API calls.
 * @par Implemented as
 * - rm_ble_mesh_network_instance_ctrl_t
 */
rm_ble_mesh_network_instance_ctrl_t ${module.middleware.rm_ble_mesh_network.name}_ctrl;

/** BLE MESH configuration parameters. */
const rm_ble_mesh_network_cfg_t ${module.middleware.rm_ble_mesh_network.name}_cfg =
{
    /** the parameters for initialization. */
    .channel                           = ${module.middleware.rm_ble_mesh_network.channel},
    .old_packet_treatment              = ${module.middleware.rm_ble_mesh_network.old_packet_treatment},
    .rx_state_event                    = ${module.middleware.rm_ble_mesh_network.rx_state_event},
    .tx_state_event                    = ${module.middleware.rm_ble_mesh_network.tx_state_event},
    .p_mesh_bearer_instance            = &amp;${module.middleware.rm_ble_mesh_network.requires.rm_ble_mesh_bearer::module.middleware.rm_ble_mesh_bearer.name},
    .p_mesh_provision_instance         = &amp;${module.middleware.rm_ble_mesh_network.requires.rm_ble_mesh_provision::module.middleware.rm_ble_mesh_provision.name},
    .p_callback                        = ${module.middleware.rm_ble_mesh_network.network_callback},
    .p_context                         = ${module.middleware.rm_ble_mesh_network.p_context},
    .p_extend                          = NULL
};

/** This structure encompasses everything that is needed to use an instance of this interface. */
const rm_ble_mesh_network_instance_t ${module.middleware.rm_ble_mesh_network.name} =
{
    .p_ctrl = &amp;${module.middleware.rm_ble_mesh_network.name}_ctrl,
    .p_cfg  = &amp;${module.middleware.rm_ble_mesh_network.name}_cfg,
    .p_api  = &amp;g_rm_ble_mesh_network_on_rm_ble_mesh_network
};
        </declarations>
    </module>
</raModuleDescription>