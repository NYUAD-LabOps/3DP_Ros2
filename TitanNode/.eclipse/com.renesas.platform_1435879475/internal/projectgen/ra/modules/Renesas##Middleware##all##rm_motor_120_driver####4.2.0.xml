<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.middleware.motor_120_driver" path="fsp_cfg/rm_motor_120_driver_cfg.h" version="0">
        <property default="config.middleware.motor_120_driver.param_checking_enable.bsp" display="Parameter Checking" id="config.middleware.motor_120_driver.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.middleware.motor_120_driver.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.middleware.motor_120_driver.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.middleware.motor_120_driver.param_checking_enable.disabled" value="(0)"/>
        </property>

        <content>
#ifdef __cplusplus
extern "C" {
#endif

#define MOTOR_120_DRIVER_CFG_PARAM_CHECKING_ENABLE   ${config.middleware.motor_120_driver.param_checking_enable}

#ifdef __cplusplus
}
#endif
        </content>
    </config>
    <module config="config.middleware.motor_120_driver" display="Motor|ADC and PWM modulation  (rm_motor_120_driver)" id="module.middleware.motor_120_driver" version="1" url="group___m_o_t_o_r__120___d_r_i_v_e_r.html">
        <requires id="module.middleware.motor_120_driver.requires.adc" interface="interface.driver.adc" find="true" display="Add ADC driver [Mandatory]">
            <override property="module.driver.adc.mode" value="ADC_MODE_SINGLE_SCAN"/>
            <override property="module.driver.adc.resolution" value="ADC_RESOLUTION_12_BIT"/>
            <override property="module.driver.adc.alignment" value="ADC_ALIGNMENT_RIGHT"/>
            <override property="module.driver.adc.clearing" value="ADC_CLEAR_AFTER_READ_OFF"/>
            <override property="module.driver.adc.double_trigger_mode" value="ADC_DOUBLE_TRIGGER_DISABLED"/>
            <override property="module.driver.adc.add_average_count" value="module.driver.adc.add_average_count.add_off"/>
            <override property="module.driver.adc.adc_vref_control" value="ADC_VREF_CONTROL_VREFH"/>
            <override property="module.driver.adc.p_callback" value="rm_motor_120_driver_cyclic"/>
            <override property="module.driver.adc.p_context" value="${module.middleware.motor_120_driver.name}"/>
        </requires>

        <requires id="module.middleware.motor_120_driver.requires.three_phase" interface="interface.driver.three_phase" find="true" display="Add GPT three phase PWM driver [Mandatory]">
            <override property="module.driver.three_phase.mode" value="THREE_PHASE_BUFFER_MODE_SINGLE"/>
            <override property="module.driver.three_phase.period" value="${module.middleware.motor_120_driver.pwm_carrier_freq}"/>
            <override property="module.driver.three_phase.unit" value="module.driver.three_phase.unit.unit_period_usec"/>
            <override property="module.driver.three_phase.dead_time_count_up" value="${module.middleware.motor_120_driver.dead_time}"/>
            <override property="module.driver.three_phase.dead_time_count_down" value="${module.middleware.motor_120_driver.dead_time}"/>
            <override property="module.driver.three_phase.gtioca_stop_level" value="module.driver.three_phase.gtioca_stop_level.${module.middleware.motor_120_driver.gtioca_stop_level}"/>
            <override property="module.driver.three_phase.gtiocb_stop_level" value="module.driver.three_phase.gtiocb_stop_level.${module.middleware.motor_120_driver.gtiocb_stop_level}"/>
        </requires>

        <provides interface="interface.middleware.motor_120_driver" />
        <provides interface="interface.middleware.motor_120_driver.${module.middleware.motor_120_driver.name}" />

        <!-- Module Name -->
        <property default="g_motor_120_driver${_instance}" display="General|Name" id="module.middleware.motor_120_driver.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.middleware.motor_120_driver.name}")</constraint>
        </property>

        <!-- General Settings -->
        <property default="module.middleware.motor_120_driver.motor_120_type.sensorless" display="General|120 degree control type" id="module.middleware.motor_120_driver.motor_120_type" description="120 degree control type">
            <option display="Sensorless" id="module.middleware.motor_120_driver.motor_120_type.sensorless" value="MOTOR_120_DRIVER_TYPE_SENSORLESS"/>
            <option display="Hall" id="module.middleware.motor_120_driver.motor_120_type.hall" value="MOTOR_120_DRIVER_TYPE_HALL"/>
        </property>
        <property default="BSP_IO_PORT_06_PIN_01" display="General|PWM output port UP" id="module.middleware.motor_120_driver.port_up" description="PWM output port UP">
        </property>
        <property default="BSP_IO_PORT_06_PIN_00" display="General|PWM output port UN" id="module.middleware.motor_120_driver.port_un" description="PWM output port UN">
        </property>
        <property default="BSP_IO_PORT_01_PIN_13" display="General|PWM output port VP" id="module.middleware.motor_120_driver.port_vp" description="PWM output port VP">
        </property>
        <property default="BSP_IO_PORT_01_PIN_14" display="General|PWM output port VN" id="module.middleware.motor_120_driver.port_vn" description="PWM output port VN">
        </property>
        <property default="BSP_IO_PORT_01_PIN_11" display="General|PWM output port WP" id="module.middleware.motor_120_driver.port_wp" description="PWM output port WP">
        </property>
        <property default="BSP_IO_PORT_01_PIN_12" display="General|PWM output port WN" id="module.middleware.motor_120_driver.port_wn" description="PWM output port WN">
        </property>
        <property default="120" display="General|PWM timer frequency (MHz)" id="module.middleware.motor_120_driver.pwm_timer_freq" description="GPT PWM timer frequency">
            <constraint display="Must be a valid non-negative value.">("${module.middleware.motor_120_driver.pwm_timer_freq}" &gt;= 0)</constraint>
        </property>
        <property default="50" display="General|PWM carrier period (Microseconds)" id="module.middleware.motor_120_driver.pwm_carrier_freq" description="GPT PWM carrier period">
            <constraint display="Must be a valid non-negative value.">("${module.middleware.motor_120_driver.pwm_carrier_freq}" &gt;= 0)</constraint>
        </property>
        <property default="240" display="General|Dead time (Raw counts)" id="module.middleware.motor_120_driver.dead_time" description="GPT PWM dead time">
            <constraint display="Must be a valid non-negative value.">("${module.middleware.motor_120_driver.dead_time}" &gt;= 0)</constraint>
        </property>
        <property default="27.5" display="General|Current range (A)" id="module.middleware.motor_120_driver.current_range" description="Current range to measure(Maximum input current)">
            <constraint display="Must be a valid non-negative value.">("${module.middleware.motor_120_driver.current_range}" &gt;= 0)</constraint>
        </property>
        <property default="111.0" display="General|Voltage range (V)" id="module.middleware.motor_120_driver.vdc_range" description="Voltage range to measure(Maximum input main line voltage)">
            <constraint display="Must be a valid non-negative value.">("${module.middleware.motor_120_driver.vdc_range}" &gt;= 0)</constraint>
        </property>
        <property default="0xFFF" display="General|Resolution of A/D conversion" id="module.middleware.motor_120_driver.ad_resolution" description="Resolution of A/D conversion">
        </property>
        <property default="0x745" display="General|Offset of A/D conversion for current" id="module.middleware.motor_120_driver.ad_current_offset" description="Offset of A/D conversion for current">
        </property>
        <property default="0.66" display="General|Conversion level of A/D conversion for voltage" id="module.middleware.motor_120_driver.ad_voltage_conversion" description="Conversion level of A/D conversion for voltage">
            <constraint display="Must be a valid non-negative value.">("${module.middleware.motor_120_driver.ad_voltage_conversion}" &gt;= 0)</constraint>
        </property>
        <property default="500" display="General|Counts for current offset measurement" id="module.middleware.motor_120_driver.offset_count" description="How many times to measure current offset">
            <constraint display="Must be a valid non-negative value.">("${module.middleware.motor_120_driver.offset_count}" &gt;= 0)</constraint>
        </property>
        <property default="24.0" display="General|Input voltage" id="module.middleware.motor_120_driver.input_vdc" description="Input voltage">
            <constraint display="Must be a valid non-negative value.">("${module.middleware.motor_120_driver.input_vdc}" &gt;= 0)</constraint>
        </property>
        <property default="ADC_CHANNEL_0" display="General|A/D conversion channel for U phase current" id="module.middleware.motor_120_driver.iu_ad_ch" description="Specify the A/D channel for U phase current">
        </property>
        <property default="ADC_CHANNEL_2" display="General|A/D conversion channel for W phase current" id="module.middleware.motor_120_driver.iw_ad_ch" description="Specify the A/D channel for W phase current">
        </property>
        <property default="ADC_CHANNEL_5" display="General|A/D conversion channel for main line voltage" id="module.middleware.motor_120_driver.vdc_ad_ch" description="Specify the A/D channel for main line voltage">
        </property>
        <property default="ADC_CHANNEL_18" display="General|A/D conversion channel for U phase voltage" id="module.middleware.motor_120_driver.vu_ad_ch" description="Specify the A/D channel for U phase voltage">
        </property>
        <property default="ADC_CHANNEL_20" display="General|A/D conversion channel for V phase voltage" id="module.middleware.motor_120_driver.vv_ad_ch" description="Specify the A/D channel for V phase voltage">
        </property>
        <property default="ADC_CHANNEL_6" display="General|A/D conversion channel for W phase voltage" id="module.middleware.motor_120_driver.vw_ad_ch" description="Specify the A/D channel for W phase voltage">
        </property>
        <property default="module.middleware.motor_120_driver.gtioca_stop_level.pin_level_high" display="General|GTIOCA stop level" id="module.middleware.motor_120_driver.gtioca_stop_level" description="Select the behavior of the output pin when the timer is stopped.">
            <option display="Pin Level Low" id="module.middleware.motor_120_driver.gtioca_stop_level.pin_level_low" value="pin_level_low"/>
            <option display="Pin Level High" id="module.middleware.motor_120_driver.gtioca_stop_level.pin_level_high" value="pin_level_high"/>
        </property>
        <property default="module.middleware.motor_120_driver.gtiocb_stop_level.pin_level_high" display="General|GTIOCB stop level" id="module.middleware.motor_120_driver.gtiocb_stop_level" description="Select the behavior of the output pin when the timer is stopped.">
            <option display="Pin Level Low" id="module.middleware.motor_120_driver.gtiocb_stop_level.pin_level_low" value="pin_level_low"/>
            <option display="Pin Level High" id="module.middleware.motor_120_driver.gtiocb_stop_level.pin_level_high" value="pin_level_high"/>
        </property>

        <!-- Modulation Settings -->
        <property default="0.9375" display="Modulation|Maximum duty" id="module.middleware.motor_120_driver.max_duty" description="Maximum duty of PWM">
            <constraint display="Must be a valid non-negative value.">("${module.middleware.motor_120_driver.max_duty}" &gt;= 0)</constraint>
        </property>

        <!-- Motor Callback Settings -->
        <property default="NULL" display="Interrupts|Callback" id="module.middleware.motor_120_driver.callback" description="A user callback function. If this callback function is provided, it is called at A/D conversion finish interrupt.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.middleware.motor_120_driver.callback}")</constraint>
        </property>
        <property default="NULL" id="module.middleware.motor_120_driver.context">
            <export>eval('' +
            'var string = "${module.middleware.motor_120_driver.context}";' +
            'if ("NULL" !== string){' +
            'string = "&amp;" + string  ;' +
            '}' +
            'String(string)')
            </export>
        </property>

        <!-- Contents -->
        <header>
/** Motor 120 driver instance. */
extern const motor_120_driver_instance_t ${module.middleware.motor_120_driver.name};

/** Access the motor 120 driver instance using these structures
 ** when calling API functions directly (::p_api is not used). */
extern motor_120_driver_instance_ctrl_t ${module.middleware.motor_120_driver.name}_ctrl;
extern const motor_120_driver_extended_cfg_t ${module.middleware.motor_120_driver.name}_extend;
extern const motor_120_driver_cfg_t ${module.middleware.motor_120_driver.name}_cfg;

#ifndef ${module.middleware.motor_120_driver.callback}
void ${module.middleware.motor_120_driver.callback}(motor_120_driver_callback_args_t * p_args);
#endif
        </header>

        <includes>
#include &quot;rm_motor_120_driver.h&quot;
        </includes>

        <declarations>

/* Motor 120 driver configuration */
motor_120_driver_instance_ctrl_t ${module.middleware.motor_120_driver.name}_ctrl;

const motor_120_driver_extended_cfg_t ${module.middleware.motor_120_driver.name}_extend =
{
  .p_adc_instance = &amp;${module.middleware.motor_120_driver.requires.adc::module.driver.adc.name},
  .p_three_phase_instance = &amp;${module.middleware.motor_120_driver.requires.three_phase::module.driver.three_phase.name},
  .motor_120_type = ${module.middleware.motor_120_driver.motor_120_type},
  .iu_ad_ch = ${module.middleware.motor_120_driver.iu_ad_ch},
  .iw_ad_ch = ${module.middleware.motor_120_driver.iw_ad_ch},
  .vdc_ad_ch = ${module.middleware.motor_120_driver.vdc_ad_ch},
  .vu_ad_ch = ${module.middleware.motor_120_driver.vu_ad_ch},
  .vv_ad_ch = ${module.middleware.motor_120_driver.vv_ad_ch},
  .vw_ad_ch = ${module.middleware.motor_120_driver.vw_ad_ch},
  .port_up = ${module.middleware.motor_120_driver.port_up},
  .port_un = ${module.middleware.motor_120_driver.port_un},
  .port_vp = ${module.middleware.motor_120_driver.port_vp},
  .port_vn = ${module.middleware.motor_120_driver.port_vn},
  .port_wp = ${module.middleware.motor_120_driver.port_wp},
  .port_wn = ${module.middleware.motor_120_driver.port_wn},
  .u4_pwm_timer_freq = ${module.middleware.motor_120_driver.pwm_timer_freq},
  .u4_pwm_carrier_freq = 1.0F / (${module.middleware.motor_120_driver.pwm_carrier_freq} / 1000.0F),
  .u4_deadtime = (${module.middleware.motor_120_driver.dead_time} / ${module.middleware.motor_120_driver.pwm_timer_freq}),
  .f_current_range = ${module.middleware.motor_120_driver.current_range}F,
  .f_vdc_range = ${module.middleware.motor_120_driver.vdc_range}F,
  .f_ad_resolution = ${module.middleware.motor_120_driver.ad_resolution},
  .f_ad_current_offset = ${module.middleware.motor_120_driver.ad_current_offset},
  .f_ad_voltage_conversion = ${module.middleware.motor_120_driver.ad_voltage_conversion}F,
  .u4_offset_calc_count = ${module.middleware.motor_120_driver.offset_count},
  .mod_param.f4_vdc = ${module.middleware.motor_120_driver.input_vdc}F,
  .mod_param.f4_max_duty = ${module.middleware.motor_120_driver.max_duty}F,
  .mod_param.f4_min_duty = (${module.middleware.motor_120_driver.dead_time} / ${module.middleware.motor_120_driver.pwm_timer_freq}) / ${module.middleware.motor_120_driver.pwm_carrier_freq},
  .mod_param.f4_neutral_duty = 0.5F,
};

const motor_120_driver_cfg_t ${module.middleware.motor_120_driver.name}_cfg =
{
  .p_callback = ${module.middleware.motor_120_driver.callback},
  .p_context = ${module.middleware.motor_120_driver.context},
  .p_extend = &amp;${module.middleware.motor_120_driver.name}_extend,
};

/* Instance structure to use motor 120 driver module. */
const motor_120_driver_instance_t ${module.middleware.motor_120_driver.name} =
{
  .p_ctrl = &amp;${module.middleware.motor_120_driver.name}_ctrl,
  .p_cfg  = &amp;${module.middleware.motor_120_driver.name}_cfg,
  .p_api  = &amp;g_motor_120_driver_on_motor_120_driver,
};
        </declarations>
    </module>
</raModuleDescription>
